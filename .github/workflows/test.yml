name: Test MCP Protocol

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-mcp:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "TRACKHS_API_URL=https://api-test.trackhs.com/api" >> .env
        echo "TRACKHS_USERNAME=test_user" >> .env
        echo "TRACKHS_PASSWORD=test_password" >> .env
        echo "TRACKHS_TIMEOUT=30" >> .env
        echo "HOST=0.0.0.0" >> .env
        echo "PORT=8080" >> .env
        echo "CORS_ORIGINS=https://elevenlabs.io,https://app.elevenlabs.io" >> .env
    
    - name: Run MCP Protocol Tests
      run: |
        pytest tests/test_mcp_protocol.py tests/test_mcp_server.py -v --cov=src/trackhs_mcp --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: mcp-protocol
        name: mcp-protocol-coverage
        fail_ci_if_error: false
    
    - name: Validate MCP Server
      run: |
        python -c "from src.trackhs_mcp.server import mcp; print('MCP Server imports successfully')"
    
    - name: Check MCP Tools Registration
      run: |
        python -c "
        from src.trackhs_mcp.infrastructure.tools.registry import register_all_tools
        from src.trackhs_mcp.infrastructure.tools.resources import register_all_resources
        from src.trackhs_mcp.infrastructure.prompts.reservations import register_all_prompts
        from fastmcp import FastMCP
        from unittest.mock import Mock
        
        mcp = FastMCP('Test Server')
        mock_client = Mock()
        
        register_all_tools(mcp, mock_client)
        register_all_resources(mcp, mock_client)
        register_all_prompts(mcp, mock_client)
        
        print('All MCP components registered successfully')
        "
