# GitHub Actions CI/CD Pipeline - Consolidado
# Workflow único que reemplaza ci.yml, mcp.yml, mcp-mvp.yml y el anterior ci-cd.yml

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  TRACKHS_API_URL: "https://ihmvacations.trackhs.com/api"
  TRACKHS_USERNAME: "test_user"
  TRACKHS_PASSWORD: "test_password"
  TRACKHS_TIMEOUT: "30"

jobs:
  quality-and-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Code Quality Checks
        run: |
          echo "🔍 Running code quality checks..."

          # Black formatting check
          black --check src tests

          # Import sorting check
          isort --check-only src tests

          # Linting (errores críticos)
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics

          # Security scan
          bandit -r src -f json -o bandit-report.json || true

      - name: Run Complete Test Suite
        env:
          TRACKHS_API_URL: ${{ env.TRACKHS_API_URL }}
          TRACKHS_USERNAME: ${{ env.TRACKHS_USERNAME }}
          TRACKHS_PASSWORD: ${{ env.TRACKHS_PASSWORD }}
          TRACKHS_TIMEOUT: ${{ env.TRACKHS_TIMEOUT }}
        run: |
          echo "🧪 Running complete test suite (unit + e2e)..."
          pytest tests/ -v --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=70

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
            bandit-report.json
          retention-days: 30

  mcp-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run FastMCP Preflight
        env:
          TRACKHS_API_URL: ${{ env.TRACKHS_API_URL }}
          TRACKHS_USERNAME: ${{ env.TRACKHS_USERNAME }}
          TRACKHS_PASSWORD: ${{ env.TRACKHS_PASSWORD }}
          TRACKHS_TIMEOUT: ${{ env.TRACKHS_TIMEOUT }}
        run: |
          echo "✈️ Running FastMCP preflight..."
          python scripts/fastmcp_preflight_simple.py

      - name: FastMCP Complete Smoke Test
        env:
          TRACKHS_API_URL: ${{ env.TRACKHS_API_URL }}
          TRACKHS_USERNAME: ${{ env.TRACKHS_USERNAME }}
          TRACKHS_PASSWORD: ${{ env.TRACKHS_PASSWORD }}
          TRACKHS_TIMEOUT: ${{ env.TRACKHS_TIMEOUT }}
        run: |
          echo "🧪 Running complete FastMCP smoke test..."
          python scripts/fastmcp_smoke_test.py

      - name: Upload MCP Validation Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-validation-logs
          path: |
            *.log
            fastmcp_*.log
          retention-days: 30
          if-no-files-found: ignore

  deploy:
    runs-on: ubuntu-latest
    needs: [quality-and-tests, mcp-validation]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install FastMCP CLI
        run: |
          echo "📦 Installing FastMCP CLI..."
          pip install fastmcp[cli] --upgrade

      - name: Verify FastMCP CLI
        run: |
          echo "🔍 Verifying FastMCP CLI installation..."
          fastmcp --version || echo "FastMCP CLI not available, using alternative method"

      - name: Deploy to FastMCP Cloud
        env:
          FASTMCP_API_KEY: ${{ secrets.FASTMCP_API_KEY }}
          TRACKHS_API_URL: ${{ secrets.TRACKHS_API_URL }}
          TRACKHS_USERNAME: ${{ secrets.TRACKHS_USERNAME }}
          TRACKHS_PASSWORD: ${{ secrets.TRACKHS_PASSWORD }}
        run: |
          echo "🚀 Deploying to FastMCP Cloud..."
          echo "✅ All validations passed - ready for deployment"
          echo ""
          echo "📋 Deployment configuration:"
          echo "  - Entry point: src.trackhs_mcp.__main__"
          echo "  - Python version: 3.11"
          echo "  - Requirements: requirements.txt"
          echo "  - Config file: fastmcp.yaml"
          echo ""
          echo "🔧 Environment variables configured:"
          echo "  - TRACKHS_API_URL: ${{ secrets.TRACKHS_API_URL }}"
          echo "  - TRACKHS_USERNAME: ${{ secrets.TRACKHS_USERNAME }}"
          echo "  - TRACKHS_PASSWORD: [HIDDEN]"
          echo ""

          # Intentar deploy automático con FastMCP CLI
          if command -v fastmcp &> /dev/null; then
            echo "🚀 Attempting automatic deployment with FastMCP CLI..."
            if [ -n "$FASTMCP_API_KEY" ]; then
              # Configurar autenticación
              echo "🔐 Configuring FastMCP authentication..."
              # fastmcp auth set-key $FASTMCP_API_KEY || echo "Auth setup failed, continuing..."

              # Deploy
              echo "📦 Deploying application..."
              # fastmcp deploy --config fastmcp.yaml || echo "Auto-deploy failed, manual deployment required"
              echo "⚠️  Auto-deploy not implemented yet - manual deployment required"
            else
              echo "⚠️  FASTMCP_API_KEY not configured - manual deployment required"
            fi
          else
            echo "⚠️  FastMCP CLI not available - manual deployment required"
          fi

          echo ""
          echo "💡 Manual deployment steps:"
          echo "  1. Configure secrets in FastMCP Cloud dashboard"
          echo "  2. Deploy using FastMCP CLI or dashboard"
          echo "  3. Verify deployment health check"

      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ All Validations Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Quality and tests: ✅ (70%+ coverage)" >> $GITHUB_STEP_SUMMARY
          echo "- MCP validation: ✅ (smoke test passed)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Entry point:** \`src.trackhs_mcp.__main__\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Python version:** 3.11" >> $GITHUB_STEP_SUMMARY
          echo "- **Config file:** \`fastmcp.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Requirements:** \`requirements.txt\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Environment Variables" >> $GITHUB_STEP_SUMMARY
          echo "- \`TRACKHS_API_URL\`: ✅ Configured" >> $GITHUB_STEP_SUMMARY
          echo "- \`TRACKHS_USERNAME\`: ✅ Configured" >> $GITHUB_STEP_SUMMARY
          echo "- \`TRACKHS_PASSWORD\`: ✅ Configured" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure secrets in FastMCP Cloud dashboard" >> $GITHUB_STEP_SUMMARY
          echo "2. Deploy using FastMCP CLI or dashboard" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify deployment health check" >> $GITHUB_STEP_SUMMARY