# GitHub Actions CI/CD Pipeline
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pre-commit

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  fastmcp-preflight:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: pre-commit

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run FastMCP Preflight
        env:
          TRACKHS_API_URL: ${{ secrets.TRACKHS_API_URL }}
          TRACKHS_USERNAME: ${{ secrets.TRACKHS_USERNAME }}
          TRACKHS_PASSWORD: ${{ secrets.TRACKHS_PASSWORD }}
        run: |
          # Ejecutar pre-tests personalizados
          python scripts/pretest.py

          # Ejecutar preflight especÃ­fico de FastMCP
          python scripts/fastmcp_preflight.py

          # Validar configuraciÃ³n FastMCP
          python -c "
          import yaml
          with open('fastmcp.yaml', 'r') as f:
              config = yaml.safe_load(f)
          assert 'entrypoint' in config, 'Missing entrypoint in fastmcp.yaml'
          assert 'environment' in config, 'Missing environment config'
          print('âœ… FastMCP config valid')
          "

      - name: Validate MCP Server
        env:
          TRACKHS_API_URL: ${{ secrets.TRACKHS_API_URL }}
          TRACKHS_USERNAME: ${{ secrets.TRACKHS_USERNAME }}
          TRACKHS_PASSWORD: ${{ secrets.TRACKHS_PASSWORD }}
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'src')
          from trackhs_mcp.server import mcp
          assert hasattr(mcp, 'run'), 'MCP server not properly configured'
          print('âœ… MCP server valid')
          "

  quality-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pre-commit

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Code Quality Checks
        run: |
          # Black formatting
          black --check src tests

          # Import sorting
          isort --check-only src tests

          # Linting
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics

          # Type checking
          mypy src --ignore-missing-imports

          # Security scan
          bandit -r src -f json -o bandit-report.json || true

      - name: Run Tests
        env:
          TRACKHS_API_URL: ${{ secrets.TRACKHS_API_URL }}
          TRACKHS_USERNAME: ${{ secrets.TRACKHS_USERNAME }}
          TRACKHS_PASSWORD: ${{ secrets.TRACKHS_PASSWORD }}
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80

      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json
          if-no-files-found: ignore

  deploy-fastmcp:
    runs-on: ubuntu-latest
    needs: [pre-commit, fastmcp-preflight, quality-checks]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to FastMCP Cloud
        env:
          FASTMCP_API_KEY: ${{ secrets.FASTMCP_API_KEY }}
          TRACKHS_API_URL: ${{ secrets.TRACKHS_API_URL }}
          TRACKHS_USERNAME: ${{ secrets.TRACKHS_USERNAME }}
          TRACKHS_PASSWORD: ${{ secrets.TRACKHS_PASSWORD }}
        run: |
          echo "ðŸš€ Deploying to FastMCP Cloud..."
          echo "âœ… All validations passed - ready for deployment"
          echo "ðŸ“‹ Deployment configuration:"
          echo "  - Entry point: src.trackhs_mcp.__main__"
          echo "  - Python version: 3.11"
          echo "  - Requirements: requirements.txt"
          echo "ðŸ”§ Environment variables configured:"
          echo "  - TRACKHS_API_URL: ${{ secrets.TRACKHS_API_URL }}"
          echo "  - TRACKHS_USERNAME: ${{ secrets.TRACKHS_USERNAME }}"
          echo "  - TRACKHS_PASSWORD: [HIDDEN]"
          echo ""
          echo "ðŸ’¡ Manual deployment required:"
          echo "  1. Configure secrets in FastMCP Cloud dashboard"
          echo "  2. Deploy using FastMCP CLI or dashboard"
          echo "  3. Verify deployment health check"

      - name: Deployment Summary
        run: |
          echo "## ðŸš€ Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… All Validations Passed" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-commit hooks: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- FastMCP preflight: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Quality checks: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“‹ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure secrets in FastMCP Cloud" >> $GITHUB_STEP_SUMMARY
          echo "2. Deploy using FastMCP CLI or dashboard" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify deployment health check" >> $GITHUB_STEP_SUMMARY
