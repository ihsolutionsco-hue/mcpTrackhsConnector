name: MCP Protocol Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/trackhs_mcp/**'
      - 'tests/mcp_protocol/**'
      - '.github/workflows/mcp-protocol-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/trackhs_mcp/**'
      - 'tests/mcp_protocol/**'
      - '.github/workflows/mcp-protocol-tests.yml'

jobs:
  mcp-protocol-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run MCP Protocol Tests
      run: |
        python scripts/run_mcp_protocol_tests.py all

    - name: Run Tests by Category
      run: |
        python scripts/run_mcp_protocol_tests.py categories

    - name: Run Tests with Coverage
      run: |
        python scripts/run_mcp_protocol_tests.py coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage_mcp_protocol.xml
        flags: mcp-protocol
        name: mcp-protocol-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mcp-protocol-test-results-${{ matrix.python-version }}
        path: |
          test-results-mcp-protocol.xml
          htmlcov_mcp_protocol/
          coverage_mcp_protocol.json
          reports/

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          try {
            // Leer reporte de resumen si existe
            const summaryPath = 'reports/mcp_protocol_tests_summary.md';
            if (fs.existsSync(summaryPath)) {
              const summary = fs.readFileSync(summaryPath, 'utf8');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üß™ Tests de Protocolo MCP\n\n${summary}`
              });
            }
          } catch (error) {
            console.log('No se pudo leer el reporte de resumen:', error.message);
          }

  mcp-protocol-lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        flake8 tests/mcp_protocol/ --max-line-length=100 --ignore=E203,W503
        black --check tests/mcp_protocol/
        mypy tests/mcp_protocol/ --ignore-missing-imports

    - name: Check test structure
      run: |
        python -c "
        import os
        import sys

        # Verificar estructura de tests
        test_dir = 'tests/mcp_protocol'
        required_files = [
            'test_tools_registration.py',
            'test_resources_registration.py',
            'test_prompts_registration.py',
            'test_schema_validation.py',
            'test_complete_integration.py',
            'conftest.py',
            'README.md'
        ]

        missing_files = []
        for file in required_files:
            if not os.path.exists(os.path.join(test_dir, file)):
                missing_files.append(file)

        if missing_files:
            print(f'‚ùå Archivos faltantes: {missing_files}')
            sys.exit(1)
        else:
            print('‚úÖ Estructura de tests correcta')
        "

  mcp-protocol-documentation:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Validate documentation
      run: |
        # Verificar que el README de tests existe y tiene contenido
        if [ ! -f "tests/mcp_protocol/README.md" ]; then
          echo "‚ùå README de tests faltante"
          exit 1
        fi

        # Verificar que el script de ejecuci√≥n existe
        if [ ! -f "scripts/run_mcp_protocol_tests.py" ]; then
          echo "‚ùå Script de ejecuci√≥n faltante"
          exit 1
        fi

        # Verificar que el workflow existe
        if [ ! -f ".github/workflows/mcp-protocol-tests.yml" ]; then
          echo "‚ùå Workflow de CI/CD faltante"
          exit 1
        fi

        echo "‚úÖ Documentaci√≥n y automatizaci√≥n correcta"

    - name: Generate test documentation
      run: |
        python -c "
        import os
        import sys

        # Generar documentaci√≥n de tests
        test_dir = 'tests/mcp_protocol'

        # Contar archivos de test
        test_files = [f for f in os.listdir(test_dir) if f.startswith('test_') and f.endswith('.py')]

        print(f'üìä Tests de Protocolo MCP:')
        print(f'   - Archivos de test: {len(test_files)}')
        print(f'   - Tests implementados: {len(test_files) * 10} (estimado)')
        print(f'   - Cobertura objetivo: 100%')
        print(f'   - Tiempo objetivo: <2 minutos')

        # Verificar que todos los archivos tienen contenido
        for test_file in test_files:
            file_path = os.path.join(test_dir, test_file)
            with open(file_path, 'r') as f:
                content = f.read()
                if len(content) < 100:
                    print(f'‚ö†Ô∏è  {test_file} parece tener poco contenido')
                else:
                    print(f'‚úÖ {test_file} tiene contenido adecuado')
        "
