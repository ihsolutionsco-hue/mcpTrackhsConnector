# .github/workflows/ci.yml
name: CI (MCP MVP)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install black isort flake8 pytest pytest-cov pytest-asyncio

      - name: Format check (black)
        run: black --check src tests

      - name: Imports check (isort)
        run: isort --check-only src tests

      - name: Lint (flake8)
        run: flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Tests + coverage
        run: pytest -q --cov=src --cov-report=xml --cov-report=term-missing

      - name: Save coverage xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: ignore

      # Smoke test: comprueba que el objeto `mcp` existe y es FastMCP
      - name: FastMCP smoke
        run: |
          python - <<'PY'
          import importlib, sys
          try:
              from mcp.server.fastmcp import FastMCP  # SDK
          except Exception:
              from fastmcp import FastMCP  # framework
          mod = importlib.import_module("src.server")
          mcp = getattr(mod, "mcp", None)
          assert mcp is not None, "No se encontrÃ³ 'mcp' en src/server.py"
          assert isinstance(mcp, FastMCP), f"'mcp' no es FastMCP: {type(mcp)}"
          print("FastMCP OK")
          PY
