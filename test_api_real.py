#!/usr/bin/env python3
"""
Script de testing real con la API de TrackHS
Prueba todas las herramientas con datos reales
"""

import asyncio
import json
import sys
from datetime import datetime, timedelta
from pathlib import Path

# Agregar el directorio src al path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from trackhs_mcp.server import mcp


async def test_search_reservations():
    """Probar b√∫squeda de reservas"""
    print("\nüîç PROBANDO SEARCH_RESERVATIONS")
    print("=" * 50)

    # Test 1: B√∫squeda b√°sica
    print("\n1. B√∫squeda b√°sica de reservas...")
    try:
        result = await mcp.call_tool(
            "search_reservations", {"page": 0, "size": 5, "status": "confirmed"}
        )
        print(
            f"‚úÖ B√∫squeda b√°sica exitosa: {result.get('total_items', 0)} reservas encontradas"
        )
        if result.get("_embedded", {}).get("reservations"):
            print(
                f"   Primera reserva: {result['_embedded']['reservations'][0].get('confirmation_number', 'N/A')}"
            )
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda b√°sica: {e}")

    # Test 2: B√∫squeda por fecha
    print("\n2. B√∫squeda por fecha...")
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        result = await mcp.call_tool(
            "search_reservations",
            {"arrival_start": today, "arrival_end": today, "size": 5},
        )
        print(
            f"‚úÖ B√∫squeda por fecha exitosa: {result.get('total_items', 0)} reservas para hoy"
        )
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda por fecha: {e}")

    # Test 3: B√∫squeda con texto
    print("\n3. B√∫squeda con texto...")
    try:
        result = await mcp.call_tool(
            "search_reservations", {"search": "test", "size": 5}
        )
        print(
            f"‚úÖ B√∫squeda con texto exitosa: {result.get('total_items', 0)} reservas encontradas"
        )
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda con texto: {e}")


async def test_get_reservation():
    """Probar obtenci√≥n de reserva espec√≠fica"""
    print("\n\nüìã PROBANDO GET_RESERVATION")
    print("=" * 50)

    # Primero buscar una reserva para obtener su ID
    try:
        search_result = await mcp.call_tool(
            "search_reservations", {"page": 0, "size": 1, "status": "confirmed"}
        )

        if search_result.get("_embedded", {}).get("reservations"):
            reservation_id = search_result["_embedded"]["reservations"][0]["id"]
            print(f"1. Obteniendo detalles de reserva ID: {reservation_id}")

            result = await mcp.call_tool(
                "get_reservation", {"reservation_id": reservation_id}
            )
            print(f"‚úÖ Reserva obtenida: {result.get('confirmation_number', 'N/A')}")
            print(f"   Hu√©sped: {result.get('guest', {}).get('name', 'N/A')}")
            print(f"   Estado: {result.get('status', 'N/A')}")
        else:
            print("‚ùå No hay reservas disponibles para probar")
    except Exception as e:
        print(f"‚ùå Error obteniendo reserva: {e}")


async def test_search_units():
    """Probar b√∫squeda de unidades"""
    print("\n\nüè† PROBANDO SEARCH_UNITS")
    print("=" * 50)

    # Test 1: B√∫squeda b√°sica
    print("\n1. B√∫squeda b√°sica de unidades...")
    try:
        result = await mcp.call_tool(
            "search_units", {"page": 1, "size": 5, "is_active": 1, "is_bookable": 1}
        )
        print(
            f"‚úÖ B√∫squeda b√°sica exitosa: {result.get('total_items', 0)} unidades encontradas"
        )
        if result.get("_embedded", {}).get("units"):
            unit = result["_embedded"]["units"][0]
            print(
                f"   Primera unidad: {unit.get('name', 'N/A')} ({unit.get('code', 'N/A')})"
            )
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda b√°sica: {e}")

    # Test 2: B√∫squeda por capacidad
    print("\n2. B√∫squeda por capacidad...")
    try:
        result = await mcp.call_tool(
            "search_units", {"bedrooms": 2, "bathrooms": 1, "is_active": 1, "size": 5}
        )
        print(
            f"‚úÖ B√∫squeda por capacidad exitosa: {result.get('total_items', 0)} unidades 2BR/1BA"
        )
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda por capacidad: {e}")

    # Test 3: B√∫squeda con texto
    print("\n3. B√∫squeda con texto...")
    try:
        result = await mcp.call_tool("search_units", {"search": "apartment", "size": 5})
        print(
            f"‚úÖ B√∫squeda con texto exitosa: {result.get('total_items', 0)} unidades encontradas"
        )
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda con texto: {e}")


async def test_search_amenities():
    """Probar b√∫squeda de amenidades"""
    print("\n\nüèä PROBANDO SEARCH_AMENITIES")
    print("=" * 50)

    # Test 1: B√∫squeda b√°sica
    print("\n1. B√∫squeda b√°sica de amenidades...")
    try:
        result = await mcp.call_tool("search_amenities", {"page": 1, "size": 10})
        print(
            f"‚úÖ B√∫squeda b√°sica exitosa: {result.get('total_items', 0)} amenidades encontradas"
        )
        if result.get("_embedded", {}).get("amenities"):
            amenity = result["_embedded"]["amenities"][0]
            print(
                f"   Primera amenidad: {amenity.get('name', 'N/A')} ({amenity.get('group', 'N/A')})"
            )
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda b√°sica: {e}")

    # Test 2: B√∫squeda con texto
    print("\n2. B√∫squeda con texto...")
    try:
        result = await mcp.call_tool("search_amenities", {"search": "wifi", "size": 5})
        print(
            f"‚úÖ B√∫squeda con texto exitosa: {result.get('total_items', 0)} amenidades WiFi encontradas"
        )
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda con texto: {e}")


async def test_get_folio():
    """Probar obtenci√≥n de folio"""
    print("\n\nüí∞ PROBANDO GET_FOLIO")
    print("=" * 50)

    # Primero buscar una reserva para obtener su ID
    try:
        search_result = await mcp.call_tool(
            "search_reservations", {"page": 0, "size": 1, "status": "confirmed"}
        )

        if search_result.get("_embedded", {}).get("reservations"):
            reservation_id = search_result["_embedded"]["reservations"][0]["id"]
            print(f"1. Obteniendo folio de reserva ID: {reservation_id}")

            result = await mcp.call_tool(
                "get_folio", {"reservation_id": reservation_id}
            )
            print(f"‚úÖ Folio obtenido: Balance ${result.get('balance', 0)}")
            print(f"   Cargos: {len(result.get('charges', []))}")
            print(f"   Pagos: {len(result.get('payments', []))}")
        else:
            print("‚ùå No hay reservas disponibles para probar folio")
    except Exception as e:
        print(f"‚ùå Error obteniendo folio: {e}")


async def test_create_maintenance_work_order():
    """Probar creaci√≥n de orden de mantenimiento"""
    print("\n\nüîß PROBANDO CREATE_MAINTENANCE_WORK_ORDER")
    print("=" * 50)

    # Primero buscar una unidad para usar
    try:
        units_result = await mcp.call_tool(
            "search_units", {"page": 1, "size": 1, "is_active": 1}
        )

        if units_result.get("_embedded", {}).get("units"):
            unit_id = units_result["_embedded"]["units"][0]["id"]
            print(f"1. Creando orden de mantenimiento para unidad ID: {unit_id}")

            result = await mcp.call_tool(
                "create_maintenance_work_order",
                {
                    "unit_id": unit_id,
                    "summary": "Test de mantenimiento - Fuga en grifo",
                    "description": "Prueba de creaci√≥n de orden de mantenimiento para testing del sistema MCP",
                    "priority": 3,
                    "estimated_cost": 100.0,
                    "estimated_time": 60,
                },
            )
            print(f"‚úÖ Orden de mantenimiento creada: ID {result.get('id', 'N/A')}")
            print(f"   Estado: {result.get('status', 'N/A')}")
            print(f"   Prioridad: {result.get('priority', 'N/A')}")
        else:
            print("‚ùå No hay unidades disponibles para probar mantenimiento")
    except Exception as e:
        print(f"‚ùå Error creando orden de mantenimiento: {e}")


async def test_create_housekeeping_work_order():
    """Probar creaci√≥n de orden de housekeeping"""
    print("\n\nüßπ PROBANDO CREATE_HOUSEKEEPING_WORK_ORDER")
    print("=" * 50)

    # Primero buscar una unidad para usar
    try:
        units_result = await mcp.call_tool(
            "search_units", {"page": 1, "size": 1, "is_active": 1}
        )

        if units_result.get("_embedded", {}).get("units"):
            unit_id = units_result["_embedded"]["units"][0]["id"]
            tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
            print(f"1. Creando orden de housekeeping para unidad ID: {unit_id}")

            result = await mcp.call_tool(
                "create_housekeeping_work_order",
                {
                    "unit_id": unit_id,
                    "scheduled_at": tomorrow,
                    "is_inspection": False,
                    "clean_type_id": 4,  # Departure Clean
                    "comments": "Test de housekeeping - Limpieza post-checkout",
                    "cost": 75.0,
                },
            )
            print(f"‚úÖ Orden de housekeeping creada: ID {result.get('id', 'N/A')}")
            print(f"   Estado: {result.get('status', 'N/A')}")
            print(f"   Fecha programada: {result.get('scheduled_at', 'N/A')}")
        else:
            print("‚ùå No hay unidades disponibles para probar housekeeping")
    except Exception as e:
        print(f"‚ùå Error creando orden de housekeeping: {e}")


async def test_error_handling():
    """Probar manejo de errores"""
    print("\n\nüö´ PROBANDO MANEJO DE ERRORES")
    print("=" * 50)

    # Test 1: ID de reserva inexistente
    print("\n1. Probando ID de reserva inexistente...")
    try:
        result = await mcp.call_tool("get_reservation", {"reservation_id": 999999})
        print("‚ùå Deber√≠a haber fallado con ID inexistente")
    except Exception as e:
        print(f"‚úÖ Correctamente manej√≥ ID inexistente: {e}")

    # Test 2: Par√°metros inv√°lidos
    print("\n2. Probando par√°metros inv√°lidos...")
    try:
        result = await mcp.call_tool(
            "search_reservations", {"page": -1, "size": 10}  # P√°gina inv√°lida
        )
        print("‚ùå Deber√≠a haber fallado con p√°gina inv√°lida")
    except Exception as e:
        print(f"‚úÖ Correctamente manej√≥ par√°metros inv√°lidos: {e}")

    # Test 3: Fecha inv√°lida
    print("\n3. Probando fecha inv√°lida...")
    try:
        result = await mcp.call_tool(
            "search_reservations",
            {"arrival_start": "2024-13-45", "size": 10},  # Fecha inv√°lida
        )
        print("‚ùå Deber√≠a haber fallado con fecha inv√°lida")
    except Exception as e:
        print(f"‚úÖ Correctamente manej√≥ fecha inv√°lida: {e}")


async def main():
    """Funci√≥n principal de testing"""
    print("üöÄ INICIANDO TESTING REAL CON API TRACKHS")
    print("=" * 60)
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

    try:
        # Ejecutar todas las pruebas
        await test_search_reservations()
        await test_get_reservation()
        await test_search_units()
        await test_search_amenities()
        await test_get_folio()
        await test_create_maintenance_work_order()
        await test_create_housekeeping_work_order()
        await test_error_handling()

        print("\n\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS")
        print("=" * 60)
        print("El MCP est√° funcionando correctamente con la API real.")

    except Exception as e:
        print(f"\n\n‚ùå ERROR CR√çTICO EN LAS PRUEBAS: {e}")
        print("=" * 60)
        return 1

    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
