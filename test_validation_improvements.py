#!/usr/bin/env python3
"""
Script para probar las mejoras de validaci√≥n en el MCP de TrackHS
"""

import asyncio
import os
import sys
from datetime import datetime

# Agregar el directorio src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

# Cargar variables de entorno
from dotenv import load_dotenv

load_dotenv()

from trackhs_mcp.domain.exceptions.api_exceptions import ValidationError
from trackhs_mcp.infrastructure.adapters.config import TrackHSConfig
from trackhs_mcp.infrastructure.adapters.trackhs_api_client import TrackHSApiClient

# Importar las funciones MCP directamente
from trackhs_mcp.infrastructure.mcp.search_reservations_v2 import search_reservations_v2


async def test_validation_improvements():
    """Probar las mejoras de validaci√≥n"""

    print("üîç Probando mejoras de validaci√≥n...")

    # Configurar cliente API
    config = TrackHSConfig.from_env()
    api_client = TrackHSApiClient(config)

    # Test 1: Validaci√≥n de "null" como string
    print("\n=== TEST 1: Validaci√≥n de 'null' como string ===")
    try:
        result = await search_reservations_v2(
            api_client=api_client,
            page=1,
            size=3,
            arrival_start="null",  # ‚ùå Esto deber√≠a fallar
            arrival_end="null",  # ‚ùå Esto deber√≠a fallar
        )
        print("‚ùå ERROR: La validaci√≥n no funcion√≥ - deber√≠a haber fallado")
    except ValidationError as e:
        print(f"‚úÖ Validaci√≥n funcion√≥ correctamente: {e}")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    # Test 2: Validaci√≥n de "None" como string
    print("\n=== TEST 2: Validaci√≥n de 'None' como string ===")
    try:
        result = await search_reservations_v2(
            api_client=api_client,
            page=1,
            size=3,
            arrival_start="None",  # ‚ùå Esto deber√≠a fallar
            arrival_end="None",  # ‚ùå Esto deber√≠a fallar
        )
        print("‚ùå ERROR: La validaci√≥n no funcion√≥ - deber√≠a haber fallado")
    except ValidationError as e:
        print(f"‚úÖ Validaci√≥n funcion√≥ correctamente: {e}")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    # Test 3: Validaci√≥n de string vac√≠o
    print("\n=== TEST 3: Validaci√≥n de string vac√≠o ===")
    try:
        result = await search_reservations_v2(
            api_client=api_client,
            page=1,
            size=3,
            arrival_start="",  # ‚ùå Esto deber√≠a fallar
            arrival_end="",  # ‚ùå Esto deber√≠a fallar
        )
        print("‚ùå ERROR: La validaci√≥n no funcion√≥ - deber√≠a haber fallado")
    except ValidationError as e:
        print(f"‚úÖ Validaci√≥n funcion√≥ correctamente: {e}")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    # Test 4: Uso correcto de fechas
    print("\n=== TEST 4: Uso correcto de fechas ===")
    try:
        result = await search_reservations_v2(
            api_client=api_client,
            page=1,
            size=3,
            arrival_start="2024-03-01",  # ‚úÖ Esto deber√≠a funcionar
            arrival_end="2024-03-01",  # ‚úÖ Esto deber√≠a funcionar
        )
        print(
            f"‚úÖ Uso correcto funcion√≥: {result.get('total_items', 'N/A')} reservaciones"
        )
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    # Test 5: Omitir par√°metros (uso correcto)
    print("\n=== TEST 5: Omitir par√°metros (uso correcto) ===")
    try:
        result = await search_reservations_v2(
            api_client=api_client,
            page=1,
            size=3,
            # ‚úÖ No incluir arrival_start ni arrival_end
        )
        print(
            f"‚úÖ Omitir par√°metros funcion√≥: {result.get('total_items', 'N/A')} reservaciones"
        )
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")

    # Cerrar cliente
    await api_client.close()


if __name__ == "__main__":
    asyncio.run(test_validation_improvements())
