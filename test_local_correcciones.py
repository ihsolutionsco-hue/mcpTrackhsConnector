#!/usr/bin/env python3
"""
Script de prueba local para verificar las correcciones del MCP TrackHS
Prueba las herramientas sin conectar al sistema online
"""

import asyncio
import json
import sys
from datetime import datetime
from pathlib import Path

# Agregar el directorio src al path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from trackhs_mcp.server import mcp


def test_parameter_validation():
    """Probar validaci√≥n de par√°metros de entrada"""
    print("üß™ PROBANDO VALIDACI√ìN DE PAR√ÅMETROS")
    print("=" * 50)

    # Test 1: search_reservations con par√°metros v√°lidos
    print("\n1. Probando search_reservations con par√°metros v√°lidos...")
    try:
        # Simular llamada con par√°metros v√°lidos
        result = mcp.call_tool(
            "search_reservations", {"page": 0, "size": 10, "status": "confirmed"}
        )
        print("‚úÖ search_reservations: Par√°metros v√°lidos aceptados")
    except Exception as e:
        print(f"‚ùå search_reservations: Error con par√°metros v√°lidos: {e}")

    # Test 2: search_reservations con fechas v√°lidas
    print("\n2. Probando search_reservations con fechas v√°lidas...")
    try:
        result = mcp.call_tool(
            "search_reservations",
            {"arrival_start": "2024-01-15", "arrival_end": "2024-01-15", "size": 10},
        )
        print("‚úÖ search_reservations: Fechas v√°lidas aceptadas")
    except Exception as e:
        print(f"‚ùå search_reservations: Error con fechas v√°lidas: {e}")

    # Test 3: search_units con par√°metros v√°lidos
    print("\n3. Probando search_units con par√°metros v√°lidos...")
    try:
        result = mcp.call_tool(
            "search_units",
            {"bedrooms": 2, "bathrooms": 1, "is_active": 1, "is_bookable": 1},
        )
        print("‚úÖ search_units: Par√°metros v√°lidos aceptados")
    except Exception as e:
        print(f"‚ùå search_units: Error con par√°metros v√°lidos: {e}")

    # Test 4: create_maintenance_work_order con par√°metros v√°lidos
    print("\n4. Probando create_maintenance_work_order con par√°metros v√°lidos...")
    try:
        result = mcp.call_tool(
            "create_maintenance_work_order",
            {
                "unit_id": 100,
                "summary": "Fuga en grifo",
                "description": "Grifo del ba√±o principal gotea constantemente",
                "priority": 3,
                "estimated_cost": 150.0,
                "estimated_time": 120,
            },
        )
        print("‚úÖ create_maintenance_work_order: Par√°metros v√°lidos aceptados")
    except Exception as e:
        print(f"‚ùå create_maintenance_work_order: Error con par√°metros v√°lidos: {e}")

    # Test 5: create_housekeeping_work_order con par√°metros v√°lidos
    print("\n5. Probando create_housekeeping_work_order con par√°metros v√°lidos...")
    try:
        result = mcp.call_tool(
            "create_housekeeping_work_order",
            {
                "unit_id": 200,
                "scheduled_at": "2024-01-16",
                "is_inspection": False,
                "clean_type_id": 4,
                "comments": "Limpieza post-checkout",
                "cost": 50.0,
            },
        )
        print("‚úÖ create_housekeeping_work_order: Par√°metros v√°lidos aceptados")
    except Exception as e:
        print(f"‚ùå create_housekeeping_work_order: Error con par√°metros v√°lidos: {e}")


def test_invalid_parameters():
    """Probar validaci√≥n con par√°metros inv√°lidos"""
    print("\n\nüö´ PROBANDO VALIDACI√ìN CON PAR√ÅMETROS INV√ÅLIDOS")
    print("=" * 50)

    # Test 1: Fecha inv√°lida
    print("\n1. Probando fecha inv√°lida...")
    try:
        result = mcp.call_tool(
            "search_reservations",
            {"arrival_start": "2024-13-45", "size": 10},  # Fecha inv√°lida
        )
        print("‚ùå search_reservations: Deber√≠a haber fallado con fecha inv√°lida")
    except Exception as e:
        print(f"‚úÖ search_reservations: Correctamente rechaz√≥ fecha inv√°lida: {e}")

    # Test 2: Par√°metro fuera de rango
    print("\n2. Probando par√°metro fuera de rango...")
    try:
        result = mcp.call_tool(
            "search_reservations",
            {"page": 50000, "size": 10},  # Fuera del rango permitido
        )
        print("‚ùå search_reservations: Deber√≠a haber fallado con p√°gina fuera de rango")
    except Exception as e:
        print(
            f"‚úÖ search_reservations: Correctamente rechaz√≥ p√°gina fuera de rango: {e}"
        )

    # Test 3: Tipo de dato incorrecto
    print("\n3. Probando tipo de dato incorrecto...")
    try:
        result = mcp.call_tool(
            "search_units", {"bedrooms": "dos", "size": 10}  # String en lugar de int
        )
        print("‚ùå search_units: Deber√≠a haber fallado con tipo incorrecto")
    except Exception as e:
        print(f"‚úÖ search_units: Correctamente rechaz√≥ tipo incorrecto: {e}")


def test_schema_validation():
    """Probar validaci√≥n de esquemas de salida"""
    print("\n\nüìã PROBANDO VALIDACI√ìN DE ESQUEMAS")
    print("=" * 50)

    # Test 1: Verificar que los esquemas est√°n bien definidos
    print("\n1. Verificando esquemas de salida...")

    from trackhs_mcp.schemas import (
        AMENITIES_OUTPUT_SCHEMA,
        FOLIO_DETAIL_OUTPUT_SCHEMA,
        RESERVATION_SEARCH_OUTPUT_SCHEMA,
        UNIT_SEARCH_OUTPUT_SCHEMA,
        WORK_ORDER_DETAIL_OUTPUT_SCHEMA,
    )

    schemas = {
        "RESERVATION_SEARCH_OUTPUT_SCHEMA": RESERVATION_SEARCH_OUTPUT_SCHEMA,
        "UNIT_SEARCH_OUTPUT_SCHEMA": UNIT_SEARCH_OUTPUT_SCHEMA,
        "AMENITIES_OUTPUT_SCHEMA": AMENITIES_OUTPUT_SCHEMA,
        "FOLIO_DETAIL_OUTPUT_SCHEMA": FOLIO_DETAIL_OUTPUT_SCHEMA,
        "WORK_ORDER_DETAIL_OUTPUT_SCHEMA": WORK_ORDER_DETAIL_OUTPUT_SCHEMA,
    }

    for name, schema in schemas.items():
        try:
            # Verificar que el schema es v√°lido JSON
            json.dumps(schema)
            print(f"‚úÖ {name}: Schema v√°lido")
        except Exception as e:
            print(f"‚ùå {name}: Schema inv√°lido: {e}")


def test_tool_registration():
    """Probar que las herramientas est√°n registradas correctamente"""
    print("\n\nüîß PROBANDO REGISTRO DE HERRAMIENTAS")
    print("=" * 50)

    # Verificar que las herramientas est√°n definidas en el m√≥dulo
    expected_tools = [
        "search_reservations",
        "get_reservation",
        "search_units",
        "search_amenities",
        "get_folio",
        "create_maintenance_work_order",
        "create_housekeeping_work_order",
    ]

    print("Verificando definici√≥n de herramientas en el servidor...")

    for tool in expected_tools:
        if hasattr(mcp, tool):
            print(f"‚úÖ {tool}: Definida en el servidor")
        else:
            print(f"‚ùå {tool}: NO definida en el servidor")

    # Verificar que el servidor MCP est√° configurado correctamente
    print(f"\nServidor MCP configurado:")
    print(f"   Nombre: {mcp.name}")
    print(f"   Instrucciones: {mcp.instructions[:100]}...")
    print(f"   Validaci√≥n estricta: {mcp.strict_input_validation}")

    # Verificar que el servidor tiene herramientas registradas
    if hasattr(mcp, "_tools"):
        print(f"   Herramientas registradas: {len(mcp._tools)}")
    else:
        print("   Herramientas: No se puede verificar (API interna)")


def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ INICIANDO PRUEBAS LOCALES DEL MCP TRACKHS")
    print("=" * 60)
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

    try:
        # Ejecutar todas las pruebas
        test_tool_registration()
        test_schema_validation()
        test_parameter_validation()
        test_invalid_parameters()

        print("\n\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS")
        print("=" * 60)
        print("Las correcciones est√°n listas para ser subidas al sistema online.")

    except Exception as e:
        print(f"\n\n‚ùå ERROR EN LAS PRUEBAS: {e}")
        print("=" * 60)
        return 1

    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
