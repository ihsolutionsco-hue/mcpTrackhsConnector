"""
Tests para el health check endpoint del servidor MCP.
Quick Win #3: Verificaci√≥n de salud del sistema.
"""

from datetime import datetime

import pytest


def test_health_check_resource_exists():
    """Verifica que el recurso health_check existe"""
    from src.trackhs_mcp.server import health_check

    # Verificar que el recurso est√° registrado
    assert health_check is not None
    assert hasattr(health_check, "fn")  # FunctionResource tiene funci√≥n subyacente


def test_health_check_function():
    """Verifica que la funci√≥n health_check funciona correctamente"""
    from src.trackhs_mcp.server import health_check

    # Llamar a la funci√≥n subyacente
    response = health_check.fn()

    # Verificar campos requeridos
    assert "status" in response
    assert "timestamp" in response
    assert "version" in response

    # Verificar que status es v√°lido
    assert response["status"] in ["healthy", "degraded", "unhealthy"]


def test_health_check_with_api():
    """Verifica health check incluye informaci√≥n de API"""
    from src.trackhs_mcp.server import health_check

    response = health_check.fn()

    # Debe tener dependencias o error
    assert "dependencies" in response or "error" in response

    # Si hay dependencias, verificar estructura de TrackHS API
    if "dependencies" in response:
        assert "trackhs_api" in response["dependencies"]
        api_status = response["dependencies"]["trackhs_api"]

        assert "status" in api_status
        assert "base_url" in api_status


def test_health_check_version():
    """Verifica que incluye versi√≥n correcta"""
    from src.trackhs_mcp.server import health_check

    response = health_check.fn()

    assert "version" in response
    assert isinstance(response["version"], str)
    assert response["version"] == "2.0.0"


def test_health_check_timestamp():
    """Verifica timestamp en formato ISO"""
    from src.trackhs_mcp.server import health_check

    response = health_check.fn()

    assert "timestamp" in response

    # Verificar formato ISO
    try:
        dt = datetime.fromisoformat(response["timestamp"])
        # Debe ser una fecha reciente (√∫ltimo minuto)
        from datetime import timedelta

        assert (datetime.now() - dt) < timedelta(minutes=1)
    except ValueError:
        pytest.fail("Timestamp no es ISO v√°lido")


if __name__ == "__main__":
    # Ejecutar tests b√°sicos
    print("üß™ Ejecutando tests de health check...")

    try:
        test_health_check_structure()
        print("‚úÖ Test 1: Estructura correcta")

        test_health_check_version()
        print("‚úÖ Test 2: Versi√≥n incluida")

        test_health_check_timestamp_format()
        print("‚úÖ Test 3: Timestamp v√°lido")

        test_health_check_handles_errors_gracefully()
        print("‚úÖ Test 4: Manejo de errores")

        test_health_check_with_api_available()
        print("‚úÖ Test 5: API disponible")

        print("\nüéâ Todos los tests pasaron!")

    except AssertionError as e:
        print(f"\n‚ùå Test fall√≥: {e}")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
