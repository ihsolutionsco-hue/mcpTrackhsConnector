#!/usr/bin/env python3
"""
Test simple para verificar que los tipos en search_units est√°n corregidos
"""

import sys
from pathlib import Path

# Agregar el directorio src al PYTHONPATH
current_dir = Path(__file__).parent
src_dir = current_dir / "src"
sys.path.insert(0, str(src_dir))


def test_search_units_types():
    """Verificar que los tipos en search_units est√°n corregidos"""

    print("üîß Verificando tipos en search_units...")

    try:
        # Importar el m√≥dulo
        from trackhs_mcp.infrastructure.mcp.search_units import register_search_units

        print("‚úÖ M√≥dulo search_units importado correctamente")

        # Verificar que la funci√≥n register_search_units existe
        if callable(register_search_units):
            print("‚úÖ Funci√≥n register_search_units encontrada")
        else:
            print("‚ùå Funci√≥n register_search_units no encontrada")
            return False

        # Verificar que no hay Union[int, str] en el c√≥digo
        with open(
            "src/trackhs_mcp/infrastructure/mcp/search_units.py", "r", encoding="utf-8"
        ) as f:
            content = f.read()

        if "Union[int, str]" in content:
            print("‚ùå A√∫n hay Union[int, str] en el c√≥digo")
            return False
        else:
            print("‚úÖ No hay Union[int, str] en el c√≥digo")

        # Verificar que hay tipos concretos
        if "page: int = 1" in content:
            print("‚úÖ page es int")
        else:
            print("‚ùå page no es int")
            return False

        if "size: int = 25" in content:
            print("‚úÖ size es int")
        else:
            print("‚ùå size no es int")
            return False

        if "bedrooms: Optional[int]" in content:
            print("‚úÖ bedrooms es Optional[int]")
        else:
            print("‚ùå bedrooms no es Optional[int]")
            return False

        # Verificar que no hay _convert_param
        if "_convert_param" in content:
            print("‚ùå A√∫n hay _convert_param en el c√≥digo")
            return False
        else:
            print("‚úÖ No hay _convert_param en el c√≥digo")

        print("üéâ Todos los tipos est√°n corregidos!")
        return True

    except Exception as e:
        print(f"‚ùå Error durante verificaci√≥n: {e}")
        return False


if __name__ == "__main__":
    result = test_search_units_types()
    if result:
        print("\n‚úÖ SUCCESS: Los tipos est√°n corregidos!")
        sys.exit(0)
    else:
        print("\n‚ùå FAILED: Los tipos no est√°n corregidos")
        sys.exit(1)
