#!/usr/bin/env python3
"""
Test directo para debuggear el problema de validaci√≥n de par√°metros en MCP
"""

import asyncio
import json
from typing import Any, Dict

from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client


async def test_mcp_direct():
    """Test directo de la funci√≥n search_units"""

    # Configuraci√≥n del servidor MCP
    server_params = StdioServerParameters(
        command="python",
        args=["-m", "src.trackhs_mcp"],
        env={
            "TRACKHS_USERNAME": "aba99777416466b6bdc1a25223192ccb",
            "TRACKHS_PASSWORD": "your_password_here",
        },
    )

    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            # Inicializar la sesi√≥n
            await session.initialize()

            # Listar herramientas disponibles
            tools = await session.list_tools()
            print("üîß Herramientas disponibles:")
            for tool in tools.tools:
                print(f"  - {tool.name}: {tool.description}")

            # Test 1: Llamada b√°sica sin par√°metros
            print("\nüß™ Test 1: Llamada b√°sica sin par√°metros")
            try:
                result = await session.call_tool("search_units", arguments={})
                print(f"‚úÖ √âxito: {len(result.content)} resultados")
                if result.content:
                    print(f"   Primer resultado: {result.content[0].text[:200]}...")
            except Exception as e:
                print(f"‚ùå Error: {e}")

            # Test 2: Con par√°metros como enteros
            print("\nüß™ Test 2: Con par√°metros como enteros")
            try:
                result = await session.call_tool(
                    "search_units",
                    arguments={
                        "page": 0,
                        "size": 3,
                        "bedrooms": 2,
                        "bathrooms": 1,
                        "is_active": 1,
                        "is_bookable": 1,
                    },
                )
                print(f"‚úÖ √âxito: {len(result.content)} resultados")
            except Exception as e:
                print(f"‚ùå Error: {e}")

            # Test 3: Con par√°metros como strings
            print("\nüß™ Test 3: Con par√°metros como strings")
            try:
                result = await session.call_tool(
                    "search_units",
                    arguments={
                        "page": "0",
                        "size": "3",
                        "bedrooms": "2",
                        "bathrooms": "1",
                        "is_active": "1",
                        "is_bookable": "1",
                    },
                )
                print(f"‚úÖ √âxito: {len(result.content)} resultados")
            except Exception as e:
                print(f"‚ùå Error: {e}")

            # Test 4: Con b√∫squeda de texto
            print("\nüß™ Test 4: Con b√∫squeda de texto")
            try:
                result = await session.call_tool(
                    "search_units", arguments={"search": "pool", "size": 2}
                )
                print(f"‚úÖ √âxito: {len(result.content)} resultados")
            except Exception as e:
                print(f"‚ùå Error: {e}")


if __name__ == "__main__":
    asyncio.run(test_mcp_direct())
