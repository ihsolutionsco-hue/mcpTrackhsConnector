{
  "timestamp": "2025-10-27T15:15:54.756415",
  "summary": {
    "total_tests": 18,
    "passed": 9,
    "failed": 9,
    "success_rate": 50.0
  },
  "categories": {
    "Unitarios": {
      "passed": 3,
      "total": 4,
      "success_rate": 75.0
    },
    "Integración": {
      "passed": 0,
      "total": 4,
      "success_rate": 0.0
    },
    "MCP": {
      "passed": 2,
      "total": 3,
      "success_rate": 66.66666666666666
    },
    "Herramientas": {
      "passed": 4,
      "total": 5,
      "success_rate": 80.0
    },
    "Cobertura": {
      "passed": 0,
      "total": 1,
      "success_rate": 0.0
    },
    "Rendimiento": {
      "passed": 0,
      "total": 1,
      "success_rate": 0.0
    }
  },
  "details": [
    {
      "category": "Unitarios",
      "test": "Validadores de negocio",
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 27 items\n\ntests/test_business_validators.py::test_validate_date_format_valid PASSED [  3%]\ntests/test_business_validators.py::test_validate_date_format_invalid PASSED [  7%]\ntests/test_business_validators.py::test_validate_date_range_valid PASSED [ 11%]\ntests/test_business_validators.py::test_validate_date_range_invalid PASSED [ 14%]\ntests/test_business_validators.py::test_validate_positive_number_valid PASSED [ 18%]\ntests/test_business_validators.py::test_validate_positive_number_invalid PASSED [ 22%]\ntests/test_business_validators.py::test_validate_positive_number_with_zero PASSED [ 25%]\ntests/test_business_validators.py::test_validate_integer_range_valid PASSED [ 29%]\ntests/test_business_validators.py::test_validate_integer_range_invalid PASSED [ 33%]\ntests/test_business_validators.py::test_validate_string_not_empty_valid PASSED [ 37%]\ntests/test_business_validators.py::test_validate_string_not_empty_invalid PASSED [ 40%]\ntests/test_business_validators.py::test_validate_string_length_valid PASSED [ 44%]\ntests/test_business_validators.py::test_validate_string_length_invalid PASSED [ 48%]\ntests/test_business_validators.py::test_validate_priority_valid PASSED   [ 51%]\ntests/test_business_validators.py::test_validate_priority_invalid PASSED [ 55%]\ntests/test_business_validators.py::test_validate_reservation_dates_valid PASSED [ 59%]\ntests/test_business_validators.py::test_validate_reservation_dates_invalid PASSED [ 62%]\ntests/test_business_validators.py::test_validate_unit_capacity_valid PASSED [ 66%]\ntests/test_business_validators.py::test_validate_unit_capacity_invalid PASSED [ 70%]\ntests/test_business_validators.py::test_validate_cost_valid PASSED       [ 74%]\ntests/test_business_validators.py::test_validate_cost_invalid PASSED     [ 77%]\ntests/test_business_validators.py::test_validate_work_order_summary_valid PASSED [ 81%]\ntests/test_business_validators.py::test_validate_work_order_summary_invalid PASSED [ 85%]\ntests/test_business_validators.py::test_validate_work_order_description_valid PASSED [ 88%]\ntests/test_business_validators.py::test_validate_work_order_description_invalid PASSED [ 92%]\ntests/test_business_validators.py::test_business_validation_error_is_exception PASSED [ 96%]\ntests/test_business_validators.py::test_error_messages_are_descriptive PASSED [100%]\n\n============================= 27 passed in 0.70s ==============================\n",
      "stderr": ""
    },
    {
      "category": "Unitarios",
      "test": "Validación de respuestas",
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 15 items\n\ntests/test_response_validation.py::test_validate_response_exists PASSED  [  6%]\ntests/test_response_validation.py::test_validate_reservation_response_valid PASSED [ 13%]\ntests/test_response_validation.py::test_validate_reservation_response_minimal PASSED [ 20%]\ntests/test_response_validation.py::test_validate_reservation_response_invalid_strict PASSED [ 26%]\ntests/test_response_validation.py::test_validate_reservation_response_invalid_non_strict PASSED [ 33%]\ntests/test_response_validation.py::test_validate_unit_response_valid PASSED [ 40%]\ntests/test_response_validation.py::test_validate_folio_response_valid PASSED [ 46%]\ntests/test_response_validation.py::test_validate_work_order_response_valid PASSED [ 53%]\ntests/test_response_validation.py::test_validate_response_with_extra_fields PASSED [ 60%]\ntests/test_response_validation.py::test_models_have_correct_config PASSED [ 66%]\ntests/test_response_validation.py::test_validate_response_type_coercion PASSED [ 73%]\ntests/test_response_validation.py::test_reservation_response_model_directly PASSED [ 80%]\ntests/test_response_validation.py::test_unit_response_model_directly PASSED [ 86%]\ntests/test_response_validation.py::test_folio_response_model_directly PASSED [ 93%]\ntests/test_response_validation.py::test_work_order_response_model_directly PASSED [100%]\n\n============================== warnings summary ===============================\ntests/test_response_validation.py::test_validate_response_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_response_validation.py::test_validate_response_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_response_validation.py::test_validate_response_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_response_validation.py::test_validate_response_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_response_validation.py::test_validate_response_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_response_validation.py::test_validate_response_exists\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================= 15 passed, 6 warnings in 2.33s ========================\n",
      "stderr": ""
    },
    {
      "category": "Unitarios",
      "test": "Sanitización de datos",
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 14 items\n\ntests/test_sanitization.py::test_sanitize_for_log_exists PASSED          [  7%]\ntests/test_sanitization.py::test_sanitize_simple_dict PASSED             [ 14%]\ntests/test_sanitization.py::test_sanitize_phone_numbers PASSED           [ 21%]\ntests/test_sanitization.py::test_sanitize_nested_dict PASSED             [ 28%]\ntests/test_sanitization.py::test_sanitize_list PASSED                    [ 35%]\ntests/test_sanitization.py::test_sanitize_password_fields PASSED         [ 42%]\ntests/test_sanitization.py::test_sanitize_address_fields PASSED          [ 50%]\ntests/test_sanitization.py::test_sanitize_payment_fields PASSED          [ 57%]\ntests/test_sanitization.py::test_sanitize_email_strings PASSED           [ 64%]\ntests/test_sanitization.py::test_sanitize_none_values PASSED             [ 71%]\ntests/test_sanitization.py::test_sanitize_primitives PASSED              [ 78%]\ntests/test_sanitization.py::test_sanitize_max_depth PASSED               [ 85%]\ntests/test_sanitization.py::test_sanitize_mixed_case_keys PASSED         [ 92%]\ntests/test_sanitization.py::test_sanitize_partial_matches PASSED         [100%]\n\n============================== warnings summary ===============================\ntests/test_sanitization.py::test_sanitize_for_log_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_sanitization.py::test_sanitize_for_log_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_sanitization.py::test_sanitize_for_log_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_sanitization.py::test_sanitize_for_log_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_sanitization.py::test_sanitize_for_log_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_sanitization.py::test_sanitize_for_log_exists\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================= 14 passed, 6 warnings in 1.59s ========================\n",
      "stderr": ""
    },
    {
      "category": "Unitarios",
      "test": "Sistema de reintentos",
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 13 items\n\ntests/test_retries.py::test_retry_with_backoff_exists FAILED             [  7%]\ntests/test_retries.py::test_retry_constants_exist FAILED                 [ 15%]\ntests/test_retries.py::test_retry_success_on_first_attempt FAILED        [ 23%]\ntests/test_retries.py::test_retry_on_request_error FAILED                [ 30%]\ntests/test_retries.py::test_retry_exhaustion FAILED                      [ 38%]\ntests/test_retries.py::test_retry_on_500_error FAILED                    [ 46%]\ntests/test_retries.py::test_retry_on_429_rate_limit FAILED               [ 53%]\ntests/test_retries.py::test_no_retry_on_404 FAILED                       [ 61%]\ntests/test_retries.py::test_no_retry_on_401 FAILED                       [ 69%]\ntests/test_retries.py::test_exponential_backoff FAILED                   [ 76%]\ntests/test_retries.py::test_retry_on_502_bad_gateway FAILED              [ 84%]\ntests/test_retries.py::test_retry_on_503_service_unavailable FAILED      [ 92%]\ntests/test_retries.py::test_retry_trackhs_client_integration FAILED      [100%]\n\n================================== FAILURES ===================================\n_______________________ test_retry_with_backoff_exists ________________________\n\n    def test_retry_with_backoff_exists():\n        \"\"\"Verifica que la función exists\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:15: ImportError\n_________________________ test_retry_constants_exist __________________________\n\n    def test_retry_constants_exist():\n        \"\"\"Verifica que las constantes de retry existen\"\"\"\n>       from src.trackhs_mcp.server import (\n            MAX_RETRIES,\n            RETRY_BACKOFF_FACTOR,\n            RETRY_DELAY_BASE,\n        )\nE       ImportError: cannot import name 'MAX_RETRIES' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:23: ImportError\n_____________________ test_retry_success_on_first_attempt _____________________\n\n    def test_retry_success_on_first_attempt():\n        \"\"\"Test que funciona sin reintentos si el primer intento es exitoso\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:36: ImportError\n_________________________ test_retry_on_request_error _________________________\n\n    def test_retry_on_request_error():\n        \"\"\"Test reintentos en caso de RequestError (error de red)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:53: ImportError\n____________________________ test_retry_exhaustion ____________________________\n\n    def test_retry_exhaustion():\n        \"\"\"Test que falla después de agotar todos los reintentos\"\"\"\n        from src.trackhs_mcp.exceptions import ConnectionError\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:76: ImportError\n___________________________ test_retry_on_500_error ___________________________\n\n    def test_retry_on_500_error():\n        \"\"\"Test reintentos en errores 500 (server error)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:95: ImportError\n________________________ test_retry_on_429_rate_limit _________________________\n\n    def test_retry_on_429_rate_limit():\n        \"\"\"Test reintentos en 429 (rate limit)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:120: ImportError\n____________________________ test_no_retry_on_404 _____________________________\n\n    def test_no_retry_on_404():\n        \"\"\"Test que NO reintenta en errores 404 (not found)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:144: ImportError\n____________________________ test_no_retry_on_401 _____________________________\n\n    def test_no_retry_on_401():\n        \"\"\"Test que NO reintenta en errores 401 (authentication)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:164: ImportError\n__________________________ test_exponential_backoff ___________________________\n\n    def test_exponential_backoff():\n        \"\"\"Test que el backoff es exponencial\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:186: ImportError\n________________________ test_retry_on_502_bad_gateway ________________________\n\n    def test_retry_on_502_bad_gateway():\n        \"\"\"Test reintentos en 502 (bad gateway)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:215: ImportError\n____________________ test_retry_on_503_service_unavailable ____________________\n\n    def test_retry_on_503_service_unavailable():\n        \"\"\"Test reintentos en 503 (service unavailable)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:239: ImportError\n____________________ test_retry_trackhs_client_integration ____________________\n\n    def test_retry_trackhs_client_integration():\n        \"\"\"Test que TrackHSClient usa retry_with_backoff correctamente\"\"\"\n        from src.trackhs_mcp.server import TrackHSClient\n    \n        # Verificar que los métodos get y post existen\n        client = TrackHSClient(\"https://test.trackhs.com/api\", \"testuser\", \"testpass\")\n    \n        assert hasattr(client, \"get\")\n        assert hasattr(client, \"post\")\n        assert callable(client.get)\n        assert callable(client.post)\n    \n        # Verificar que la documentación menciona retries\n>       assert \"retries\" in client.get.__doc__.lower()\nE       AssertionError: assert 'retries' in '\\nget request to trackhs api with error handling.\\n\\nreintentos automáticos manejados por fastmcp retrymiddleware.\\n'\nE        +  where '\\nget request to trackhs api with error handling.\\n\\nreintentos automáticos manejados por fastmcp retrymiddleware.\\n' = <built-in method lower of str object at 0x000002760A5D1840>()\nE        +    where <built-in method lower of str object at 0x000002760A5D1840> = '\\nGET request to TrackHS API with error handling.\\n\\nReintentos automáticos manejados por FastMCP RetryMiddleware.\\n'.lower\nE        +      where '\\nGET request to TrackHS API with error handling.\\n\\nReintentos automáticos manejados por FastMCP RetryMiddleware.\\n' = get.__doc__\nE        +        where get = <src.trackhs_mcp.server.TrackHSClient object at 0x000002760A6F1090>.get\n\ntests\\test_retries.py:274: AssertionError\n============================== warnings summary ===============================\ntests/test_retries.py::test_retry_with_backoff_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_retries.py::test_retry_with_backoff_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_retries.py::test_retry_with_backoff_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_retries.py::test_retry_with_backoff_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_retries.py::test_retry_with_backoff_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_retries.py::test_retry_with_backoff_exists\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nFAILED tests/test_retries.py::test_retry_with_backoff_exists - ImportError: c...\nFAILED tests/test_retries.py::test_retry_constants_exist - ImportError: canno...\nFAILED tests/test_retries.py::test_retry_success_on_first_attempt - ImportErr...\nFAILED tests/test_retries.py::test_retry_on_request_error - ImportError: cann...\nFAILED tests/test_retries.py::test_retry_exhaustion - ImportError: cannot imp...\nFAILED tests/test_retries.py::test_retry_on_500_error - ImportError: cannot i...\nFAILED tests/test_retries.py::test_retry_on_429_rate_limit - ImportError: can...\nFAILED tests/test_retries.py::test_no_retry_on_404 - ImportError: cannot impo...\nFAILED tests/test_retries.py::test_no_retry_on_401 - ImportError: cannot impo...\nFAILED tests/test_retries.py::test_exponential_backoff - ImportError: cannot ...\nFAILED tests/test_retries.py::test_retry_on_502_bad_gateway - ImportError: ca...\nFAILED tests/test_retries.py::test_retry_on_503_service_unavailable - ImportE...\nFAILED tests/test_retries.py::test_retry_trackhs_client_integration - Asserti...\n======================= 13 failed, 6 warnings in 4.16s ========================\n",
      "stderr": ""
    },
    {
      "category": "Integración",
      "test": "Repositories",
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 23 items\n\ntests/test_repositories_integration.py::TestReservationRepository::test_get_by_id_success PASSED [  4%]\ntests/test_repositories_integration.py::TestReservationRepository::test_get_by_id_not_found PASSED [  8%]\ntests/test_repositories_integration.py::TestReservationRepository::test_search_reservations PASSED [ 13%]\ntests/test_repositories_integration.py::TestReservationRepository::test_get_folio PASSED [ 17%]\ntests/test_repositories_integration.py::TestReservationRepository::test_search_by_date_range PASSED [ 21%]\ntests/test_repositories_integration.py::TestReservationRepository::test_cache_functionality FAILED [ 26%]\ntests/test_repositories_integration.py::TestReservationRepository::test_health_check_healthy PASSED [ 30%]\ntests/test_repositories_integration.py::TestReservationRepository::test_health_check_unhealthy PASSED [ 34%]\ntests/test_repositories_integration.py::TestUnitRepository::test_get_by_id_success PASSED [ 39%]\ntests/test_repositories_integration.py::TestUnitRepository::test_search_units PASSED [ 43%]\ntests/test_repositories_integration.py::TestUnitRepository::test_search_amenities PASSED [ 47%]\ntests/test_repositories_integration.py::TestUnitRepository::test_search_by_capacity PASSED [ 52%]\ntests/test_repositories_integration.py::TestUnitRepository::test_get_unit_summary FAILED [ 56%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_create_maintenance_work_order_success FAILED [ 60%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_create_maintenance_work_order_validation_error PASSED [ 65%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_create_housekeeping_work_order_success PASSED [ 69%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_create_housekeeping_work_order_validation_error PASSED [ 73%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_get_by_id_maintenance PASSED [ 78%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_get_by_id_housekeeping_fallback PASSED [ 82%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_search_work_orders PASSED [ 86%]\ntests/test_repositories_integration.py::TestRepositoryIntegration::test_full_workflow PASSED [ 91%]\ntests/test_repositories_integration.py::TestRepositoryIntegration::test_cache_invalidation_across_repositories PASSED [ 95%]\ntests/test_repositories_integration.py::TestRepositoryIntegration::test_error_handling_consistency PASSED [100%]\n\n================================== FAILURES ===================================\n_____________ TestReservationRepository.test_cache_functionality ______________\n\nself = <tests.test_repositories_integration.TestReservationRepository object at 0x00000284E44C8490>\nreservation_repo = <src.trackhs_mcp.repositories.reservation_repository.ReservationRepository object at 0x00000284E44E1910>\nmock_api_client = <Mock id='2769788725840'>\n\n    def test_cache_functionality(self, reservation_repo, mock_api_client):\n        \"\"\"Test funcionalidad de cache\"\"\"\n        # Arrange\n        reservation_id = 12345\n        expected_response = {\"id\": reservation_id, \"status\": \"confirmed\"}\n        mock_api_client.get.return_value = expected_response\n    \n        # Act - Primera llamada\n        result1 = reservation_repo.get_by_id(reservation_id)\n    \n        # Act - Segunda llamada (debería usar cache)\n        result2 = reservation_repo.get_by_id(reservation_id)\n    \n        # Assert\n        assert result1 == result2\n        # Solo debería llamar a la API una vez debido al cache\n>       mock_api_client.get.assert_called_once()\n\ntests\\test_repositories_integration.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Mock name='mock.get' id='2769788726176'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'get' to have been called once. Called 0 times.\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:958: AssertionError\n__________________ TestUnitRepository.test_get_unit_summary ___________________\n\nself = <tests.test_repositories_integration.TestUnitRepository object at 0x00000284E44CE570>\nunit_repo = <src.trackhs_mcp.repositories.unit_repository.UnitRepository object at 0x00000284E4445CD0>\nmock_api_client = <Mock id='2769788728528'>\n\n    def test_get_unit_summary(self, unit_repo, mock_api_client):\n        \"\"\"Test obtener resumen de unidad\"\"\"\n        # Arrange\n        unit_id = 100\n        unit_data = {\n            \"id\": unit_id,\n            \"name\": \"Casa de Playa\",\n            \"code\": \"CP001\",\n            \"bedrooms\": 3,\n            \"bathrooms\": 2,\n            \"max_occupancy\": 6,\n            \"area\": 120.5,\n            \"address\": \"123 Beach St\",\n            \"amenities\": [\"WiFi\", \"Pool\"],\n            \"is_active\": True,\n            \"is_bookable\": True\n        }\n        mock_api_client.get.return_value = unit_data\n    \n        # Act\n        summary = unit_repo.get_unit_summary(unit_id)\n    \n        # Assert\n        expected_summary = {\n            \"id\": unit_id,\n            \"name\": \"Casa de Playa\",\n            \"code\": \"CP001\",\n            \"bedrooms\": 3,\n            \"bathrooms\": 2,\n            \"max_occupancy\": 6,\n            \"area\": 120.5,\n            \"address\": \"123 Beach St\",\n            \"is_active\": True,\n            \"is_bookable\": True,\n            \"amenities_count\": 2\n        }\n>       assert summary == expected_summary\nE       AssertionError: assert {'address': N...ooms': 2, ...} == {'address': '...ooms': 2, ...}\nE         \nE         Omitting 5 identical items, use -vv to show\nE         Differing items:\nE         {'is_bookable': None} != {'is_bookable': True}\nE         {'address': None} != {'address': '123 Beach St'}\nE         {'amenities_count': 0} != {'amenities_count': 2}\nE         {'area': None} != {'area': 120.5}...\nE         \nE         ...Full output truncated (31 lines hidden), use '-vv' to show\n\ntests\\test_repositories_integration.py:318: AssertionError\n_____ TestWorkOrderRepository.test_create_maintenance_work_order_success ______\n\nself = <tests.test_repositories_integration.TestWorkOrderRepository object at 0x00000284E442AE90>\nwork_order_repo = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x00000284E445F380>\nmock_api_client = <Mock id='2769788727856'>\n\n    def test_create_maintenance_work_order_success(self, work_order_repo, mock_api_client):\n        \"\"\"Test crear orden de mantenimiento exitosa\"\"\"\n        # Arrange\n        work_order_data = {\n            \"unitId\": 123,\n            \"summary\": \"Fuga en grifo\",\n            \"description\": \"Grifo del baño principal gotea\",\n            \"priority\": 3,\n            \"status\": \"pending\",\n            \"dateReceived\": \"2024-01-15\"\n        }\n        expected_response = {\n            \"id\": 456,\n            \"status\": \"pending\",\n            \"unitId\": 123,\n            \"summary\": \"Fuga en grifo\"\n        }\n        mock_api_client.post.return_value = expected_response\n    \n        # Act\n        result = work_order_repo.create_maintenance_work_order(\n            unit_id=123,\n            summary=\"Fuga en grifo\",\n            description=\"Grifo del baño principal gotea\",\n            priority=3\n        )\n    \n        # Assert\n        assert result == expected_response\n>       mock_api_client.post.assert_called_once_with(\"pms/maintenance/work-orders\", work_order_data)\n\ntests\\test_repositories_integration.py:364: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:991: in assert_called_once_with\n    return self.assert_called_with(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Mock name='mock.post' id='2769788727184'>\nargs = ('pms/maintenance/work-orders', {'dateReceived': '2024-01-15', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', ...})\nkwargs = {}\nexpected = call('pms/maintenance/work-orders', {'unitId': 123, 'summary': 'Fuga en grifo', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', 'dateReceived': '2024-01-15'})\nactual = call('pms/maintenance/work-orders', {'unitId': 123, 'summary': 'Fuga en grifo', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', 'dateReceived': '2025-10-27'})\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x00000284E45A25C0>\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: post('pms/maintenance/work-orders', {'unitId': 123, 'summary': 'Fuga en grifo', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', 'dateReceived': '2024-01-15'})\nE             Actual: post('pms/maintenance/work-orders', {'unitId': 123, 'summary': 'Fuga en grifo', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', 'dateReceived': '2025-10-27'})\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:979: AssertionError\n=========================== short test summary info ===========================\nFAILED tests/test_repositories_integration.py::TestReservationRepository::test_cache_functionality\nFAILED tests/test_repositories_integration.py::TestUnitRepository::test_get_unit_summary\nFAILED tests/test_repositories_integration.py::TestWorkOrderRepository::test_create_maintenance_work_order_success\n======================== 3 failed, 20 passed in 2.75s =========================\n",
      "stderr": ""
    },
    {
      "category": "Integración",
      "test": "Cache y métricas",
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 26 items\n\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_basic_set_get PASSED [  3%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_get_nonexistent_key PASSED [  7%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_ttl_expiration PASSED [ 11%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_lru_eviction PASSED [ 15%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_invalidate_pattern PASSED [ 19%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_metrics PASSED [ 23%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_clear_cache PASSED [ 26%]\ntests/test_cache_and_metrics.py::TestCacheDecorator::test_cached_decorator PASSED [ 30%]\ntests/test_cache_and_metrics.py::TestCacheDecorator::test_cached_with_different_args FAILED [ 34%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_increment_counter PASSED [ 38%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_set_gauge PASSED [ 42%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_observe_histogram PASSED [ 46%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_record_request PASSED [ 50%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_record_trackhs_api_call PASSED [ 53%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_record_cache_operation PASSED [ 57%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_record_mcp_tool_call PASSED [ 61%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_update_cache_metrics PASSED [ 65%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_get_metrics_summary PASSED [ 69%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_export_prometheus_format FAILED [ 73%]\ntests/test_cache_and_metrics.py::TestMetricsIntegration::test_global_metrics_instance PASSED [ 76%]\ntests/test_cache_and_metrics.py::TestMetricsIntegration::test_record_functions PASSED [ 80%]\ntests/test_cache_and_metrics.py::TestCacheKeyGeneration::test_cache_key_with_args PASSED [ 84%]\ntests/test_cache_and_metrics.py::TestCacheKeyGeneration::test_cache_key_with_kwargs FAILED [ 88%]\ntests/test_cache_and_metrics.py::TestCacheKeyGeneration::test_cache_key_with_mixed_args PASSED [ 92%]\ntests/test_cache_and_metrics.py::TestCacheAndMetricsIntegration::test_cache_metrics_integration PASSED [ 96%]\ntests/test_cache_and_metrics.py::TestCacheAndMetricsIntegration::test_performance_metrics FAILED [100%]\n\n================================== FAILURES ===================================\n_____________ TestCacheDecorator.test_cached_with_different_args ______________\n\nself = <tests.test_cache_and_metrics.TestCacheDecorator object at 0x000001E18B02AD50>\n\n    def test_cached_with_different_args(self):\n        \"\"\"Test decorator con argumentos diferentes\"\"\"\n        call_count = 0\n    \n        @cached(ttl=60)\n        def expensive_function(x, y=10):\n            nonlocal call_count\n            call_count += 1\n            return x + y\n    \n        # Act - Llamadas con argumentos diferentes\n        result1 = expensive_function(5, y=15)\n        result2 = expensive_function(5, y=20)  # Argumentos diferentes\n    \n        # Assert\n        assert result1 == 20\n        assert result2 == 25\n>       assert call_count == 2  # Se ejecutó dos veces\n        ^^^^^^^^^^^^^^^^^^^^^^\nE       assert 1 == 2\n\ntests\\test_cache_and_metrics.py:184: AssertionError\n_____________ TestPrometheusMetrics.test_export_prometheus_format _____________\n\nself = <tests.test_cache_and_metrics.TestPrometheusMetrics object at 0x000001E18AF9BC50>\nmetrics = <src.trackhs_mcp.metrics.PrometheusMetrics object at 0x000001E18B0E8350>\n\n    def test_export_prometheus_format(self, metrics):\n        \"\"\"Test exportar formato Prometheus\"\"\"\n        # Arrange\n        metrics.increment_counter(\"test_counter\", {\"label\": \"value\"})\n        metrics.set_gauge(\"test_gauge\", 42.5)\n        metrics.observe_histogram(\"test_histogram\", 1.5)\n    \n        # Act\n        prometheus_output = metrics.export_prometheus_format()\n    \n        # Assert\n        assert \"# HELP test_counter\" in prometheus_output\n        assert \"# TYPE test_counter counter\" in prometheus_output\n        assert 'test_counter{label=\"value\"} 1' in prometheus_output\n        assert \"# HELP test_gauge\" in prometheus_output\n        assert \"# TYPE test_gauge gauge\" in prometheus_output\n>       assert 'test_gauge{label=\"value\"} 42.5' in prometheus_output\nE       assert 'test_gauge{label=\"value\"} 42.5' in '# HELP TrackHS MCP Server Metrics\\n# TYPE TrackHS MCP Server Metrics\\n\\n# HELP requests_total Total number of requests\\n# TYPE requests_total counter\\nrequests_total 0\\n\\n# HELP requests_by_method Requests by HTTP method\\n# TYPE requests_by_method counter\\nrequests_by_method 0\\n\\n# HELP errors_total Total number of errors\\n# TYPE errors_total counter\\nerrors_total 0\\n\\n# HELP active_requests Number of active requests\\n# TYPE active_requests gauge\\nactive_requests 0\\n\\n# HELP request_duration_seconds Request duration in seconds\\n# TYPE request_duration_seconds histogram\\n\\n# HELP trackhs_api_requests_total Total TrackHS API requests\\n# TYPE trackhs_api_requests_total counter\\ntrackhs_api_requests_total 0\\n\\n# HELP trackhs_api_errors_total Total TrackHS API errors\\n# TYPE trackhs_api_errors_total counter\\ntrackhs_api_errors_total 0\\n\\n# HELP trackhs_api_duration_seconds TrackHS API request duration\\n# TYPE trackhs_api_duration_seconds histogram\\n\\n# HELP cache_hits_total Total cache hits\\n# TYPE cache_hits_total counter\\ncache_hits_total 0\\n\\n# HELP cache_misses_total Total cache misses\\n# TYPE cache_misses_total counter\\ncache_misses_total 0\\n\\n# HELP cache_size Current cache size\\n# TYPE cache_size gauge\\ncache_size 0\\n\\n# HELP mcp_tools_called_total Total MCP tool calls\\n# TYPE mcp_tools_called_total counter\\nmcp_tools_called_total 0\\n\\n# HELP mcp_tool_duration_seconds MCP tool execution duration\\n# TYPE mcp_tool_duration_seconds histogram\\n\\n# HELP test_counter Counter metric: test_counter\\n# TYPE test_counter counter\\ntest_counter{label=\"value\"} 1.0\\n\\n# HELP test_gauge Gauge metric: test_gauge\\n# TYPE test_gauge gauge\\ntest_gauge 42.5\\n\\n# HELP test_histogram Histogram metric: test_histogram\\n# TYPE test_histogram histogram\\ntest_histogram_bucket{le=\"0.1\"} 0\\ntest_histogram_bucket{le=\"0.5\"} 0\\ntest_histogram_bucket{le=\"1.0\"} 0\\ntest_histogram_bucket{le=\"2.5\"} 1\\ntest_histogram_bucket{le=\"5.0\"} 1\\ntest_histogram_bucket{le=\"10.0\"} 1\\ntest_histogram_sum 1.5\\ntest_histogram_count 1\\n'\n\ntests\\test_cache_and_metrics.py:309: AssertionError\n______________ TestCacheKeyGeneration.test_cache_key_with_kwargs ______________\n\nself = <tests.test_cache_and_metrics.TestCacheKeyGeneration object at 0x000001E18B02B4D0>\n\n    def test_cache_key_with_kwargs(self):\n        \"\"\"Test generar clave con argumentos con nombre\"\"\"\n        # Act\n        key = cache_key(\"test\", page=1, size=10, status=\"active\")\n    \n        # Assert\n        assert \"test\" in key\n        assert \"page:1\" in key\n        assert \"size:10\" in key\n>       assert 'status:\"active\"' in key\nE       assert 'status:\"active\"' in 'test:page:1:size:10:status:active'\n\ntests\\test_cache_and_metrics.py:360: AssertionError\n___________ TestCacheAndMetricsIntegration.test_performance_metrics ___________\n\nself = <tests.test_cache_and_metrics.TestCacheAndMetricsIntegration object at 0x000001E18B02B750>\n\n    def test_performance_metrics(self):\n        \"\"\"Test métricas de rendimiento\"\"\"\n        # Arrange\n        cache = IntelligentCache(max_size=100, default_ttl=60)\n        metrics = get_metrics()\n    \n        # Act - Simular operaciones de alto volumen\n        start_time = time.time()\n    \n        for i in range(100):\n            cache.set(f\"key_{i}\", f\"value_{i}\")\n            cache.get(f\"key_{i}\")\n    \n        duration = time.time() - start_time\n    \n        # Act - Registrar métricas de rendimiento\n        metrics.record_request(\"GET\", duration, 200)\n    \n        # Assert\n>       assert metrics.metrics[\"requests_total\"][\"value\"] == 1\nE       assert 2.0 == 1\n\ntests\\test_cache_and_metrics.py:419: AssertionError\n=========================== short test summary info ===========================\nFAILED tests/test_cache_and_metrics.py::TestCacheDecorator::test_cached_with_different_args\nFAILED tests/test_cache_and_metrics.py::TestPrometheusMetrics::test_export_prometheus_format\nFAILED tests/test_cache_and_metrics.py::TestCacheKeyGeneration::test_cache_key_with_kwargs\nFAILED tests/test_cache_and_metrics.py::TestCacheAndMetricsIntegration::test_performance_metrics\n======================== 4 failed, 22 passed in 2.97s =========================\n",
      "stderr": ""
    },
    {
      "category": "Integración",
      "test": "Middleware",
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 22 items\n\ntests/test_middleware.py::TestTrackHSLoggingMiddleware::test_successful_request PASSED [  4%]\ntests/test_middleware.py::TestTrackHSLoggingMiddleware::test_failed_request PASSED [  9%]\ntests/test_middleware.py::TestTrackHSLoggingMiddleware::test_request_counting PASSED [ 13%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_success PASSED [ 18%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_failure PASSED [ 22%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_no_client FAILED [ 27%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_testing_mode FAILED [ 31%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_no_auth_methods PASSED [ 36%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_auth_required_methods PASSED [ 40%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_auth_failure_blocks_request PASSED [ 45%]\ntests/test_middleware.py::TestTrackHSMetricsMiddleware::test_successful_request_metrics PASSED [ 50%]\ntests/test_middleware.py::TestTrackHSMetricsMiddleware::test_failed_request_metrics PASSED [ 54%]\ntests/test_middleware.py::TestTrackHSMetricsMiddleware::test_get_metrics FAILED [ 59%]\ntests/test_middleware.py::TestTrackHSMetricsMiddleware::test_reset_metrics PASSED [ 63%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_is_rate_limited_false PASSED [ 68%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_is_rate_limited_true PASSED [ 72%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_rate_limit_allows_request PASSED [ 77%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_rate_limit_blocks_request PASSED [ 81%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_rate_limit_cleanup FAILED [ 86%]\ntests/test_middleware.py::TestMiddlewareIntegration::test_middleware_chain_execution PASSED [ 90%]\ntests/test_middleware.py::TestMiddlewareIntegration::test_middleware_error_propagation PASSED [ 95%]\ntests/test_middleware.py::TestMiddlewareIntegration::test_middleware_metrics_aggregation FAILED [100%]\n\n================================== FAILURES ===================================\n________ TestTrackHSAuthMiddleware.test_check_authentication_no_client ________\n\nself = <tests.test_middleware.TestTrackHSAuthMiddleware object at 0x0000020F5E815350>\n\n    def test_check_authentication_no_client(self):\n        \"\"\"Test verificación sin cliente API\"\"\"\n        # Arrange\n        middleware = TrackHSAuthMiddleware(None)\n    \n        # Act & Assert\n        with pytest.raises(AuthenticationError):\n>           middleware._check_authentication()\n\ntests\\test_middleware.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.middleware_native.TrackHSAuthMiddleware object at 0x0000020F5E7FFED0>\n\n    def _check_authentication(self) -> bool:\n        \"\"\"Verificar autenticación con cache\"\"\"\n        if self.api_client is None:\n            # En modo testing, permitir sin autenticación\n>           if os.getenv(\"TESTING\") == \"1\" or os.getenv(\"PYTEST_CURRENT_TEST\"):\n               ^^\nE           NameError: name 'os' is not defined. Did you forget to import 'os'?\n\nsrc\\trackhs_mcp\\middleware_native.py:111: NameError\n______ TestTrackHSAuthMiddleware.test_check_authentication_testing_mode _______\n\nself = <tests.test_middleware.TestTrackHSAuthMiddleware object at 0x0000020F5E815480>\n\n    @patch.dict('os.environ', {'TESTING': '1'})\n    def test_check_authentication_testing_mode(self):\n        \"\"\"Test verificación en modo testing\"\"\"\n        # Arrange\n        middleware = TrackHSAuthMiddleware(None)\n    \n        # Act\n>       result = middleware._check_authentication()\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_middleware.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.middleware_native.TrackHSAuthMiddleware object at 0x0000020F5E816190>\n\n    def _check_authentication(self) -> bool:\n        \"\"\"Verificar autenticación con cache\"\"\"\n        if self.api_client is None:\n            # En modo testing, permitir sin autenticación\n>           if os.getenv(\"TESTING\") == \"1\" or os.getenv(\"PYTEST_CURRENT_TEST\"):\n               ^^\nE           NameError: name 'os' is not defined. Did you forget to import 'os'?\n\nsrc\\trackhs_mcp\\middleware_native.py:111: NameError\n________________ TestTrackHSMetricsMiddleware.test_get_metrics ________________\n\nself = <tests.test_middleware.TestTrackHSMetricsMiddleware object at 0x0000020F5E814FC0>\nmiddleware = <src.trackhs_mcp.middleware_native.TrackHSMetricsMiddleware object at 0x0000020F5EA64CD0>\n\n    def test_get_metrics(self, middleware):\n        \"\"\"Test obtener métricas\"\"\"\n        # Arrange\n        middleware.metrics[\"total_requests\"] = 10\n        middleware.metrics[\"successful_requests\"] = 8\n        middleware.metrics[\"failed_requests\"] = 2\n        middleware.response_times = [1.0, 2.0, 3.0, 4.0, 5.0]\n    \n        # Act\n        metrics = middleware.get_metrics()\n    \n        # Assert\n        assert metrics[\"total_requests\"] == 10\n        assert metrics[\"successful_requests\"] == 8\n        assert metrics[\"failed_requests\"] == 2\n>       assert metrics[\"average_response_time_seconds\"] == 3.0\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       KeyError: 'average_response_time_seconds'\n\ntests\\test_middleware.py:256: KeyError\n___________ TestTrackHSRateLimitMiddleware.test_rate_limit_cleanup ____________\n\nself = <tests.test_middleware.TestTrackHSRateLimitMiddleware object at 0x0000020F5E898A70>\nmiddleware = <src.trackhs_mcp.middleware_native.TrackHSRateLimitMiddleware object at 0x0000020F5E816D70>\n\n    def test_rate_limit_cleanup(self, middleware):\n        \"\"\"Test limpieza de requests antiguos\"\"\"\n        # Arrange - Simular requests antiguos y recientes\n        current_time = time.time()\n        middleware.request_counts[\"client1\"] = [\n            current_time - 70,  # 70 segundos atrás (debería limpiarse)\n            current_time - 30,  # 30 segundos atrás (debería mantenerse)\n            current_time - 10,  # 10 segundos atrás (debería mantenerse)\n        ]\n    \n        # Act\n        result = middleware._is_rate_limited(\"client1\")\n    \n        # Assert\n>       assert result is False  # No debería estar rate limited\n        ^^^^^^^^^^^^^^^^^^^^^^\nE       assert True is False\n\ntests\\test_middleware.py:362: AssertionError\n________ TestMiddlewareIntegration.test_middleware_metrics_aggregation ________\n\nself = <tests.test_middleware.TestMiddlewareIntegration object at 0x0000020F5E815810>\nmiddleware_chain = [<src.trackhs_mcp.middleware_native.TrackHSLoggingMiddleware object at 0x0000020F5E8B9EB0>, <src.trackhs_mcp.middlewar...ct at 0x0000020F5EA18050>, <src.trackhs_mcp.middleware_native.TrackHSRateLimitMiddleware object at 0x0000020F5EA18160>]\n\n    def test_middleware_metrics_aggregation(self, middleware_chain):\n        \"\"\"Test agregación de métricas de middleware\"\"\"\n        # Arrange\n        metrics_middleware = middleware_chain[2]  # TrackHSMetricsMiddleware\n    \n        # Act - Simular múltiples requests\n        for i in range(5):\n            metrics_middleware.metrics[\"total_requests\"] += 1\n            metrics_middleware.metrics[\"successful_requests\"] += 1\n            metrics_middleware.response_times.append(1.0 + i * 0.1)\n    \n        # Act\n        metrics = metrics_middleware.get_metrics()\n    \n        # Assert\n        assert metrics[\"total_requests\"] == 5\n        assert metrics[\"successful_requests\"] == 5\n>       assert metrics[\"average_response_time_seconds\"] == 1.2\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       KeyError: 'average_response_time_seconds'\n\ntests\\test_middleware.py:447: KeyError\n============================== warnings summary ===============================\nsrc\\trackhs_mcp\\config.py:83\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\nsrc\\trackhs_mcp\\config.py:91\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\nsrc\\trackhs_mcp\\config.py:100\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\nsrc\\trackhs_mcp\\config.py:107\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\nsrc\\trackhs_mcp\\config.py:13\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nFAILED tests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_no_client\nFAILED tests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_testing_mode\nFAILED tests/test_middleware.py::TestTrackHSMetricsMiddleware::test_get_metrics\nFAILED tests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_rate_limit_cleanup\nFAILED tests/test_middleware.py::TestMiddlewareIntegration::test_middleware_metrics_aggregation\n================== 5 failed, 17 passed, 6 warnings in 1.96s ===================\n",
      "stderr": ""
    },
    {
      "category": "Integración",
      "test": "Integración general",
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 7 items\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration FAILED [ 14%]\ntests/test_integration.py::TestTrackHSIntegration::test_get_reservation_integration FAILED [ 28%]\ntests/test_integration.py::TestTrackHSIntegration::test_search_units_integration FAILED [ 42%]\ntests/test_integration.py::TestTrackHSIntegration::test_create_maintenance_work_order_integration FAILED [ 57%]\ntests/test_integration.py::TestTrackHSIntegration::test_error_handling_integration PASSED [ 71%]\ntests/test_integration.py::TestTrackHSIntegration::test_middleware_integration FAILED [ 85%]\ntests/test_integration.py::TestTrackHSIntegration::test_health_check_integration FAILED [100%]\n\n================================== FAILURES ===================================\n_________ TestTrackHSIntegration.test_search_reservations_integration _________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002F01D95DE50>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x000002F01D9D0310>\n\n    @pytest.mark.asyncio\n    async def test_search_reservations_integration(self, mcp_client):\n        \"\"\"Test de integración para búsqueda de reservas\"\"\"\n        # Mock de respuesta de API\n        mock_response = {\n            \"page\": 0,\n            \"page_count\": 1,\n            \"page_size\": 10,\n            \"total_items\": 2,\n            \"_embedded\": {\n                \"reservations\": [\n                    {\n                        \"id\": 12345,\n                        \"confirmation_number\": \"CONF123\",\n                        \"guest_name\": \"John Doe\",\n                        \"guest_email\": \"john@example.com\",\n                        \"arrival_date\": \"2024-01-15\",\n                        \"departure_date\": \"2024-01-20\",\n                        \"status\": \"confirmed\",\n                        \"unit_id\": 100,\n                        \"total_amount\": 500.00,\n                        \"balance\": 0.00,\n                    }\n                ]\n            },\n            \"_links\": {\"self\": {\"href\": \"/reservations\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_response\n    \n            # Test de búsqueda básica\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_reservations\",\n                arguments={\"page\": 0, \"size\": 10, \"status\": \"confirmed\"},\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:62: AttributeError\n___________ TestTrackHSIntegration.test_get_reservation_integration ___________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002F01D95E850>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x000002F01DB587C0>\n\n    @pytest.mark.asyncio\n    async def test_get_reservation_integration(self, mcp_client):\n        \"\"\"Test de integración para obtener reserva específica\"\"\"\n        mock_response = {\n            \"id\": 12345,\n            \"confirmation_number\": \"CONF123\",\n            \"guest\": {\n                \"name\": \"John Doe\",\n                \"email\": \"john@example.com\",\n                \"phone\": \"+1234567890\",\n                \"address\": \"123 Main St\",\n            },\n            \"dates\": {\n                \"arrival\": \"2024-01-15\",\n                \"departure\": \"2024-01-20\",\n                \"nights\": 5,\n            },\n            \"unit\": {\n                \"id\": 100,\n                \"name\": \"Luxury Villa\",\n                \"code\": \"LV001\",\n                \"bedrooms\": 3,\n                \"bathrooms\": 2,\n            },\n            \"status\": \"confirmed\",\n            \"financial\": {\n                \"total_amount\": 500.00,\n                \"balance\": 0.00,\n                \"deposit\": 100.00,\n            },\n            \"_links\": {\"folio\": {\"href\": \"/reservations/12345/folio\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"get_reservation\", arguments={\"reservation_id\": 12345}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:108: AttributeError\n____________ TestTrackHSIntegration.test_search_units_integration _____________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002F01D974770>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x000002F01DB59030>\n\n    @pytest.mark.asyncio\n    async def test_search_units_integration(self, mcp_client):\n        \"\"\"Test de integración para búsqueda de unidades\"\"\"\n        mock_response = {\n            \"page\": 1,\n            \"page_count\": 1,\n            \"page_size\": 10,\n            \"total_items\": 1,\n            \"_embedded\": {\n                \"units\": [\n                    {\n                        \"id\": 100,\n                        \"name\": \"Luxury Villa\",\n                        \"code\": \"LV001\",\n                        \"bedrooms\": 3,\n                        \"bathrooms\": 2,\n                        \"max_occupancy\": 6,\n                        \"area\": 150.5,\n                        \"address\": \"123 Resort Way\",\n                        \"amenities\": [\"WiFi\", \"Pool\", \"AC\"],\n                        \"is_active\": True,\n                        \"is_bookable\": True,\n                    }\n                ]\n            },\n            \"_links\": {\"self\": {\"href\": \"/units\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\",\n                arguments={\"bedrooms\": 3, \"bathrooms\": 2, \"is_active\": 1},\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:148: AttributeError\n____ TestTrackHSIntegration.test_create_maintenance_work_order_integration ____\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002F01D9749D0>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x000002F01DB59990>\n\n    @pytest.mark.asyncio\n    async def test_create_maintenance_work_order_integration(self, mcp_client):\n        \"\"\"Test de integración para crear orden de mantenimiento\"\"\"\n        mock_response = {\n            \"id\": 789,\n            \"status\": \"pending\",\n            \"priority\": 3,\n            \"summary\": \"Reparar aire acondicionado\",\n            \"description\": \"AC no enfría correctamente\",\n            \"unit_id\": 100,\n            \"estimated_cost\": 150.0,\n            \"estimated_time\": 120,\n            \"date_received\": \"2024-01-15\",\n            \"assigned_to\": None,\n            \"vendor\": None,\n            \"_links\": {\"self\": {\"href\": \"/maintenance-work-orders/789\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = mock_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"create_maintenance_work_order\",\n                arguments={\n                    \"unit_id\": 100,\n                    \"summary\": \"Reparar aire acondicionado\",\n                    \"description\": \"AC no enfría correctamente\",\n                    \"priority\": 3,\n                    \"estimated_cost\": 150.0,\n                    \"estimated_time\": 120,\n                },\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:181: AttributeError\n_____________ TestTrackHSIntegration.test_middleware_integration ______________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002F01D8AB680>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x000002F01DB58D60>\n\n    @pytest.mark.asyncio\n    async def test_middleware_integration(self, mcp_client):\n        \"\"\"Test de integración del middleware\"\"\"\n        # Verificar que el middleware está funcionando\n        # (esto se puede verificar a través de los logs)\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_response = {\n                \"page\": 0,\n                \"page_count\": 1,\n                \"page_size\": 10,\n                \"total_items\": 0,\n                \"_embedded\": {\"reservations\": []},\n                \"_links\": {},\n            }\n            mock_client.get.return_value = mock_response\n    \n            # El middleware debería procesar este request\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_reservations\", arguments={\"page\": 0, \"size\": 10}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:239: AttributeError\n____________ TestTrackHSIntegration.test_health_check_integration _____________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002F01D8AB8A0>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x000002F01DB589A0>\n\n    @pytest.mark.asyncio\n    async def test_health_check_integration(self, mcp_client):\n        \"\"\"Test de integración del health check\"\"\"\n        # Test del recurso de health check\n>       resources = await mcp_client.list_resources()\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'async_generator' object has no attribute 'list_resources'\n\ntests\\test_integration.py:250: AttributeError\n============================== warnings summary ===============================\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_reservations_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_reservations_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\ntests/test_integration.py::TestTrackHSIntegration::test_get_reservation_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_get_reservation_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_get_reservation_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_get_reservation_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_units_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_units_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_create_maintenance_work_order_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_create_maintenance_work_order_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_create_maintenance_work_order_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_create_maintenance_work_order_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_error_handling_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_error_handling_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_error_handling_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_error_handling_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_middleware_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_middleware_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_middleware_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_middleware_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_health_check_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_health_check_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_health_check_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_health_check_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_get_reservation_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_search_units_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_create_maintenance_work_order_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_middleware_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_health_check_integration\n================== 6 failed, 1 passed, 20 warnings in 3.74s ===================\n",
      "stderr": ""
    },
    {
      "category": "MCP",
      "test": "Protocolo MCP",
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 3 items\n\ntests/test_mcp_protocol.py::TestMCPProtocol::test_mcp_protocol_compliance PASSED [ 33%]\ntests/test_mcp_protocol.py::TestMCPProtocol::test_server_capabilities PASSED [ 66%]\ntests/test_mcp_protocol.py::TestMCPProtocol::test_health_check_resource PASSED [100%]\n\n============================== warnings summary ===============================\ntests/test_mcp_protocol.py::TestMCPProtocol::test_mcp_protocol_compliance\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_mcp_protocol.py::TestMCPProtocol::test_mcp_protocol_compliance\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_mcp_protocol.py::TestMCPProtocol::test_mcp_protocol_compliance\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_mcp_protocol.py::TestMCPProtocol::test_mcp_protocol_compliance\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_mcp_protocol.py::TestMCPProtocol::test_mcp_protocol_compliance\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_mcp_protocol.py::TestMCPProtocol::test_mcp_protocol_compliance\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 3 passed, 6 warnings in 2.25s ========================\n",
      "stderr": ""
    },
    {
      "category": "MCP",
      "test": "Servidor MCP",
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 3 items\n\ntests/test_mcp_server.py::TestMCPServer::test_server_startup PASSED      [ 33%]\ntests/test_mcp_server.py::TestMCPServer::test_server_tools PASSED        [ 66%]\ntests/test_mcp_server.py::TestMCPServer::test_server_resources PASSED    [100%]\n\n============================== warnings summary ===============================\ntests/test_mcp_server.py::TestMCPServer::test_server_startup\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_mcp_server.py::TestMCPServer::test_server_startup\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_mcp_server.py::TestMCPServer::test_server_startup\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_mcp_server.py::TestMCPServer::test_server_startup\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_mcp_server.py::TestMCPServer::test_server_startup\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_mcp_server.py::TestMCPServer::test_server_startup\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 3 passed, 6 warnings in 2.52s ========================\n",
      "stderr": ""
    },
    {
      "category": "MCP",
      "test": "Health check",
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 5 items\n\ntests/test_health.py::test_health_check_resource_exists PASSED           [ 20%]\ntests/test_health.py::test_health_check_function FAILED                  [ 40%]\ntests/test_health.py::test_health_check_with_api PASSED                  [ 60%]\ntests/test_health.py::test_health_check_version FAILED                   [ 80%]\ntests/test_health.py::test_health_check_timestamp FAILED                 [100%]\n\n================================== FAILURES ===================================\n_________________________ test_health_check_function __________________________\n\n    def test_health_check_function():\n        \"\"\"Verifica que la función health_check funciona correctamente\"\"\"\n        from src.trackhs_mcp.server import health_check\n    \n        # Llamar a la función subyacente\n        response = health_check.fn()\n    \n        # Verificar campos requeridos\n        assert \"status\" in response\n        assert \"timestamp\" in response\n>       assert \"version\" in response\nE       assert 'version' in '{\\n  \"status\": \"unhealthy\",\\n  \"timestamp\": \"2025-10-27T15:11:57.187553\",\\n  \"error\": \"Object of type MetricType is not JSON serializable\"\\n}'\n\ntests\\test_health.py:30: AssertionError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:232 HTTP Error 302 - https://ihmvacations.trackhs.com/pms/units/amenities\nWARNING  src.trackhs_mcp.server:server.py:1072 API TrackHS no disponible: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/units/amenities (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:1130 Error en health check: Object of type MetricType is not JSON serializable\n__________________________ test_health_check_version __________________________\n\n    def test_health_check_version():\n        \"\"\"Verifica que incluye versión correcta\"\"\"\n        from src.trackhs_mcp.server import health_check\n    \n        response = health_check.fn()\n    \n>       assert \"version\" in response\nE       assert 'version' in '{\\n  \"status\": \"unhealthy\",\\n  \"timestamp\": \"2025-10-27T15:11:58.830201\",\\n  \"error\": \"Object of type MetricType is not JSON serializable\"\\n}'\n\ntests\\test_health.py:60: AssertionError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:232 HTTP Error 302 - https://ihmvacations.trackhs.com/pms/units/amenities\nWARNING  src.trackhs_mcp.server:server.py:1072 API TrackHS no disponible: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/units/amenities (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:1130 Error en health check: Object of type MetricType is not JSON serializable\n_________________________ test_health_check_timestamp _________________________\n\n    def test_health_check_timestamp():\n        \"\"\"Verifica timestamp en formato ISO\"\"\"\n        from src.trackhs_mcp.server import health_check\n    \n        response = health_check.fn()\n    \n        assert \"timestamp\" in response\n    \n        # Verificar formato ISO\n        try:\n>           dt = datetime.fromisoformat(response[\"timestamp\"])\n                                        ^^^^^^^^^^^^^^^^^^^^^\nE           TypeError: string indices must be integers, not 'str'\n\ntests\\test_health.py:75: TypeError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:232 HTTP Error 302 - https://ihmvacations.trackhs.com/pms/units/amenities\nWARNING  src.trackhs_mcp.server:server.py:1072 API TrackHS no disponible: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/units/amenities (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:1130 Error en health check: Object of type MetricType is not JSON serializable\n============================== warnings summary ===============================\ntests/test_health.py::test_health_check_resource_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_health.py::test_health_check_resource_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_health.py::test_health_check_resource_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_health.py::test_health_check_resource_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_health.py::test_health_check_resource_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_health.py::test_health_check_resource_exists\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nFAILED tests/test_health.py::test_health_check_function - assert 'version' in...\nFAILED tests/test_health.py::test_health_check_version - assert 'version' in ...\nFAILED tests/test_health.py::test_health_check_timestamp - TypeError: string ...\n=================== 3 failed, 2 passed, 6 warnings in 4.03s ===================\n",
      "stderr": ""
    },
    {
      "category": "Herramientas",
      "test": "Búsqueda de reservas",
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 10 items\n\ntests/test_search_reservations.py::test_search_reservations_basic PASSED [ 10%]\ntests/test_search_reservations.py::test_search_reservations_parameters PASSED [ 20%]\ntests/test_search_reservations.py::test_search_reservations_default_values PASSED [ 30%]\ntests/test_search_reservations.py::test_search_reservations_with_pagination PASSED [ 40%]\ntests/test_search_reservations.py::test_search_reservations_date_format PASSED [ 50%]\ntests/test_search_reservations.py::test_search_reservations_output_schema PASSED [ 60%]\ntests/test_search_reservations.py::test_search_reservations_docstring PASSED [ 70%]\ntests/test_search_reservations.py::test_search_reservations_integration SKIPPED [ 80%]\ntests/test_search_reservations.py::test_search_reservations_by_date SKIPPED [ 90%]\ntests/test_search_reservations.py::test_search_reservations_by_status SKIPPED [100%]\n\n============================== warnings summary ===============================\ntests\\test_search_reservations.py:120\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_reservations.py:120: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_reservations.py:143\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_reservations.py:143: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_reservations.py:166\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_reservations.py:166: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/test_search_reservations.py::test_search_reservations_basic\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_search_reservations.py::test_search_reservations_basic\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_search_reservations.py::test_search_reservations_basic\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_search_reservations.py::test_search_reservations_basic\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_search_reservations.py::test_search_reservations_basic\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_search_reservations.py::test_search_reservations_basic\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n================== 7 passed, 3 skipped, 9 warnings in 2.98s ===================\n",
      "stderr": ""
    },
    {
      "category": "Herramientas",
      "test": "Obtener reserva",
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 9 items\n\ntests/test_get_reservation.py::test_get_reservation_exists PASSED        [ 11%]\ntests/test_get_reservation.py::test_get_reservation_parameters PASSED    [ 22%]\ntests/test_get_reservation.py::test_get_reservation_parameter_type PASSED [ 33%]\ntests/test_get_reservation.py::test_get_reservation_no_default PASSED    [ 44%]\ntests/test_get_reservation.py::test_get_reservation_output_schema PASSED [ 55%]\ntests/test_get_reservation.py::test_get_reservation_docstring PASSED     [ 66%]\ntests/test_get_reservation.py::test_get_reservation_with_valid_id SKIPPED [ 77%]\ntests/test_get_reservation.py::test_get_reservation_with_invalid_id FAILED [ 88%]\ntests/test_get_reservation.py::test_get_reservation_positive_id_only PASSED [100%]\n\n================================== FAILURES ===================================\n____________________ test_get_reservation_with_invalid_id _____________________\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000001DF45F2DFD0>\nendpoint = 'pms/reservations/999999999', params = None\n\n    def get(self, endpoint: str, params: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        GET request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_params = sanitize_for_log(params)\n        logger.debug(f\"GET request to {full_url} with params: {sanitized_params}\")\n    \n        try:\n            response = self.client.get(full_url, params=params)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [302 Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Redirect response '302 Found' for url 'https://ihmvacations.trackhs.com/pms/reservations/999999999'\nE       Redirect location: '/?sessionRequired=1&returnPath=/pms/reservations/999999999'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nreservation_id = 999999999\n\n    @mcp.tool(output_schema=RESERVATION_DETAIL_OUTPUT_SCHEMA)\n    def get_reservation(\n        reservation_id: Annotated[\n            int, Field(gt=0, description=\"ID único de la reserva en TrackHS\")\n        ],\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Obtener detalles completos de una reserva específica por ID.\n    \n        Retorna información completa incluyendo:\n        - Datos del huésped (nombre, email, teléfono, dirección)\n        - Fechas de check-in/check-out\n        - Unidad asignada con detalles completos\n        - Estado de la reserva y historial\n        - Información de pago y balance\n        - Políticas aplicables (cancelación, depósito, etc.)\n        - Enlaces a recursos relacionados (folio, unidad, etc.)\n    \n        Útil para:\n        - Ver detalles completos de una reserva específica\n        - Verificar información antes de check-in\n        - Consultar historial y estado de reserva\n        - Obtener información de contacto del huésped\n        - Revisar políticas y términos aplicables\n    \n        Ejemplo de uso:\n        - get_reservation(reservation_id=12345) # Obtener detalles de reserva ID 12345\n        \"\"\"\n        try:\n            # Verificar que el repository esté disponible\n            if reservation_repo is None:\n                raise AuthenticationError(\"Repository de reservas no disponible. Verifique las credenciales.\")\n    \n            # Usar repository para obtener reserva\n>           result = reservation_repo.get_by_id(reservation_id)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nsrc\\trackhs_mcp\\server.py:609: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\repositories\\reservation_repository.py:53: in get_by_id\n    self._handle_api_error(e, f\"get_reservation_{reservation_id}\")\nsrc\\trackhs_mcp\\repositories\\reservation_repository.py:45: in get_by_id\n    result = self.api_client.get(f\"{self.base_endpoint}/{reservation_id}\")\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000001DF45F2DFD0>\nendpoint = 'pms/reservations/999999999', params = None\n\n    def get(self, endpoint: str, params: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        GET request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_params = sanitize_for_log(params)\n        logger.debug(f\"GET request to {full_url} with params: {sanitized_params}\")\n    \n        try:\n            response = self.client.get(full_url, params=params)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/reservations/999999999 (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:236: NotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.integration\n    def test_get_reservation_with_invalid_id():\n        \"\"\"\n        Test con ID inválido.\n        Debe manejar el error apropiadamente.\n        \"\"\"\n        from src.trackhs_mcp.server import api_client, get_reservation\n    \n        if api_client is None:\n            pytest.skip(\"API client no disponible\")\n    \n        try:\n            # ID muy alto, probablemente no existe\n>           result = get_reservation.fn(reservation_id=999999999)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_get_reservation.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nreservation_id = 999999999\n\n    @mcp.tool(output_schema=RESERVATION_DETAIL_OUTPUT_SCHEMA)\n    def get_reservation(\n        reservation_id: Annotated[\n            int, Field(gt=0, description=\"ID único de la reserva en TrackHS\")\n        ],\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Obtener detalles completos de una reserva específica por ID.\n    \n        Retorna información completa incluyendo:\n        - Datos del huésped (nombre, email, teléfono, dirección)\n        - Fechas de check-in/check-out\n        - Unidad asignada con detalles completos\n        - Estado de la reserva y historial\n        - Información de pago y balance\n        - Políticas aplicables (cancelación, depósito, etc.)\n        - Enlaces a recursos relacionados (folio, unidad, etc.)\n    \n        Útil para:\n        - Ver detalles completos de una reserva específica\n        - Verificar información antes de check-in\n        - Consultar historial y estado de reserva\n        - Obtener información de contacto del huésped\n        - Revisar políticas y términos aplicables\n    \n        Ejemplo de uso:\n        - get_reservation(reservation_id=12345) # Obtener detalles de reserva ID 12345\n        \"\"\"\n        try:\n            # Verificar que el repository esté disponible\n            if reservation_repo is None:\n                raise AuthenticationError(\"Repository de reservas no disponible. Verifique las credenciales.\")\n    \n            # Usar repository para obtener reserva\n            result = reservation_repo.get_by_id(reservation_id)\n    \n            # Validar respuesta (modo no-strict: loguea pero no falla)\n            validated_result = validate_response(result, ReservationResponse, strict=False)\n    \n            return validated_result\n    \n        except NotFoundError:\n            # \\u2705 ToolError: Mensaje claro para el cliente (siempre se muestra)\n>           raise ToolError(\n                f\"Reserva {reservation_id} no encontrada en TrackHS. \"\n                f\"Verifique el ID e intente nuevamente.\"\n            )\nE           fastmcp.exceptions.ToolError: Reserva 999999999 no encontrada en TrackHS. Verifique el ID e intente nuevamente.\n\nsrc\\trackhs_mcp\\server.py:618: ToolError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.integration\n    def test_get_reservation_with_invalid_id():\n        \"\"\"\n        Test con ID inválido.\n        Debe manejar el error apropiadamente.\n        \"\"\"\n        from src.trackhs_mcp.server import api_client, get_reservation\n    \n        if api_client is None:\n            pytest.skip(\"API client no disponible\")\n    \n        try:\n            # ID muy alto, probablemente no existe\n            result = get_reservation.fn(reservation_id=999999999)\n    \n            # Si llega aquí, verificar que sea un error o respuesta vacía\n            assert result is not None\n    \n        except Exception as e:\n            # Se espera que lance excepción\n            error_msg = str(e).lower()\n>           assert (\n                \"404\" in str(e) or \"not found\" in error_msg or \"no encontrado\" in error_msg\n            )\nE           AssertionError: assert ('404' in 'Reserva 999999999 no encontrada en TrackHS. Verifique el ID e intente nuevamente.' or 'not found' in 'reserva 999999999 no encontrada en trackhs. verifique el id e intente nuevamente.' or 'no encontrado' in 'reserva 999999999 no encontrada en trackhs. verifique el id e intente nuevamente.')\nE            +  where 'Reserva 999999999 no encontrada en TrackHS. Verifique el ID e intente nuevamente.' = str(ToolError('Reserva 999999999 no encontrada en TrackHS. Verifique el ID e intente nuevamente.'))\n\ntests\\test_get_reservation.py:112: AssertionError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:232 HTTP Error 302 - https://ihmvacations.trackhs.com/pms/reservations/999999999\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in get_reservation_999999999: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/reservations/999999999 (respuesta HTML)\n============================== warnings summary ===============================\ntests\\test_get_reservation.py:75\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_get_reservation.py:75: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_get_reservation.py:91\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_get_reservation.py:91: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/test_get_reservation.py::test_get_reservation_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_get_reservation.py::test_get_reservation_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_get_reservation.py::test_get_reservation_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_get_reservation.py::test_get_reservation_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_get_reservation.py::test_get_reservation_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_get_reservation.py::test_get_reservation_exists\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nFAILED tests/test_get_reservation.py::test_get_reservation_with_invalid_id - ...\n============= 1 failed, 7 passed, 1 skipped, 8 warnings in 4.37s ==============\n",
      "stderr": ""
    },
    {
      "category": "Herramientas",
      "test": "Búsqueda de unidades",
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 10 items\n\ntests/test_search_units.py::test_search_units_exists PASSED              [ 10%]\ntests/test_search_units.py::test_search_units_parameters PASSED          [ 20%]\ntests/test_search_units.py::test_search_units_default_values PASSED      [ 30%]\ntests/test_search_units.py::test_search_units_output_schema PASSED       [ 40%]\ntests/test_search_units.py::test_search_units_docstring PASSED           [ 50%]\ntests/test_search_units.py::test_search_units_basic SKIPPED (API no ...) [ 60%]\ntests/test_search_units.py::test_search_units_by_bedrooms SKIPPED (A...) [ 70%]\ntests/test_search_units.py::test_search_units_by_bathrooms SKIPPED (...) [ 80%]\ntests/test_search_units.py::test_search_units_active_bookable SKIPPED    [ 90%]\ntests/test_search_units.py::test_search_units_combined_filters SKIPPED   [100%]\n\n============================== warnings summary ===============================\ntests\\test_search_units.py:76\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:76: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_units.py:98\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:98: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_units.py:118\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:118: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_units.py:138\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:138: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_units.py:158\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:158: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/test_search_units.py::test_search_units_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_search_units.py::test_search_units_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_search_units.py::test_search_units_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_search_units.py::test_search_units_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_search_units.py::test_search_units_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_search_units.py::test_search_units_exists\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n================== 5 passed, 5 skipped, 11 warnings in 2.80s ==================\n",
      "stderr": ""
    },
    {
      "category": "Herramientas",
      "test": "Obtener folio",
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 8 items\n\ntests/test_get_folio.py::test_get_folio_exists PASSED                    [ 12%]\ntests/test_get_folio.py::test_get_folio_parameters PASSED                [ 25%]\ntests/test_get_folio.py::test_get_folio_parameter_type PASSED            [ 37%]\ntests/test_get_folio.py::test_get_folio_output_schema PASSED             [ 50%]\ntests/test_get_folio.py::test_get_folio_docstring PASSED                 [ 62%]\ntests/test_get_folio.py::test_get_folio_with_valid_id SKIPPED (Requi...) [ 75%]\ntests/test_get_folio.py::test_get_folio_structure SKIPPED (Requiere ...) [ 87%]\ntests/test_get_folio.py::test_get_folio_positive_id_only PASSED          [100%]\n\n============================== warnings summary ===============================\ntests\\test_get_folio.py:65\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_get_folio.py:65: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_get_folio.py:80\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_get_folio.py:80: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/test_get_folio.py::test_get_folio_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_get_folio.py::test_get_folio_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_get_folio.py::test_get_folio_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_get_folio.py::test_get_folio_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_get_folio.py::test_get_folio_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_get_folio.py::test_get_folio_exists\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n================== 6 passed, 2 skipped, 8 warnings in 2.35s ===================\n",
      "stderr": ""
    },
    {
      "category": "Herramientas",
      "test": "Órdenes de mantenimiento",
      "success": true,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 10 items\n\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_exists PASSED [ 10%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_parameters PASSED [ 20%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_required_params PASSED [ 30%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_optional_params PASSED [ 40%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_priority_values PASSED [ 50%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_output_schema PASSED [ 60%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_docstring PASSED [ 70%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_integration SKIPPED [ 80%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_all_params SKIPPED [ 90%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_string_lengths PASSED [100%]\n\n============================== warnings summary ===============================\ntests\\test_create_maintenance_work_order.py:110\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_create_maintenance_work_order.py:110: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_create_maintenance_work_order.py:125\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_create_maintenance_work_order.py:125: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_exists\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_exists\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n================== 8 passed, 2 skipped, 8 warnings in 2.59s ===================\n",
      "stderr": ""
    },
    {
      "category": "Cobertura",
      "test": "Cobertura de código",
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 307 items\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_basic_real_api FAILED [  0%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_pagination_real_api FAILED [  0%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_filters_real_api FAILED [  0%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_search_text_real_api FAILED [  1%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_edge_cases_real_api FAILED [  1%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_unicode_real_api FAILED [  1%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_performance_real_api FAILED [  2%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_concurrent_requests_real_api FAILED [  2%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_data_consistency_real_api FAILED [  2%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_error_handling_real_api PASSED [  3%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_unit_structure_real_api FAILED [  3%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_links_structure_real_api FAILED [  3%]\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_comprehensive_real_api FAILED [  4%]\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_property_manager_search_flow FAILED [  4%]\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_guest_search_flow FAILED [  4%]\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_inventory_management_flow FAILED [  5%]\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_performance_stress_test FAILED [  5%]\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_error_recovery_flow FAILED [  5%]\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_data_consistency_flow FAILED [  6%]\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_business_scenarios_flow FAILED [  6%]\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_complete_user_journey FAILED [  6%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_basic_integration FAILED [  7%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_with_filters_integration FAILED [  7%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_error_handling_integration PASSED [  7%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_middleware_integration FAILED [  8%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_parameter_validation_integration PASSED [  8%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_empty_response_integration FAILED [  8%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_pagination_integration FAILED [  9%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_concurrent_requests_integration FAILED [  9%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_large_response_integration FAILED [  9%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_unicode_integration FAILED [ 10%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_middleware_metrics_integration FAILED [ 10%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_timeout_integration PASSED [ 10%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_retry_logic_integration PASSED [ 11%]\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_memory_usage_integration FAILED [ 11%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_parameter_validation PASSED [ 11%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_string_validation PASSED [ 12%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_api_client_mock PASSED [ 12%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_error_handling PASSED [ 12%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_response_structure_validation PASSED [ 13%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_unicode_handling PASSED [ 13%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_edge_cases PASSED [ 13%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_pagination_logic PASSED [ 14%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_parameter_combinations PASSED [ 14%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_data_types_validation PASSED [ 14%]\ntests/search_units/test_search_units_unit_simple.py::TestSearchUnitsUnitSimple::test_empty_response_handling PASSED [ 14%]\ntests/test_business_validators.py::test_validate_date_format_valid PASSED [ 15%]\ntests/test_business_validators.py::test_validate_date_format_invalid PASSED [ 15%]\ntests/test_business_validators.py::test_validate_date_range_valid PASSED [ 15%]\ntests/test_business_validators.py::test_validate_date_range_invalid PASSED [ 16%]\ntests/test_business_validators.py::test_validate_positive_number_valid PASSED [ 16%]\ntests/test_business_validators.py::test_validate_positive_number_invalid PASSED [ 16%]\ntests/test_business_validators.py::test_validate_positive_number_with_zero PASSED [ 17%]\ntests/test_business_validators.py::test_validate_integer_range_valid PASSED [ 17%]\ntests/test_business_validators.py::test_validate_integer_range_invalid PASSED [ 17%]\ntests/test_business_validators.py::test_validate_string_not_empty_valid PASSED [ 18%]\ntests/test_business_validators.py::test_validate_string_not_empty_invalid PASSED [ 18%]\ntests/test_business_validators.py::test_validate_string_length_valid PASSED [ 18%]\ntests/test_business_validators.py::test_validate_string_length_invalid PASSED [ 19%]\ntests/test_business_validators.py::test_validate_priority_valid PASSED   [ 19%]\ntests/test_business_validators.py::test_validate_priority_invalid PASSED [ 19%]\ntests/test_business_validators.py::test_validate_reservation_dates_valid PASSED [ 20%]\ntests/test_business_validators.py::test_validate_reservation_dates_invalid PASSED [ 20%]\ntests/test_business_validators.py::test_validate_unit_capacity_valid PASSED [ 20%]\ntests/test_business_validators.py::test_validate_unit_capacity_invalid PASSED [ 21%]\ntests/test_business_validators.py::test_validate_cost_valid PASSED       [ 21%]\ntests/test_business_validators.py::test_validate_cost_invalid PASSED     [ 21%]\ntests/test_business_validators.py::test_validate_work_order_summary_valid PASSED [ 22%]\ntests/test_business_validators.py::test_validate_work_order_summary_invalid PASSED [ 22%]\ntests/test_business_validators.py::test_validate_work_order_description_valid PASSED [ 22%]\ntests/test_business_validators.py::test_validate_work_order_description_invalid PASSED [ 23%]\ntests/test_business_validators.py::test_business_validation_error_is_exception PASSED [ 23%]\ntests/test_business_validators.py::test_error_messages_are_descriptive PASSED [ 23%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_basic_set_get PASSED [ 24%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_get_nonexistent_key PASSED [ 24%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_ttl_expiration PASSED [ 24%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_lru_eviction PASSED [ 25%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_invalidate_pattern PASSED [ 25%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_metrics PASSED [ 25%]\ntests/test_cache_and_metrics.py::TestIntelligentCache::test_clear_cache PASSED [ 26%]\ntests/test_cache_and_metrics.py::TestCacheDecorator::test_cached_decorator PASSED [ 26%]\ntests/test_cache_and_metrics.py::TestCacheDecorator::test_cached_with_different_args FAILED [ 26%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_increment_counter PASSED [ 27%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_set_gauge PASSED [ 27%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_observe_histogram PASSED [ 27%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_record_request PASSED [ 28%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_record_trackhs_api_call PASSED [ 28%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_record_cache_operation PASSED [ 28%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_record_mcp_tool_call PASSED [ 28%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_update_cache_metrics PASSED [ 29%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_get_metrics_summary PASSED [ 29%]\ntests/test_cache_and_metrics.py::TestPrometheusMetrics::test_export_prometheus_format FAILED [ 29%]\ntests/test_cache_and_metrics.py::TestMetricsIntegration::test_global_metrics_instance PASSED [ 30%]\ntests/test_cache_and_metrics.py::TestMetricsIntegration::test_record_functions PASSED [ 30%]\ntests/test_cache_and_metrics.py::TestCacheKeyGeneration::test_cache_key_with_args PASSED [ 30%]\ntests/test_cache_and_metrics.py::TestCacheKeyGeneration::test_cache_key_with_kwargs FAILED [ 31%]\ntests/test_cache_and_metrics.py::TestCacheKeyGeneration::test_cache_key_with_mixed_args PASSED [ 31%]\ntests/test_cache_and_metrics.py::TestCacheAndMetricsIntegration::test_cache_metrics_integration PASSED [ 31%]\ntests/test_cache_and_metrics.py::TestCacheAndMetricsIntegration::test_performance_metrics FAILED [ 32%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_exists PASSED [ 32%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_parameters PASSED [ 32%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_required_params PASSED [ 33%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_optional_params PASSED [ 33%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_priority_values PASSED [ 33%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_output_schema PASSED [ 34%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_docstring PASSED [ 34%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_integration SKIPPED [ 34%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_all_params SKIPPED [ 35%]\ntests/test_create_maintenance_work_order.py::test_create_maintenance_work_order_string_lengths PASSED [ 35%]\ntests/test_get_folio.py::test_get_folio_exists PASSED                    [ 35%]\ntests/test_get_folio.py::test_get_folio_parameters PASSED                [ 36%]\ntests/test_get_folio.py::test_get_folio_parameter_type PASSED            [ 36%]\ntests/test_get_folio.py::test_get_folio_output_schema PASSED             [ 36%]\ntests/test_get_folio.py::test_get_folio_docstring PASSED                 [ 37%]\ntests/test_get_folio.py::test_get_folio_with_valid_id SKIPPED (Requi...) [ 37%]\ntests/test_get_folio.py::test_get_folio_structure SKIPPED (Requiere ...) [ 37%]\ntests/test_get_folio.py::test_get_folio_positive_id_only PASSED          [ 38%]\ntests/test_get_reservation.py::test_get_reservation_exists PASSED        [ 38%]\ntests/test_get_reservation.py::test_get_reservation_parameters PASSED    [ 38%]\ntests/test_get_reservation.py::test_get_reservation_parameter_type PASSED [ 39%]\ntests/test_get_reservation.py::test_get_reservation_no_default PASSED    [ 39%]\ntests/test_get_reservation.py::test_get_reservation_output_schema PASSED [ 39%]\ntests/test_get_reservation.py::test_get_reservation_docstring PASSED     [ 40%]\ntests/test_get_reservation.py::test_get_reservation_with_valid_id SKIPPED [ 40%]\ntests/test_get_reservation.py::test_get_reservation_with_invalid_id FAILED [ 40%]\ntests/test_get_reservation.py::test_get_reservation_positive_id_only PASSED [ 41%]\ntests/test_health.py::test_health_check_resource_exists PASSED           [ 41%]\ntests/test_health.py::test_health_check_function FAILED                  [ 41%]\ntests/test_health.py::test_health_check_with_api PASSED                  [ 42%]\ntests/test_health.py::test_health_check_version FAILED                   [ 42%]\ntests/test_health.py::test_health_check_timestamp FAILED                 [ 42%]\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration FAILED [ 42%]\ntests/test_integration.py::TestTrackHSIntegration::test_get_reservation_integration FAILED [ 43%]\ntests/test_integration.py::TestTrackHSIntegration::test_search_units_integration FAILED [ 43%]\ntests/test_integration.py::TestTrackHSIntegration::test_create_maintenance_work_order_integration FAILED [ 43%]\ntests/test_integration.py::TestTrackHSIntegration::test_error_handling_integration PASSED [ 44%]\ntests/test_integration.py::TestTrackHSIntegration::test_middleware_integration FAILED [ 44%]\ntests/test_integration.py::TestTrackHSIntegration::test_health_check_integration FAILED [ 44%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_required_parameters_validation FAILED [ 45%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_unit_id_validation FAILED [ 45%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_summary_length_validation FAILED [ 45%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_description_length_validation FAILED [ 46%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_priority_validation FAILED [ 46%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_estimated_cost_validation FAILED [ 46%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_estimated_time_validation FAILED [ 47%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_date_received_validation FAILED [ 47%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderDataPreparation::test_data_structure_with_all_parameters FAILED [ 47%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderDataPreparation::test_data_structure_with_minimal_parameters FAILED [ 48%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderDataPreparation::test_default_date_received FAILED [ 48%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderErrorHandling::test_api_client_not_available FAILED [ 48%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderErrorHandling::test_api_error_handling FAILED [ 49%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderErrorHandling::test_authentication_error_handling FAILED [ 49%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderErrorHandling::test_validation_error_handling PASSED [ 49%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderErrorHandling::test_generic_error_handling PASSED [ 50%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderResponseValidation::test_successful_response_validation FAILED [ 50%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderResponseValidation::test_response_validation_with_extra_fields FAILED [ 50%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderLogging::test_success_logging FAILED [ 51%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderLogging::test_error_logging FAILED [ 51%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderEdgeCases::test_very_long_summary FAILED [ 51%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderEdgeCases::test_very_long_description FAILED [ 52%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderEdgeCases::test_zero_estimated_cost FAILED [ 52%]\ntests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderEdgeCases::test_zero_estimated_time FAILED [ 52%]\ntests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_api_connectivity PASSED [ 53%]\ntests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_create_maintenance_work_order_dry_run PASSED [ 53%]\ntests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_error_handling_with_real_api PASSED [ 53%]\ntests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_parameter_validation_integration FAILED [ 54%]\ntests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_different_priority_levels_integration FAILED [ 54%]\ntests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_cost_and_time_estimation_integration FAILED [ 54%]\ntests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_date_handling_integration FAILED [ 55%]\ntests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderPerformance::test_response_time_simulation FAILED [ 55%]\ntests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderPerformance::test_memory_usage_simulation FAILED [ 55%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderFunctionality::test_function_exists_and_callable PASSED [ 56%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderFunctionality::test_function_parameters PASSED [ 56%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderFunctionality::test_function_docstring PASSED [ 56%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderDataPreparation::test_data_structure_with_all_parameters FAILED [ 57%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderDataPreparation::test_data_structure_with_minimal_parameters FAILED [ 57%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderDataPreparation::test_default_date_received FAILED [ 57%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderDataPreparation::test_optional_parameters_handling FAILED [ 57%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderErrorHandling::test_api_client_not_available FAILED [ 58%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderErrorHandling::test_api_error_handling FAILED [ 58%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderErrorHandling::test_authentication_error_handling FAILED [ 58%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderErrorHandling::test_validation_error_handling PASSED [ 59%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderErrorHandling::test_generic_error_handling PASSED [ 59%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderResponseValidation::test_successful_response_validation FAILED [ 59%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderResponseValidation::test_response_validation_with_extra_fields FAILED [ 60%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderLogging::test_success_logging FAILED [ 60%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderLogging::test_error_logging FAILED [ 60%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_very_long_summary FAILED [ 61%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_very_long_description FAILED [ 61%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_zero_estimated_cost FAILED [ 61%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_zero_estimated_time FAILED [ 62%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_different_priorities FAILED [ 62%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderIntegration::test_complete_workflow_simulation FAILED [ 62%]\ntests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderIntegration::test_error_recovery_simulation FAILED [ 63%]\ntests/test_mcp_protocol.py::TestMCPProtocol::test_mcp_protocol_compliance PASSED [ 63%]\ntests/test_mcp_protocol.py::TestMCPProtocol::test_server_capabilities PASSED [ 63%]\ntests/test_mcp_protocol.py::TestMCPProtocol::test_health_check_resource PASSED [ 64%]\ntests/test_mcp_server.py::TestMCPServer::test_server_startup PASSED      [ 64%]\ntests/test_mcp_server.py::TestMCPServer::test_server_tools PASSED        [ 64%]\ntests/test_mcp_server.py::TestMCPServer::test_server_resources PASSED    [ 65%]\ntests/test_middleware.py::TestTrackHSLoggingMiddleware::test_successful_request PASSED [ 65%]\ntests/test_middleware.py::TestTrackHSLoggingMiddleware::test_failed_request PASSED [ 65%]\ntests/test_middleware.py::TestTrackHSLoggingMiddleware::test_request_counting PASSED [ 66%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_success PASSED [ 66%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_failure PASSED [ 66%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_no_client FAILED [ 67%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_testing_mode FAILED [ 67%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_no_auth_methods PASSED [ 67%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_auth_required_methods PASSED [ 68%]\ntests/test_middleware.py::TestTrackHSAuthMiddleware::test_auth_failure_blocks_request PASSED [ 68%]\ntests/test_middleware.py::TestTrackHSMetricsMiddleware::test_successful_request_metrics PASSED [ 68%]\ntests/test_middleware.py::TestTrackHSMetricsMiddleware::test_failed_request_metrics PASSED [ 69%]\ntests/test_middleware.py::TestTrackHSMetricsMiddleware::test_get_metrics FAILED [ 69%]\ntests/test_middleware.py::TestTrackHSMetricsMiddleware::test_reset_metrics PASSED [ 69%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_is_rate_limited_false PASSED [ 70%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_is_rate_limited_true PASSED [ 70%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_rate_limit_allows_request PASSED [ 70%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_rate_limit_blocks_request PASSED [ 71%]\ntests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_rate_limit_cleanup FAILED [ 71%]\ntests/test_middleware.py::TestMiddlewareIntegration::test_middleware_chain_execution PASSED [ 71%]\ntests/test_middleware.py::TestMiddlewareIntegration::test_middleware_error_propagation PASSED [ 71%]\ntests/test_middleware.py::TestMiddlewareIntegration::test_middleware_metrics_aggregation FAILED [ 72%]\ntests/test_repositories_integration.py::TestReservationRepository::test_get_by_id_success PASSED [ 72%]\ntests/test_repositories_integration.py::TestReservationRepository::test_get_by_id_not_found PASSED [ 72%]\ntests/test_repositories_integration.py::TestReservationRepository::test_search_reservations PASSED [ 73%]\ntests/test_repositories_integration.py::TestReservationRepository::test_get_folio PASSED [ 73%]\ntests/test_repositories_integration.py::TestReservationRepository::test_search_by_date_range PASSED [ 73%]\ntests/test_repositories_integration.py::TestReservationRepository::test_cache_functionality FAILED [ 74%]\ntests/test_repositories_integration.py::TestReservationRepository::test_health_check_healthy PASSED [ 74%]\ntests/test_repositories_integration.py::TestReservationRepository::test_health_check_unhealthy PASSED [ 74%]\ntests/test_repositories_integration.py::TestUnitRepository::test_get_by_id_success PASSED [ 75%]\ntests/test_repositories_integration.py::TestUnitRepository::test_search_units PASSED [ 75%]\ntests/test_repositories_integration.py::TestUnitRepository::test_search_amenities PASSED [ 75%]\ntests/test_repositories_integration.py::TestUnitRepository::test_search_by_capacity PASSED [ 76%]\ntests/test_repositories_integration.py::TestUnitRepository::test_get_unit_summary FAILED [ 76%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_create_maintenance_work_order_success FAILED [ 76%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_create_maintenance_work_order_validation_error PASSED [ 77%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_create_housekeeping_work_order_success PASSED [ 77%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_create_housekeeping_work_order_validation_error PASSED [ 77%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_get_by_id_maintenance PASSED [ 78%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_get_by_id_housekeeping_fallback PASSED [ 78%]\ntests/test_repositories_integration.py::TestWorkOrderRepository::test_search_work_orders PASSED [ 78%]\ntests/test_repositories_integration.py::TestRepositoryIntegration::test_full_workflow PASSED [ 79%]\ntests/test_repositories_integration.py::TestRepositoryIntegration::test_cache_invalidation_across_repositories PASSED [ 79%]\ntests/test_repositories_integration.py::TestRepositoryIntegration::test_error_handling_consistency PASSED [ 79%]\ntests/test_response_validation.py::test_validate_response_exists PASSED  [ 80%]\ntests/test_response_validation.py::test_validate_reservation_response_valid PASSED [ 80%]\ntests/test_response_validation.py::test_validate_reservation_response_minimal PASSED [ 80%]\ntests/test_response_validation.py::test_validate_reservation_response_invalid_strict PASSED [ 81%]\ntests/test_response_validation.py::test_validate_reservation_response_invalid_non_strict PASSED [ 81%]\ntests/test_response_validation.py::test_validate_unit_response_valid PASSED [ 81%]\ntests/test_response_validation.py::test_validate_folio_response_valid PASSED [ 82%]\ntests/test_response_validation.py::test_validate_work_order_response_valid PASSED [ 82%]\ntests/test_response_validation.py::test_validate_response_with_extra_fields PASSED [ 82%]\ntests/test_response_validation.py::test_models_have_correct_config PASSED [ 83%]\ntests/test_response_validation.py::test_validate_response_type_coercion PASSED [ 83%]\ntests/test_response_validation.py::test_reservation_response_model_directly PASSED [ 83%]\ntests/test_response_validation.py::test_unit_response_model_directly PASSED [ 84%]\ntests/test_response_validation.py::test_folio_response_model_directly PASSED [ 84%]\ntests/test_response_validation.py::test_work_order_response_model_directly PASSED [ 84%]\ntests/test_retries.py::test_retry_with_backoff_exists FAILED             [ 85%]\ntests/test_retries.py::test_retry_constants_exist FAILED                 [ 85%]\ntests/test_retries.py::test_retry_success_on_first_attempt FAILED        [ 85%]\ntests/test_retries.py::test_retry_on_request_error FAILED                [ 85%]\ntests/test_retries.py::test_retry_exhaustion FAILED                      [ 86%]\ntests/test_retries.py::test_retry_on_500_error FAILED                    [ 86%]\ntests/test_retries.py::test_retry_on_429_rate_limit FAILED               [ 86%]\ntests/test_retries.py::test_no_retry_on_404 FAILED                       [ 87%]\ntests/test_retries.py::test_no_retry_on_401 FAILED                       [ 87%]\ntests/test_retries.py::test_exponential_backoff FAILED                   [ 87%]\ntests/test_retries.py::test_retry_on_502_bad_gateway FAILED              [ 88%]\ntests/test_retries.py::test_retry_on_503_service_unavailable FAILED      [ 88%]\ntests/test_retries.py::test_retry_trackhs_client_integration FAILED      [ 88%]\ntests/test_sanitization.py::test_sanitize_for_log_exists PASSED          [ 89%]\ntests/test_sanitization.py::test_sanitize_simple_dict PASSED             [ 89%]\ntests/test_sanitization.py::test_sanitize_phone_numbers PASSED           [ 89%]\ntests/test_sanitization.py::test_sanitize_nested_dict PASSED             [ 90%]\ntests/test_sanitization.py::test_sanitize_list PASSED                    [ 90%]\ntests/test_sanitization.py::test_sanitize_password_fields PASSED         [ 90%]\ntests/test_sanitization.py::test_sanitize_address_fields PASSED          [ 91%]\ntests/test_sanitization.py::test_sanitize_payment_fields PASSED          [ 91%]\ntests/test_sanitization.py::test_sanitize_email_strings PASSED           [ 91%]\ntests/test_sanitization.py::test_sanitize_none_values PASSED             [ 92%]\ntests/test_sanitization.py::test_sanitize_primitives PASSED              [ 92%]\ntests/test_sanitization.py::test_sanitize_max_depth PASSED               [ 92%]\ntests/test_sanitization.py::test_sanitize_mixed_case_keys PASSED         [ 93%]\ntests/test_sanitization.py::test_sanitize_partial_matches PASSED         [ 93%]\ntests/test_search_reservations.py::test_search_reservations_basic PASSED [ 93%]\ntests/test_search_reservations.py::test_search_reservations_parameters PASSED [ 94%]\ntests/test_search_reservations.py::test_search_reservations_default_values PASSED [ 94%]\ntests/test_search_reservations.py::test_search_reservations_with_pagination PASSED [ 94%]\ntests/test_search_reservations.py::test_search_reservations_date_format PASSED [ 95%]\ntests/test_search_reservations.py::test_search_reservations_output_schema PASSED [ 95%]\ntests/test_search_reservations.py::test_search_reservations_docstring PASSED [ 95%]\ntests/test_search_reservations.py::test_search_reservations_integration SKIPPED [ 96%]\ntests/test_search_reservations.py::test_search_reservations_by_date SKIPPED [ 96%]\ntests/test_search_reservations.py::test_search_reservations_by_status SKIPPED [ 96%]\ntests/test_search_units.py::test_search_units_exists PASSED              [ 97%]\ntests/test_search_units.py::test_search_units_parameters PASSED          [ 97%]\ntests/test_search_units.py::test_search_units_default_values PASSED      [ 97%]\ntests/test_search_units.py::test_search_units_output_schema PASSED       [ 98%]\ntests/test_search_units.py::test_search_units_docstring PASSED           [ 98%]\ntests/test_search_units.py::test_search_units_basic SKIPPED (API no ...) [ 98%]\ntests/test_search_units.py::test_search_units_by_bedrooms SKIPPED (A...) [ 99%]\ntests/test_search_units.py::test_search_units_by_bathrooms SKIPPED (...) [ 99%]\ntests/test_search_units.py::test_search_units_active_bookable SKIPPED    [ 99%]\ntests/test_search_units.py::test_search_units_combined_filters SKIPPED   [100%]\n\n================================== FAILURES ===================================\n___________ TestSearchUnitsAPIReal.test_search_units_basic_real_api ___________\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FB73D90>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002141FF11990>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_basic_real_api(self, mcp_client, api_credentials):\n        \"\"\"Test básico contra API real\"\"\"\n>       result = await mcp_client.call_tool(name=\"search_units\", arguments={})\n                       ^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:55: AttributeError\n________ TestSearchUnitsAPIReal.test_search_units_pagination_real_api _________\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FD502D0>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002141FF12E30>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_pagination_real_api(self, mcp_client, api_credentials):\n        \"\"\"Test de paginación contra API real\"\"\"\n        # Test primera página\n>       result1 = await mcp_client.call_tool(\n                        ^^^^^^^^^^^^^^^^^^^^\n            name=\"search_units\", arguments={\"page\": 1, \"size\": 5}\n        )\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:76: AttributeError\n__________ TestSearchUnitsAPIReal.test_search_units_filters_real_api __________\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FD408A0>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002141FF136A0>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_filters_real_api(self, mcp_client, api_credentials):\n        \"\"\"Test de filtros contra API real\"\"\"\n        # Test con diferentes filtros\n        test_cases = [\n            {\"bedrooms\": 1},\n            {\"bedrooms\": 2},\n            {\"bathrooms\": 1},\n            {\"bathrooms\": 2},\n            {\"is_active\": 1},\n            {\"is_bookable\": 1},\n            {\"bedrooms\": 2, \"bathrooms\": 1},\n            {\"is_active\": 1, \"is_bookable\": 1},\n        ]\n    \n        for filters in test_cases:\n>           result = await mcp_client.call_tool(name=\"search_units\", arguments=filters)\n                           ^^^^^^^^^^^^^^^^^^^^\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:109: AttributeError\n________ TestSearchUnitsAPIReal.test_search_units_search_text_real_api ________\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FD40B00>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002141FF13D30>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_search_text_real_api(self, mcp_client, api_credentials):\n        \"\"\"Test de búsqueda de texto contra API real\"\"\"\n        # Test con diferentes términos de búsqueda\n        search_terms = [\"casa\", \"apartment\", \"villa\", \"suite\", \"beach\", \"downtown\"]\n    \n        for term in search_terms:\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"search\": term}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:135: AttributeError\n________ TestSearchUnitsAPIReal.test_search_units_edge_cases_real_api _________\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FCA39B0>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002142015C6D0>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_edge_cases_real_api(self, mcp_client, api_credentials):\n        \"\"\"Test de casos límite contra API real\"\"\"\n        # Test con tamaño máximo\n>       result = await mcp_client.call_tool(name=\"search_units\", arguments={\"size\": 25})\n                       ^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:155: AttributeError\n__________ TestSearchUnitsAPIReal.test_search_units_unicode_real_api __________\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FD445A0>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002142015CE50>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_unicode_real_api(self, mcp_client, api_credentials):\n        \"\"\"Test de caracteres unicode contra API real\"\"\"\n        # Test con términos en español\n        spanish_terms = [\"casa\", \"apartamento\", \"villa\", \"playa\", \"centro\"]\n    \n        for term in spanish_terms:\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"search\": term}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:176: AttributeError\n________ TestSearchUnitsAPIReal.test_search_units_performance_real_api ________\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FD447C0>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002141FF118A0>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_performance_real_api(self, mcp_client, api_credentials):\n        \"\"\"Test de rendimiento contra API real\"\"\"\n        import time\n    \n        # Test de tiempo de respuesta\n        start_time = time.time()\n>       result = await mcp_client.call_tool(name=\"search_units\", arguments={\"size\": 10})\n                       ^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:198: AttributeError\n____ TestSearchUnitsAPIReal.test_search_units_concurrent_requests_real_api ____\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FCCF050>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002141FF12110>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_concurrent_requests_real_api(\n        self, mcp_client, api_credentials\n    ):\n        \"\"\"Test de requests concurrentes contra API real\"\"\"\n        # Ejecutar múltiples requests concurrentes\n        tasks = [\n>           mcp_client.call_tool(name=\"search_units\", arguments={\"page\": i, \"size\": 5})\n            ^^^^^^^^^^^^^^^^^^^^\n            for i in range(1, 6)\n        ]\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:218: AttributeError\n_____ TestSearchUnitsAPIReal.test_search_units_data_consistency_real_api ______\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FCCF250>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002141FF10E50>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_data_consistency_real_api(\n        self, mcp_client, api_credentials\n    ):\n        \"\"\"Test de consistencia de datos contra API real\"\"\"\n        # Hacer el mismo request múltiples veces\n        results = []\n        for i in range(3):\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"page\": 1, \"size\": 10}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:242: AttributeError\n______ TestSearchUnitsAPIReal.test_search_units_unit_structure_real_api _______\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FD485F0>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002142015CE50>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_unit_structure_real_api(\n        self, mcp_client, api_credentials\n    ):\n        \"\"\"Test de estructura de unidades contra API real\"\"\"\n>       result = await mcp_client.call_tool(name=\"search_units\", arguments={\"size\": 1})\n                       ^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:275: AttributeError\n______ TestSearchUnitsAPIReal.test_search_units_links_structure_real_api ______\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FD3E350>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002142015CD60>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_links_structure_real_api(\n        self, mcp_client, api_credentials\n    ):\n        \"\"\"Test de estructura de enlaces contra API real\"\"\"\n>       result = await mcp_client.call_tool(name=\"search_units\", arguments={})\n                       ^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:323: AttributeError\n_______ TestSearchUnitsAPIReal.test_search_units_comprehensive_real_api _______\n\nself = <test_search_units_api_real.TestSearchUnitsAPIReal object at 0x000002141FD3E890>\nmcp_client = <async_generator object TestSearchUnitsAPIReal.mcp_client at 0x000002142015D7B0>\napi_credentials = {'base_url': 'https://api-test.trackhs.com/api', 'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_search_units_comprehensive_real_api(\n        self, mcp_client, api_credentials\n    ):\n        \"\"\"Test comprensivo contra API real\"\"\"\n        # Test con todos los parámetros posibles\n>       result = await mcp_client.call_tool(\n                       ^^^^^^^^^^^^^^^^^^^^\n            name=\"search_units\",\n            arguments={\n                \"page\": 1,\n                \"size\": 10,\n                \"search\": \"test\",\n                \"bedrooms\": 2,\n                \"bathrooms\": 1,\n                \"is_active\": 1,\n                \"is_bookable\": 1,\n            },\n        )\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_api_real.py:347: AttributeError\n__________ TestSearchUnitsE2E.test_e2e_property_manager_search_flow ___________\n\nself = <test_search_units_e2e.TestSearchUnitsE2E object at 0x000002141FD50410>\nmcp_client = <async_generator object TestSearchUnitsE2E.mcp_client at 0x000002142015E2F0>\napi_credentials = {'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_e2e_property_manager_search_flow(self, mcp_client, api_credentials):\n        \"\"\"E2E: Flujo de búsqueda de un administrador de propiedades\"\"\"\n        # Escenario: Un administrador busca unidades disponibles para mostrar a clientes\n    \n        # 1. Búsqueda inicial de todas las unidades activas\n        print(\"\\U0001f50d Paso 1: B\\xfasqueda inicial de unidades activas\")\n>       result = await mcp_client.call_tool(\n                       ^^^^^^^^^^^^^^^^^^^^\n            name=\"search_units\", arguments={\"is_active\": 1, \"size\": 20}\n        )\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_e2e.py:58: AttributeError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f50d Paso 1: B\\xfasqueda inicial de unidades activas\n________________ TestSearchUnitsE2E.test_e2e_guest_search_flow ________________\n\nself = <test_search_units_e2e.TestSearchUnitsE2E object at 0x000002141FD50550>\nmcp_client = <async_generator object TestSearchUnitsE2E.mcp_client at 0x000002142015F010>\napi_credentials = {'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_e2e_guest_search_flow(self, mcp_client, api_credentials):\n        \"\"\"E2E: Flujo de búsqueda de un huésped\"\"\"\n        # Escenario: Un huésped busca alojamiento con características específicas\n    \n        # 1. Búsqueda por ubicación\n        print(\"\\U0001f50d Paso 1: B\\xfasqueda por ubicaci\\xf3n 'beach'\")\n>       result = await mcp_client.call_tool(\n                       ^^^^^^^^^^^^^^^^^^^^\n            name=\"search_units\",\n            arguments={\"search\": \"beach\", \"is_active\": 1, \"is_bookable\": 1},\n        )\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_e2e.py:105: AttributeError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f50d Paso 1: B\\xfasqueda por ubicaci\\xf3n 'beach'\n____________ TestSearchUnitsE2E.test_e2e_inventory_management_flow ____________\n\nself = <test_search_units_e2e.TestSearchUnitsE2E object at 0x000002141FD40C30>\nmcp_client = <async_generator object TestSearchUnitsE2E.mcp_client at 0x000002142015F790>\napi_credentials = {'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_e2e_inventory_management_flow(self, mcp_client, api_credentials):\n        \"\"\"E2E: Flujo de gestión de inventario\"\"\"\n        # Escenario: Gestión completa del inventario de unidades\n    \n        # 1. Obtener inventario completo\n        print(\"\\U0001f50d Paso 1: Obtener inventario completo\")\n        all_units = []\n        page = 1\n        total_pages = 1\n    \n        while page <= total_pages:\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"page\": page, \"size\": 25}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_e2e.py:167: AttributeError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f50d Paso 1: Obtener inventario completo\n_____________ TestSearchUnitsE2E.test_e2e_performance_stress_test _____________\n\nself = <test_search_units_e2e.TestSearchUnitsE2E object at 0x000002141FD40D60>\nmcp_client = <async_generator object TestSearchUnitsE2E.mcp_client at 0x000002142015FF10>\napi_credentials = {'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_e2e_performance_stress_test(self, mcp_client, api_credentials):\n        \"\"\"E2E: Test de rendimiento y estrés\"\"\"\n        # Escenario: Probar el rendimiento bajo carga\n    \n        print(\"\\U0001f680 Iniciando test de rendimiento...\")\n    \n        # 1. Test de requests secuenciales\n        print(\"\\U0001f50d Paso 1: Requests secuenciales\")\n        start_time = asyncio.get_event_loop().time()\n    \n        for i in range(10):\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"page\": 1, \"size\": 10}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_e2e.py:236: AttributeError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f680 Iniciando test de rendimiento...\\n\\U0001f50d Paso 1: Requests secuenciales\n_______________ TestSearchUnitsE2E.test_e2e_error_recovery_flow _______________\n\nself = <test_search_units_e2e.TestSearchUnitsE2E object at 0x000002141FD572F0>\nmcp_client = <async_generator object TestSearchUnitsE2E.mcp_client at 0x00000214201A4130>\napi_credentials = {'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_e2e_error_recovery_flow(self, mcp_client, api_credentials):\n        \"\"\"E2E: Flujo de recuperación de errores\"\"\"\n        # Escenario: Probar la robustez del sistema ante errores\n    \n        print(\"\\U0001f50d Paso 1: Test de par\\xe1metros inv\\xe1lidos\")\n    \n        # Test con parámetros inválidos\n        invalid_cases = [\n            {\"page\": 0},  # Página inválida\n            {\"size\": 0},  # Tamaño inválido\n            {\"bedrooms\": -1},  # Dormitorios inválidos\n            {\"bathrooms\": -1},  # Baños inválidos\n            {\"is_active\": 2},  # Estado inválido\n            {\"is_bookable\": 2},  # Disponibilidad inválida\n        ]\n    \n        for case in invalid_cases:\n            try:\n                await mcp_client.call_tool(name=\"search_units\", arguments=case)\n                assert False, f\"Debería haber fallado con {case}\"\n            except Exception as e:\n                print(f\"\\u2705 Error esperado con {case}: {type(e).__name__}\")\n    \n        # Test de recuperación después de errores\n        print(\"\\U0001f50d Paso 2: Test de recuperaci\\xf3n despu\\xe9s de errores\")\n    \n        # Después de los errores, el sistema debería seguir funcionando\n>       result = await mcp_client.call_tool(name=\"search_units\", arguments={})\n                       ^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_e2e.py:315: AttributeError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f50d Paso 1: Test de par\\xe1metros inv\\xe1lidos\\n\\u2705 Error esperado con {'page': 0}: AttributeError\\n\\u2705 Error esperado con {'size': 0}: AttributeError\\n\\u2705 Error esperado con {'bedrooms': -1}: AttributeError\\n\\u2705 Error esperado con {'bathrooms': -1}: AttributeError\\n\\u2705 Error esperado con {'is_active': 2}: AttributeError\\n\\u2705 Error esperado con {'is_bookable': 2}: AttributeError\\n\\U0001f50d Paso 2: Test de recuperaci\\xf3n despu\\xe9s de errores\n______________ TestSearchUnitsE2E.test_e2e_data_consistency_flow ______________\n\nself = <test_search_units_e2e.TestSearchUnitsE2E object at 0x000002141FD44F30>\nmcp_client = <async_generator object TestSearchUnitsE2E.mcp_client at 0x00000214201A4E50>\napi_credentials = {'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_e2e_data_consistency_flow(self, mcp_client, api_credentials):\n        \"\"\"E2E: Flujo de consistencia de datos\"\"\"\n        # Escenario: Verificar la consistencia de los datos\n    \n        print(\"\\U0001f50d Paso 1: Test de consistencia entre requests\")\n    \n        # Hacer el mismo request múltiples veces\n        results = []\n        for i in range(5):\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"page\": 1, \"size\": 10}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_e2e.py:331: AttributeError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f50d Paso 1: Test de consistencia entre requests\n_____________ TestSearchUnitsE2E.test_e2e_business_scenarios_flow _____________\n\nself = <test_search_units_e2e.TestSearchUnitsE2E object at 0x000002141FD45040>\nmcp_client = <async_generator object TestSearchUnitsE2E.mcp_client at 0x00000214201A55D0>\napi_credentials = {'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_e2e_business_scenarios_flow(self, mcp_client, api_credentials):\n        \"\"\"E2E: Escenarios de negocio reales\"\"\"\n        # Escenario: Simular escenarios de negocio reales\n    \n        print(\"\\U0001f3e2 Escenario 1: B\\xfasqueda para familia de 4\")\n>       family_result = await mcp_client.call_tool(\n                              ^^^^^^^^^^^^^^^^^^^^\n            name=\"search_units\",\n            arguments={\"bedrooms\": 2, \"bathrooms\": 2, \"is_active\": 1, \"is_bookable\": 1},\n        )\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_e2e.py:378: AttributeError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f3e2 Escenario 1: B\\xfasqueda para familia de 4\n______________ TestSearchUnitsE2E.test_e2e_complete_user_journey ______________\n\nself = <test_search_units_e2e.TestSearchUnitsE2E object at 0x000002141FCCF850>\nmcp_client = <async_generator object TestSearchUnitsE2E.mcp_client at 0x000002142015F6A0>\napi_credentials = {'password': 'test_password', 'username': 'test_user'}\n\n    @pytest.mark.asyncio\n    @pytest.mark.slow\n    async def test_e2e_complete_user_journey(self, mcp_client, api_credentials):\n        \"\"\"E2E: Viaje completo del usuario\"\"\"\n        # Escenario: Simular un viaje completo de un usuario\n    \n        print(\"\\U0001f464 Viaje completo del usuario: B\\xfasqueda de alojamiento\")\n    \n        # Paso 1: Búsqueda inicial\n        print(\"\\U0001f50d Paso 1: B\\xfasqueda inicial\")\n>       initial_result = await mcp_client.call_tool(\n                               ^^^^^^^^^^^^^^^^^^^^\n            name=\"search_units\",\n            arguments={\"is_active\": 1, \"is_bookable\": 1, \"size\": 20},\n        )\nE       AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_e2e.py:438: AttributeError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f464 Viaje completo del usuario: B\\xfasqueda de alojamiento\\n\\U0001f50d Paso 1: B\\xfasqueda inicial\n_______ TestSearchUnitsIntegration.test_search_units_basic_integration ________\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FD50A50>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x000002142015E020>\nmock_api_response = {'_embedded': {'units': [{'address': '123 Beach St, Miami, FL', 'amenities': ['WiFi', 'Pool', 'Parking', 'AC'], 'area'...{'href': '/pms/units?page=2&size=10'}, 'self': {'href': '/pms/units?page=1&size=10'}}, 'page': 1, 'page_count': 2, ...}\n\n    @pytest.mark.asyncio\n    async def test_search_units_basic_integration(self, mcp_client, mock_api_response):\n        \"\"\"Test de integración básica de search_units\"\"\"\n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_api_response\n    \n            # Llamar a la herramienta a través del cliente MCP\n>           result = await mcp_client.call_tool(name=\"search_units\", arguments={})\n                           ^^^^^^^^^^^^^^^^^^^^\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_integration.py:103: AttributeError\n____ TestSearchUnitsIntegration.test_search_units_with_filters_integration ____\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FB73ED0>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x000002142015F010>\nmock_api_response = {'_embedded': {'units': [{'address': '123 Beach St, Miami, FL', 'amenities': ['WiFi', 'Pool', 'Parking', 'AC'], 'area'...{'href': '/pms/units?page=2&size=10'}, 'self': {'href': '/pms/units?page=1&size=10'}}, 'page': 1, 'page_count': 2, ...}\n\n    @pytest.mark.asyncio\n    async def test_search_units_with_filters_integration(\n        self, mcp_client, mock_api_response\n    ):\n        \"\"\"Test de integración con filtros\"\"\"\n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_api_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\",\n                arguments={\n                    \"page\": 2,\n                    \"size\": 5,\n                    \"search\": \"penthouse\",\n                    \"bedrooms\": 2,\n                    \"bathrooms\": 2,\n                    \"is_active\": 1,\n                    \"is_bookable\": 1,\n                },\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_integration.py:124: AttributeError\n_____ TestSearchUnitsIntegration.test_search_units_middleware_integration _____\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FD40640>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x000002142015D6C0>\nmock_api_response = {'_embedded': {'units': [{'address': '123 Beach St, Miami, FL', 'amenities': ['WiFi', 'Pool', 'Parking', 'AC'], 'area'...{'href': '/pms/units?page=2&size=10'}, 'self': {'href': '/pms/units?page=1&size=10'}}, 'page': 1, 'page_count': 2, ...}\n\n    @pytest.mark.asyncio\n    async def test_search_units_middleware_integration(\n        self, mcp_client, mock_api_response\n    ):\n        \"\"\"Test de integración con middleware\"\"\"\n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_api_response\n    \n            # El middleware debería procesar este request\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"search\": \"beach\"}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_integration.py:170: AttributeError\n___ TestSearchUnitsIntegration.test_search_units_empty_response_integration ___\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FD44490>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x000002142015CC70>\n\n    @pytest.mark.asyncio\n    async def test_search_units_empty_response_integration(self, mcp_client):\n        \"\"\"Test de respuesta vacía en integración\"\"\"\n        empty_response = {\n            \"page\": 1,\n            \"page_count\": 0,\n            \"page_size\": 10,\n            \"total_items\": 0,\n            \"_embedded\": {\"units\": []},\n            \"_links\": {\"self\": {\"href\": \"/pms/units?page=1&size=10\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = empty_response\n    \n>           result = await mcp_client.call_tool(name=\"search_units\", arguments={})\n                           ^^^^^^^^^^^^^^^^^^^^\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_integration.py:205: AttributeError\n_____ TestSearchUnitsIntegration.test_search_units_pagination_integration _____\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FD44380>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x000002142015C6D0>\n\n    @pytest.mark.asyncio\n    async def test_search_units_pagination_integration(self, mcp_client):\n        \"\"\"Test de paginación en integración\"\"\"\n        page1_response = {\n            \"page\": 1,\n            \"page_count\": 3,\n            \"page_size\": 10,\n            \"total_items\": 25,\n            \"_embedded\": {\"units\": [{\"id\": i} for i in range(1, 11)]},\n            \"_links\": {\n                \"self\": {\"href\": \"/pms/units?page=1\"},\n                \"next\": {\"href\": \"/pms/units?page=2\"},\n                \"last\": {\"href\": \"/pms/units?page=3\"},\n            },\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = page1_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"page\": 1, \"size\": 10}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_integration.py:230: AttributeError\n_ TestSearchUnitsIntegration.test_search_units_concurrent_requests_integration _\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FCCEE50>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x000002141FF11990>\nmock_api_response = {'_embedded': {'units': [{'address': '123 Beach St, Miami, FL', 'amenities': ['WiFi', 'Pool', 'Parking', 'AC'], 'area'...{'href': '/pms/units?page=2&size=10'}, 'self': {'href': '/pms/units?page=1&size=10'}}, 'page': 1, 'page_count': 2, ...}\n\n    @pytest.mark.asyncio\n    async def test_search_units_concurrent_requests_integration(\n        self, mcp_client, mock_api_response\n    ):\n        \"\"\"Test de requests concurrentes en integración\"\"\"\n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_api_response\n    \n            # Ejecutar múltiples requests concurrentes\n            tasks = [\n>               mcp_client.call_tool(\n                ^^^^^^^^^^^^^^^^^^^^\n                    name=\"search_units\", arguments={\"search\": f\"test{i}\"}\n                )\n                for i in range(5)\n            ]\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_integration.py:249: AttributeError\n___ TestSearchUnitsIntegration.test_search_units_large_response_integration ___\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FCCFB50>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x000002141FF133D0>\n\n    @pytest.mark.asyncio\n    async def test_search_units_large_response_integration(self, mcp_client):\n        \"\"\"Test de respuesta grande en integración\"\"\"\n        large_response = {\n            \"page\": 1,\n            \"page_count\": 1,\n            \"page_size\": 25,\n            \"total_items\": 25,\n            \"_embedded\": {\n                \"units\": [\n                    {\n                        \"id\": i,\n                        \"name\": f\"Unit {i}\",\n                        \"code\": f\"U{i:03d}\",\n                        \"bedrooms\": 1,\n                        \"bathrooms\": 1,\n                        \"max_occupancy\": 2,\n                        \"area\": 50.0,\n                        \"address\": f\"{i} Test St\",\n                        \"amenities\": [\"WiFi\"],\n                        \"is_active\": True,\n                        \"is_bookable\": True,\n                    }\n                    for i in range(1, 26)\n                ]\n            },\n            \"_links\": {\"self\": {\"href\": \"/pms/units?page=1&size=25\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = large_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"size\": 25}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_integration.py:295: AttributeError\n______ TestSearchUnitsIntegration.test_search_units_unicode_integration _______\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FD48230>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x000002141FF12C50>\n\n    @pytest.mark.asyncio\n    async def test_search_units_unicode_integration(self, mcp_client):\n        \"\"\"Test de caracteres unicode en integración\"\"\"\n        unicode_response = {\n            \"page\": 1,\n            \"page_count\": 1,\n            \"page_size\": 10,\n            \"total_items\": 1,\n            \"_embedded\": {\n                \"units\": [\n                    {\n                        \"id\": 1,\n                        \"name\": \"Casa de Playa \\U0001f3d6\\ufe0f\",\n                        \"code\": \"CP001\",\n                        \"bedrooms\": 3,\n                        \"bathrooms\": 2,\n                        \"max_occupancy\": 6,\n                        \"area\": 120.5,\n                        \"address\": \"123 Playa del Sol, Cancún, México\",\n                        \"amenities\": [\"WiFi\", \"Piscina\", \"Aire Acondicionado\"],\n                        \"is_active\": True,\n                        \"is_bookable\": True,\n                    }\n                ]\n            },\n            \"_links\": {\"self\": {\"href\": \"/pms/units?page=1\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = unicode_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\", arguments={\"search\": \"playa\"}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_integration.py:333: AttributeError\n_ TestSearchUnitsIntegration.test_search_units_middleware_metrics_integration _\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FD48F50>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x00000214201A4B80>\nmock_api_response = {'_embedded': {'units': [{'address': '123 Beach St, Miami, FL', 'amenities': ['WiFi', 'Pool', 'Parking', 'AC'], 'area'...{'href': '/pms/units?page=2&size=10'}, 'self': {'href': '/pms/units?page=1&size=10'}}, 'page': 1, 'page_count': 2, ...}\n\n    @pytest.mark.asyncio\n    async def test_search_units_middleware_metrics_integration(\n        self, mcp_client, mock_api_response\n    ):\n        \"\"\"Test de métricas del middleware en integración\"\"\"\n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_api_response\n    \n            # Hacer múltiples requests para probar métricas\n            for i in range(3):\n>               await mcp_client.call_tool(\n                      ^^^^^^^^^^^^^^^^^^^^\n                    name=\"search_units\", arguments={\"search\": f\"test{i}\"}\n                )\nE               AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\search_units\\test_search_units_integration.py:351: AttributeError\n____ TestSearchUnitsIntegration.test_search_units_memory_usage_integration ____\n\nself = <test_search_units_integration.TestSearchUnitsIntegration object at 0x000002141FD39A50>\nmcp_client = <async_generator object TestSearchUnitsIntegration.mcp_client at 0x00000214201A54E0>\n\n    @pytest.mark.asyncio\n    async def test_search_units_memory_usage_integration(self, mcp_client):\n        \"\"\"Test de uso de memoria en integración\"\"\"\n        import os\n    \n>       import psutil\nE       ModuleNotFoundError: No module named 'psutil'\n\ntests\\search_units\\test_search_units_integration.py:391: ModuleNotFoundError\n_____________ TestCacheDecorator.test_cached_with_different_args ______________\n\nself = <tests.test_cache_and_metrics.TestCacheDecorator object at 0x000002141FD51BD0>\n\n    def test_cached_with_different_args(self):\n        \"\"\"Test decorator con argumentos diferentes\"\"\"\n        call_count = 0\n    \n        @cached(ttl=60)\n        def expensive_function(x, y=10):\n            nonlocal call_count\n            call_count += 1\n            return x + y\n    \n        # Act - Llamadas con argumentos diferentes\n        result1 = expensive_function(5, y=15)\n        result2 = expensive_function(5, y=20)  # Argumentos diferentes\n    \n        # Assert\n        assert result1 == 20\n        assert result2 == 25\n>       assert call_count == 2  # Se ejecutó dos veces\n        ^^^^^^^^^^^^^^^^^^^^^^\nE       assert 1 == 2\n\ntests\\test_cache_and_metrics.py:184: AssertionError\n_____________ TestPrometheusMetrics.test_export_prometheus_format _____________\n\nself = <tests.test_cache_and_metrics.TestPrometheusMetrics object at 0x000002141FD49E50>\nmetrics = <src.trackhs_mcp.metrics.PrometheusMetrics object at 0x0000021420082750>\n\n    def test_export_prometheus_format(self, metrics):\n        \"\"\"Test exportar formato Prometheus\"\"\"\n        # Arrange\n        metrics.increment_counter(\"test_counter\", {\"label\": \"value\"})\n        metrics.set_gauge(\"test_gauge\", 42.5)\n        metrics.observe_histogram(\"test_histogram\", 1.5)\n    \n        # Act\n        prometheus_output = metrics.export_prometheus_format()\n    \n        # Assert\n        assert \"# HELP test_counter\" in prometheus_output\n        assert \"# TYPE test_counter counter\" in prometheus_output\n        assert 'test_counter{label=\"value\"} 1' in prometheus_output\n        assert \"# HELP test_gauge\" in prometheus_output\n        assert \"# TYPE test_gauge gauge\" in prometheus_output\n>       assert 'test_gauge{label=\"value\"} 42.5' in prometheus_output\nE       assert 'test_gauge{label=\"value\"} 42.5' in '# HELP TrackHS MCP Server Metrics\\n# TYPE TrackHS MCP Server Metrics\\n\\n# HELP requests_total Total number of requests\\n# TYPE requests_total counter\\nrequests_total 0\\n\\n# HELP requests_by_method Requests by HTTP method\\n# TYPE requests_by_method counter\\nrequests_by_method 0\\n\\n# HELP errors_total Total number of errors\\n# TYPE errors_total counter\\nerrors_total 0\\n\\n# HELP active_requests Number of active requests\\n# TYPE active_requests gauge\\nactive_requests 0\\n\\n# HELP request_duration_seconds Request duration in seconds\\n# TYPE request_duration_seconds histogram\\n\\n# HELP trackhs_api_requests_total Total TrackHS API requests\\n# TYPE trackhs_api_requests_total counter\\ntrackhs_api_requests_total 0\\n\\n# HELP trackhs_api_errors_total Total TrackHS API errors\\n# TYPE trackhs_api_errors_total counter\\ntrackhs_api_errors_total 0\\n\\n# HELP trackhs_api_duration_seconds TrackHS API request duration\\n# TYPE trackhs_api_duration_seconds histogram\\n\\n# HELP cache_hits_total Total cache hits\\n# TYPE cache_hits_total counter\\ncache_hits_total 0\\n\\n# HELP cache_misses_total Total cache misses\\n# TYPE cache_misses_total counter\\ncache_misses_total 0\\n\\n# HELP cache_size Current cache size\\n# TYPE cache_size gauge\\ncache_size 0\\n\\n# HELP mcp_tools_called_total Total MCP tool calls\\n# TYPE mcp_tools_called_total counter\\nmcp_tools_called_total 0\\n\\n# HELP mcp_tool_duration_seconds MCP tool execution duration\\n# TYPE mcp_tool_duration_seconds histogram\\n\\n# HELP test_counter Counter metric: test_counter\\n# TYPE test_counter counter\\ntest_counter{label=\"value\"} 1.0\\n\\n# HELP test_gauge Gauge metric: test_gauge\\n# TYPE test_gauge gauge\\ntest_gauge 42.5\\n\\n# HELP test_histogram Histogram metric: test_histogram\\n# TYPE test_histogram histogram\\ntest_histogram_bucket{le=\"0.1\"} 0\\ntest_histogram_bucket{le=\"0.5\"} 0\\ntest_histogram_bucket{le=\"1.0\"} 0\\ntest_histogram_bucket{le=\"2.5\"} 1\\ntest_histogram_bucket{le=\"5.0\"} 1\\ntest_histogram_bucket{le=\"10.0\"} 1\\ntest_histogram_sum 1.5\\ntest_histogram_count 1\\n'\n\ntests\\test_cache_and_metrics.py:309: AssertionError\n______________ TestCacheKeyGeneration.test_cache_key_with_kwargs ______________\n\nself = <tests.test_cache_and_metrics.TestCacheKeyGeneration object at 0x000002141FD52350>\n\n    def test_cache_key_with_kwargs(self):\n        \"\"\"Test generar clave con argumentos con nombre\"\"\"\n        # Act\n        key = cache_key(\"test\", page=1, size=10, status=\"active\")\n    \n        # Assert\n        assert \"test\" in key\n        assert \"page:1\" in key\n        assert \"size:10\" in key\n>       assert 'status:\"active\"' in key\nE       assert 'status:\"active\"' in 'test:page:1:size:10:status:active'\n\ntests\\test_cache_and_metrics.py:360: AssertionError\n___________ TestCacheAndMetricsIntegration.test_performance_metrics ___________\n\nself = <tests.test_cache_and_metrics.TestCacheAndMetricsIntegration object at 0x000002141FD525D0>\n\n    def test_performance_metrics(self):\n        \"\"\"Test métricas de rendimiento\"\"\"\n        # Arrange\n        cache = IntelligentCache(max_size=100, default_ttl=60)\n        metrics = get_metrics()\n    \n        # Act - Simular operaciones de alto volumen\n        start_time = time.time()\n    \n        for i in range(100):\n            cache.set(f\"key_{i}\", f\"value_{i}\")\n            cache.get(f\"key_{i}\")\n    \n        duration = time.time() - start_time\n    \n        # Act - Registrar métricas de rendimiento\n        metrics.record_request(\"GET\", duration, 200)\n    \n        # Assert\n>       assert metrics.metrics[\"requests_total\"][\"value\"] == 1\nE       assert 2.0 == 1\n\ntests\\test_cache_and_metrics.py:419: AssertionError\n____________________ test_get_reservation_with_invalid_id _____________________\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/reservations/999999999', params = None\n\n    def get(self, endpoint: str, params: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        GET request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_params = sanitize_for_log(params)\n        logger.debug(f\"GET request to {full_url} with params: {sanitized_params}\")\n    \n        try:\n            response = self.client.get(full_url, params=params)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [302 Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Redirect response '302 Found' for url 'https://ihmvacations.trackhs.com/pms/reservations/999999999'\nE       Redirect location: '/?sessionRequired=1&returnPath=/pms/reservations/999999999'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nreservation_id = 999999999\n\n    @mcp.tool(output_schema=RESERVATION_DETAIL_OUTPUT_SCHEMA)\n    def get_reservation(\n        reservation_id: Annotated[\n            int, Field(gt=0, description=\"ID único de la reserva en TrackHS\")\n        ],\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Obtener detalles completos de una reserva específica por ID.\n    \n        Retorna información completa incluyendo:\n        - Datos del huésped (nombre, email, teléfono, dirección)\n        - Fechas de check-in/check-out\n        - Unidad asignada con detalles completos\n        - Estado de la reserva y historial\n        - Información de pago y balance\n        - Políticas aplicables (cancelación, depósito, etc.)\n        - Enlaces a recursos relacionados (folio, unidad, etc.)\n    \n        Útil para:\n        - Ver detalles completos de una reserva específica\n        - Verificar información antes de check-in\n        - Consultar historial y estado de reserva\n        - Obtener información de contacto del huésped\n        - Revisar políticas y términos aplicables\n    \n        Ejemplo de uso:\n        - get_reservation(reservation_id=12345) # Obtener detalles de reserva ID 12345\n        \"\"\"\n        try:\n            # Verificar que el repository esté disponible\n            if reservation_repo is None:\n                raise AuthenticationError(\"Repository de reservas no disponible. Verifique las credenciales.\")\n    \n            # Usar repository para obtener reserva\n>           result = reservation_repo.get_by_id(reservation_id)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nsrc\\trackhs_mcp\\server.py:609: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\repositories\\reservation_repository.py:53: in get_by_id\n    self._handle_api_error(e, f\"get_reservation_{reservation_id}\")\nsrc\\trackhs_mcp\\repositories\\reservation_repository.py:45: in get_by_id\n    result = self.api_client.get(f\"{self.base_endpoint}/{reservation_id}\")\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/reservations/999999999', params = None\n\n    def get(self, endpoint: str, params: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        GET request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_params = sanitize_for_log(params)\n        logger.debug(f\"GET request to {full_url} with params: {sanitized_params}\")\n    \n        try:\n            response = self.client.get(full_url, params=params)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/reservations/999999999 (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:236: NotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.integration\n    def test_get_reservation_with_invalid_id():\n        \"\"\"\n        Test con ID inválido.\n        Debe manejar el error apropiadamente.\n        \"\"\"\n        from src.trackhs_mcp.server import api_client, get_reservation\n    \n        if api_client is None:\n            pytest.skip(\"API client no disponible\")\n    \n        try:\n            # ID muy alto, probablemente no existe\n>           result = get_reservation.fn(reservation_id=999999999)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_get_reservation.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nreservation_id = 999999999\n\n    @mcp.tool(output_schema=RESERVATION_DETAIL_OUTPUT_SCHEMA)\n    def get_reservation(\n        reservation_id: Annotated[\n            int, Field(gt=0, description=\"ID único de la reserva en TrackHS\")\n        ],\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Obtener detalles completos de una reserva específica por ID.\n    \n        Retorna información completa incluyendo:\n        - Datos del huésped (nombre, email, teléfono, dirección)\n        - Fechas de check-in/check-out\n        - Unidad asignada con detalles completos\n        - Estado de la reserva y historial\n        - Información de pago y balance\n        - Políticas aplicables (cancelación, depósito, etc.)\n        - Enlaces a recursos relacionados (folio, unidad, etc.)\n    \n        Útil para:\n        - Ver detalles completos de una reserva específica\n        - Verificar información antes de check-in\n        - Consultar historial y estado de reserva\n        - Obtener información de contacto del huésped\n        - Revisar políticas y términos aplicables\n    \n        Ejemplo de uso:\n        - get_reservation(reservation_id=12345) # Obtener detalles de reserva ID 12345\n        \"\"\"\n        try:\n            # Verificar que el repository esté disponible\n            if reservation_repo is None:\n                raise AuthenticationError(\"Repository de reservas no disponible. Verifique las credenciales.\")\n    \n            # Usar repository para obtener reserva\n            result = reservation_repo.get_by_id(reservation_id)\n    \n            # Validar respuesta (modo no-strict: loguea pero no falla)\n            validated_result = validate_response(result, ReservationResponse, strict=False)\n    \n            return validated_result\n    \n        except NotFoundError:\n            # \\u2705 ToolError: Mensaje claro para el cliente (siempre se muestra)\n>           raise ToolError(\n                f\"Reserva {reservation_id} no encontrada en TrackHS. \"\n                f\"Verifique el ID e intente nuevamente.\"\n            )\nE           fastmcp.exceptions.ToolError: Reserva 999999999 no encontrada en TrackHS. Verifique el ID e intente nuevamente.\n\nsrc\\trackhs_mcp\\server.py:618: ToolError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.integration\n    def test_get_reservation_with_invalid_id():\n        \"\"\"\n        Test con ID inválido.\n        Debe manejar el error apropiadamente.\n        \"\"\"\n        from src.trackhs_mcp.server import api_client, get_reservation\n    \n        if api_client is None:\n            pytest.skip(\"API client no disponible\")\n    \n        try:\n            # ID muy alto, probablemente no existe\n            result = get_reservation.fn(reservation_id=999999999)\n    \n            # Si llega aquí, verificar que sea un error o respuesta vacía\n            assert result is not None\n    \n        except Exception as e:\n            # Se espera que lance excepción\n            error_msg = str(e).lower()\n>           assert (\n                \"404\" in str(e) or \"not found\" in error_msg or \"no encontrado\" in error_msg\n            )\nE           AssertionError: assert ('404' in 'Reserva 999999999 no encontrada en TrackHS. Verifique el ID e intente nuevamente.' or 'not found' in 'reserva 999999999 no encontrada en trackhs. verifique el id e intente nuevamente.' or 'no encontrado' in 'reserva 999999999 no encontrada en trackhs. verifique el id e intente nuevamente.')\nE            +  where 'Reserva 999999999 no encontrada en TrackHS. Verifique el ID e intente nuevamente.' = str(ToolError('Reserva 999999999 no encontrada en TrackHS. Verifique el ID e intente nuevamente.'))\n\ntests\\test_get_reservation.py:112: AssertionError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:232 HTTP Error 302 - https://ihmvacations.trackhs.com/pms/reservations/999999999\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in get_reservation_999999999: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/reservations/999999999 (respuesta HTML)\n_________________________ test_health_check_function __________________________\n\n    def test_health_check_function():\n        \"\"\"Verifica que la función health_check funciona correctamente\"\"\"\n        from src.trackhs_mcp.server import health_check\n    \n        # Llamar a la función subyacente\n        response = health_check.fn()\n    \n        # Verificar campos requeridos\n        assert \"status\" in response\n        assert \"timestamp\" in response\n>       assert \"version\" in response\nE       assert 'version' in '{\\n  \"status\": \"unhealthy\",\\n  \"timestamp\": \"2025-10-27T15:14:44.608335\",\\n  \"error\": \"Object of type MetricType is not JSON serializable\"\\n}'\n\ntests\\test_health.py:30: AssertionError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:232 HTTP Error 302 - https://ihmvacations.trackhs.com/pms/units/amenities\nWARNING  src.trackhs_mcp.server:server.py:1072 API TrackHS no disponible: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/units/amenities (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:1130 Error en health check: Object of type MetricType is not JSON serializable\n__________________________ test_health_check_version __________________________\n\n    def test_health_check_version():\n        \"\"\"Verifica que incluye versión correcta\"\"\"\n        from src.trackhs_mcp.server import health_check\n    \n        response = health_check.fn()\n    \n>       assert \"version\" in response\nE       assert 'version' in '{\\n  \"status\": \"unhealthy\",\\n  \"timestamp\": \"2025-10-27T15:14:45.161561\",\\n  \"error\": \"Object of type MetricType is not JSON serializable\"\\n}'\n\ntests\\test_health.py:60: AssertionError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:232 HTTP Error 302 - https://ihmvacations.trackhs.com/pms/units/amenities\nWARNING  src.trackhs_mcp.server:server.py:1072 API TrackHS no disponible: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/units/amenities (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:1130 Error en health check: Object of type MetricType is not JSON serializable\n_________________________ test_health_check_timestamp _________________________\n\n    def test_health_check_timestamp():\n        \"\"\"Verifica timestamp en formato ISO\"\"\"\n        from src.trackhs_mcp.server import health_check\n    \n        response = health_check.fn()\n    \n        assert \"timestamp\" in response\n    \n        # Verificar formato ISO\n        try:\n>           dt = datetime.fromisoformat(response[\"timestamp\"])\n                                        ^^^^^^^^^^^^^^^^^^^^^\nE           TypeError: string indices must be integers, not 'str'\n\ntests\\test_health.py:75: TypeError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:232 HTTP Error 302 - https://ihmvacations.trackhs.com/pms/units/amenities\nWARNING  src.trackhs_mcp.server:server.py:1072 API TrackHS no disponible: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/units/amenities (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:1130 Error en health check: Object of type MetricType is not JSON serializable\n_________ TestTrackHSIntegration.test_search_reservations_integration _________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002141FD52FD0>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x00000214201A4310>\n\n    @pytest.mark.asyncio\n    async def test_search_reservations_integration(self, mcp_client):\n        \"\"\"Test de integración para búsqueda de reservas\"\"\"\n        # Mock de respuesta de API\n        mock_response = {\n            \"page\": 0,\n            \"page_count\": 1,\n            \"page_size\": 10,\n            \"total_items\": 2,\n            \"_embedded\": {\n                \"reservations\": [\n                    {\n                        \"id\": 12345,\n                        \"confirmation_number\": \"CONF123\",\n                        \"guest_name\": \"John Doe\",\n                        \"guest_email\": \"john@example.com\",\n                        \"arrival_date\": \"2024-01-15\",\n                        \"departure_date\": \"2024-01-20\",\n                        \"status\": \"confirmed\",\n                        \"unit_id\": 100,\n                        \"total_amount\": 500.00,\n                        \"balance\": 0.00,\n                    }\n                ]\n            },\n            \"_links\": {\"self\": {\"href\": \"/reservations\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_response\n    \n            # Test de búsqueda básica\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_reservations\",\n                arguments={\"page\": 0, \"size\": 10, \"status\": \"confirmed\"},\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:62: AttributeError\n___________ TestTrackHSIntegration.test_get_reservation_integration ___________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002141FD53110>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x000002142015EA70>\n\n    @pytest.mark.asyncio\n    async def test_get_reservation_integration(self, mcp_client):\n        \"\"\"Test de integración para obtener reserva específica\"\"\"\n        mock_response = {\n            \"id\": 12345,\n            \"confirmation_number\": \"CONF123\",\n            \"guest\": {\n                \"name\": \"John Doe\",\n                \"email\": \"john@example.com\",\n                \"phone\": \"+1234567890\",\n                \"address\": \"123 Main St\",\n            },\n            \"dates\": {\n                \"arrival\": \"2024-01-15\",\n                \"departure\": \"2024-01-20\",\n                \"nights\": 5,\n            },\n            \"unit\": {\n                \"id\": 100,\n                \"name\": \"Luxury Villa\",\n                \"code\": \"LV001\",\n                \"bedrooms\": 3,\n                \"bathrooms\": 2,\n            },\n            \"status\": \"confirmed\",\n            \"financial\": {\n                \"total_amount\": 500.00,\n                \"balance\": 0.00,\n                \"deposit\": 100.00,\n            },\n            \"_links\": {\"folio\": {\"href\": \"/reservations/12345/folio\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"get_reservation\", arguments={\"reservation_id\": 12345}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:108: AttributeError\n____________ TestTrackHSIntegration.test_search_units_integration _____________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002141FD422C0>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x000002142015F3D0>\n\n    @pytest.mark.asyncio\n    async def test_search_units_integration(self, mcp_client):\n        \"\"\"Test de integración para búsqueda de unidades\"\"\"\n        mock_response = {\n            \"page\": 1,\n            \"page_count\": 1,\n            \"page_size\": 10,\n            \"total_items\": 1,\n            \"_embedded\": {\n                \"units\": [\n                    {\n                        \"id\": 100,\n                        \"name\": \"Luxury Villa\",\n                        \"code\": \"LV001\",\n                        \"bedrooms\": 3,\n                        \"bathrooms\": 2,\n                        \"max_occupancy\": 6,\n                        \"area\": 150.5,\n                        \"address\": \"123 Resort Way\",\n                        \"amenities\": [\"WiFi\", \"Pool\", \"AC\"],\n                        \"is_active\": True,\n                        \"is_bookable\": True,\n                    }\n                ]\n            },\n            \"_links\": {\"self\": {\"href\": \"/units\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.get.return_value = mock_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_units\",\n                arguments={\"bedrooms\": 3, \"bathrooms\": 2, \"is_active\": 1},\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:148: AttributeError\n____ TestTrackHSIntegration.test_create_maintenance_work_order_integration ____\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002141FD423F0>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x00000214201A62F0>\n\n    @pytest.mark.asyncio\n    async def test_create_maintenance_work_order_integration(self, mcp_client):\n        \"\"\"Test de integración para crear orden de mantenimiento\"\"\"\n        mock_response = {\n            \"id\": 789,\n            \"status\": \"pending\",\n            \"priority\": 3,\n            \"summary\": \"Reparar aire acondicionado\",\n            \"description\": \"AC no enfría correctamente\",\n            \"unit_id\": 100,\n            \"estimated_cost\": 150.0,\n            \"estimated_time\": 120,\n            \"date_received\": \"2024-01-15\",\n            \"assigned_to\": None,\n            \"vendor\": None,\n            \"_links\": {\"self\": {\"href\": \"/maintenance-work-orders/789\"}},\n        }\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = mock_response\n    \n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"create_maintenance_work_order\",\n                arguments={\n                    \"unit_id\": 100,\n                    \"summary\": \"Reparar aire acondicionado\",\n                    \"description\": \"AC no enfría correctamente\",\n                    \"priority\": 3,\n                    \"estimated_cost\": 150.0,\n                    \"estimated_time\": 120,\n                },\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:181: AttributeError\n_____________ TestTrackHSIntegration.test_middleware_integration ______________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002141FD47020>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x00000214201A46D0>\n\n    @pytest.mark.asyncio\n    async def test_middleware_integration(self, mcp_client):\n        \"\"\"Test de integración del middleware\"\"\"\n        # Verificar que el middleware está funcionando\n        # (esto se puede verificar a través de los logs)\n    \n        with patch(\"trackhs_mcp.server.api_client\") as mock_client:\n            mock_response = {\n                \"page\": 0,\n                \"page_count\": 1,\n                \"page_size\": 10,\n                \"total_items\": 0,\n                \"_embedded\": {\"reservations\": []},\n                \"_links\": {},\n            }\n            mock_client.get.return_value = mock_response\n    \n            # El middleware debería procesar este request\n>           result = await mcp_client.call_tool(\n                           ^^^^^^^^^^^^^^^^^^^^\n                name=\"search_reservations\", arguments={\"page\": 0, \"size\": 10}\n            )\nE           AttributeError: 'async_generator' object has no attribute 'call_tool'\n\ntests\\test_integration.py:239: AttributeError\n____________ TestTrackHSIntegration.test_health_check_integration _____________\n\nself = <tests.test_integration.TestTrackHSIntegration object at 0x000002141FD47130>\nmcp_client = <async_generator object TestTrackHSIntegration.mcp_client at 0x00000214201A65C0>\n\n    @pytest.mark.asyncio\n    async def test_health_check_integration(self, mcp_client):\n        \"\"\"Test de integración del health check\"\"\"\n        # Test del recurso de health check\n>       resources = await mcp_client.list_resources()\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AttributeError: 'async_generator' object has no attribute 'list_resources'\n\ntests\\test_integration.py:250: AttributeError\n___ TestMaintenanceWorkOrderValidation.test_required_parameters_validation ____\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderValidation object at 0x000002141FE35A90>\n\n    def test_required_parameters_validation(self):\n        \"\"\"Verifica que los parámetros requeridos son validados correctamente\"\"\"\n        # Test con parámetros mínimos requeridos\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Debe funcionar con parámetros mínimos\n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test summary\", description=\"Test description\"\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_________ TestMaintenanceWorkOrderValidation.test_unit_id_validation __________\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderValidation object at 0x000002141FE35BD0>\n\n    def test_unit_id_validation(self):\n        \"\"\"Verifica validación de unit_id\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # unit_id debe ser mayor que 0 - FastMCP valida esto a nivel de schema\n            # La validación ocurre antes de que se ejecute la función\n            with pytest.raises((ValueError, TypeError, AssertionError)):\n>               create_maintenance_work_order.fn(\n                    unit_id=0, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 0, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n>           raise ValidationError(\"unit_id debe ser mayor que 0\")\nE           src.trackhs_mcp.exceptions.ValidationError: unit_id debe ser mayor que 0\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:236: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: unit_id debe ser mayor que 0\n______ TestMaintenanceWorkOrderValidation.test_summary_length_validation ______\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderValidation object at 0x000002141FD42EA0>\n\n    def test_summary_length_validation(self):\n        \"\"\"Verifica validación de longitud de summary\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Summary muy corto\n            with pytest.raises(ValueError):\n>               create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"\", description=\"Test description\"\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = '', description = 'Test description', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n____ TestMaintenanceWorkOrderValidation.test_description_length_validation ____\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderValidation object at 0x000002141FD42FD0>\n\n    def test_description_length_validation(self):\n        \"\"\"Verifica validación de longitud de description\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Description muy corta\n            with pytest.raises(ValueError):\n>               create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test summary\", description=\"\"\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test summary', description = '', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n            raise ValidationError(\"summary debe tener al menos 5 caracteres\")\n    \n        if not description or len(description.strip()) < 10:\n>           raise ValidationError(\"description debe tener al menos 10 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: description debe tener al menos 10 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:242: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: description debe tener al menos 10 caracteres\n_________ TestMaintenanceWorkOrderValidation.test_priority_validation _________\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderValidation object at 0x000002141FDFCCB0>\n\n    def test_priority_validation(self):\n        \"\"\"Verifica validación de prioridad\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Prioridades válidas\n            for priority in [1, 3, 5]:\n>               result = create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\", priority=priority\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 1\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n______ TestMaintenanceWorkOrderValidation.test_estimated_cost_validation ______\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderValidation object at 0x000002141FE91260>\n\n    def test_estimated_cost_validation(self):\n        \"\"\"Verifica validación de costo estimado\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Costo válido\n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test\", description=\"Test\", estimated_cost=100.50\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = 100.5, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n______ TestMaintenanceWorkOrderValidation.test_estimated_time_validation ______\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderValidation object at 0x000002141FE91370>\n\n    def test_estimated_time_validation(self):\n        \"\"\"Verifica validación de tiempo estimado\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Tiempo válido\n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test\", description=\"Test\", estimated_time=120\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = 120\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n______ TestMaintenanceWorkOrderValidation.test_date_received_validation _______\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderValidation object at 0x000002141FD94950>\n\n    def test_date_received_validation(self):\n        \"\"\"Verifica validación de fecha de recepción\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Fecha válida\n>           result = create_maintenance_work_order.fn(\n                unit_id=123,\n                summary=\"Test\",\n                description=\"Test\",\n                date_received=\"2024-01-15\",\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n_ TestMaintenanceWorkOrderDataPreparation.test_data_structure_with_all_parameters _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-01-15', 'description': 'Grifo del baño principal gotea constantemente', 'estimatedCost': 150.0, 'estimatedTime': 90, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderDataPreparation object at 0x000002141FE35D10>\n\n    def test_data_structure_with_all_parameters(self):\n        \"\"\"Verifica estructura de datos con todos los parámetros\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=456,\n                summary=\"Fuga en grifo\",\n                description=\"Grifo del baño principal gotea constantemente\",\n                priority=3,\n                estimated_cost=150.0,\n                estimated_time=90,\n                date_received=\"2024-01-15\",\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-01-15', 'description': 'Grifo del baño principal gotea constantemente', 'estimatedCost': 150.0, 'estimatedTime': 90, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_456: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_ TestMaintenanceWorkOrderDataPreparation.test_data_structure_with_minimal_parameters _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderDataPreparation object at 0x000002141FE35E50>\n\n    def test_data_structure_with_minimal_parameters(self):\n        \"\"\"Verifica estructura de datos con parámetros mínimos\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=789, summary=\"Test summary\", description=\"Test description\"\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:207: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_789: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_____ TestMaintenanceWorkOrderDataPreparation.test_default_date_received ______\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderDataPreparation object at 0x000002141FD43100>\n\n    def test_default_date_received(self):\n        \"\"\"Verifica que se usa la fecha actual cuando no se proporciona date_received\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            with patch(\"src.trackhs_mcp.server.datetime\") as mock_datetime:\n                mock_datetime.now.return_value.strftime.return_value = \"2024-01-20\"\n    \n>               result = create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:232: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n_____ TestMaintenanceWorkOrderErrorHandling.test_api_client_not_available _____\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderErrorHandling object at 0x000002141FE35F90>\n\n    def test_api_client_not_available(self):\n        \"\"\"Verifica manejo cuando api_client no está disponible\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\", None):\n            with pytest.raises(AuthenticationError):\n>               create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n________ TestMaintenanceWorkOrderErrorHandling.test_api_error_handling ________\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderErrorHandling object at 0x000002141FE360D0>\n\n    def test_api_error_handling(self):\n        \"\"\"Verifica manejo de errores de API\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.side_effect = APIError(\"Error de API\")\n    \n            with pytest.raises(APIError):\n>               create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:258: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n__ TestMaintenanceWorkOrderErrorHandling.test_authentication_error_handling ___\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderErrorHandling object at 0x000002141FD43230>\n\n    def test_authentication_error_handling(self):\n        \"\"\"Verifica manejo de errores de autenticación\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.side_effect = AuthenticationError(\"Credenciales inválidas\")\n    \n            with pytest.raises(AuthenticationError):\n>               create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n_ TestMaintenanceWorkOrderResponseValidation.test_successful_response_validation _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderResponseValidation object at 0x000002141FE36210>\n\n    def test_successful_response_validation(self):\n        \"\"\"Verifica validación de respuesta exitosa\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_response = {\n                \"id\": 123,\n                \"status\": \"pending\",\n                \"unitId\": 456,\n                \"priority\": 3,\n                \"summary\": \"Test summary\",\n                \"description\": \"Test description\",\n            }\n            mock_client.post.return_value = mock_response\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=456, summary=\"Test summary\", description=\"Test description\"\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:309: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_456: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_ TestMaintenanceWorkOrderResponseValidation.test_response_validation_with_extra_fields _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderResponseValidation object at 0x000002141FE36350>\n\n    def test_response_validation_with_extra_fields(self):\n        \"\"\"Verifica que campos adicionales en la respuesta son manejados\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_response = {\n                \"id\": 123,\n                \"status\": \"pending\",\n                \"unitId\": 456,\n                \"priority\": 3,\n                \"summary\": \"Test summary\",\n                \"description\": \"Test description\",\n                \"extraField\": \"extra_value\",\n                \"anotherField\": 999,\n            }\n            mock_client.post.return_value = mock_response\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=456, summary=\"Test summary\", description=\"Test description\"\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:331: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_456: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n____________ TestMaintenanceWorkOrderLogging.test_success_logging _____________\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderLogging object at 0x000002141FE36490>\n\n    def test_success_logging(self):\n        \"\"\"Verifica logging de éxito\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_response = {\"id\": 123, \"status\": \"pending\"}\n            mock_client.post.return_value = mock_response\n    \n            with patch(\"src.trackhs_mcp.server.logger\") as mock_logger:\n>               result = create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:350: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n_____________ TestMaintenanceWorkOrderLogging.test_error_logging ______________\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderLogging object at 0x000002141FE365D0>\n\n    def test_error_logging(self):\n        \"\"\"Verifica logging de errores\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.side_effect = Exception(\"Error de prueba\")\n    \n            with patch(\"src.trackhs_mcp.server.logger\") as mock_logger:\n                with pytest.raises(Exception):\n                    create_maintenance_work_order.fn(\n                        unit_id=123, summary=\"Test\", description=\"Test\"\n                    )\n    \n                # Verificar que se logueó el error\n>               mock_logger.error.assert_called_with(\n                    \"Error creando orden de mantenimiento: Error de prueba\"\n                )\n\ntests\\test_maintenance_work_order_comprehensive.py:374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <MagicMock name='logger.error' id='2285461045664'>\nargs = ('Error creando orden de mantenimiento: Error de prueba',), kwargs = {}\nexpected = call('Error creando orden de mantenimiento: Error de prueba')\nactual = call('Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres')\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x0000021420298E00>\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: error('Error creando orden de mantenimiento: Error de prueba')\nE             Actual: error('Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres')\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:979: AssertionError\n__________ TestMaintenanceWorkOrderEdgeCases.test_very_long_summary ___________\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderEdgeCases object at 0x000002141FE36710>\n\n    def test_very_long_summary(self):\n        \"\"\"Verifica manejo de summary en el límite de longitud\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Summary de exactamente 500 caracteres (límite máximo)\n            max_summary = \"x\" * 500\n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=max_summary, description=\"Test description\"\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:389: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n________ TestMaintenanceWorkOrderEdgeCases.test_very_long_description _________\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderEdgeCases object at 0x000002141FE36850>\n\n    def test_very_long_description(self):\n        \"\"\"Verifica manejo de description en el límite de longitud\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Description de exactamente 5000 caracteres (límite máximo)\n            max_description = \"x\" * 5000\n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test summary\", description=max_description\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:401: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_________ TestMaintenanceWorkOrderEdgeCases.test_zero_estimated_cost __________\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderEdgeCases object at 0x000002141FD43490>\n\n    def test_zero_estimated_cost(self):\n        \"\"\"Verifica manejo de costo estimado cero\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test\", description=\"Test\", estimated_cost=0.0\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:411: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = 0.0, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n_________ TestMaintenanceWorkOrderEdgeCases.test_zero_estimated_time __________\n\nself = <tests.test_maintenance_work_order_comprehensive.TestMaintenanceWorkOrderEdgeCases object at 0x000002141FD435C0>\n\n    def test_zero_estimated_time(self):\n        \"\"\"Verifica manejo de tiempo estimado cero\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test\", description=\"Test\", estimated_time=0\n            )\n\ntests\\test_maintenance_work_order_comprehensive.py:421: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = 0\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n__ TestMaintenanceWorkOrderIntegration.test_parameter_validation_integration __\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-01-20', 'description': 'Fuga en grifo principal del baño', 'estimatedCost': 200.0, 'estimatedTime': 180, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_integration.TestMaintenanceWorkOrderIntegration object at 0x000002141FD43820>\n\n    def test_parameter_validation_integration(self):\n        \"\"\"Test de validación de parámetros en contexto de integración\"\"\"\n        # Test con parámetros válidos\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Test con todos los parámetros\n>           result = create_maintenance_work_order.fn(\n                unit_id=456,\n                summary=\"Reparación de plomería\",\n                description=\"Fuga en grifo principal del baño\",\n                priority=5,\n                estimated_cost=200.0,\n                estimated_time=180,\n                date_received=\"2024-01-20\",\n            )\n\ntests\\test_maintenance_work_order_integration.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-01-20', 'description': 'Fuga en grifo principal del baño', 'estimatedCost': 200.0, 'estimatedTime': 180, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_456: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_ TestMaintenanceWorkOrderIntegration.test_different_priority_levels_integration _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Limpieza de filtros de aire acondicionado', 'priority': 1, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_integration.TestMaintenanceWorkOrderIntegration object at 0x000002141FE756D0>\n\n    def test_different_priority_levels_integration(self):\n        \"\"\"Test de diferentes niveles de prioridad\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Test prioridad baja\n>           result = create_maintenance_work_order.fn(\n                unit_id=123,\n                summary=\"Mantenimiento preventivo\",\n                description=\"Limpieza de filtros de aire acondicionado\",\n                priority=1,\n            )\n\ntests\\test_maintenance_work_order_integration.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Limpieza de filtros de aire acondicionado', 'priority': 1, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_ TestMaintenanceWorkOrderIntegration.test_cost_and_time_estimation_integration _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Reemplazo de termostato defectuoso', 'estimatedCost': 350.0, 'estimatedTime': 240, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_integration.TestMaintenanceWorkOrderIntegration object at 0x000002141FE91590>\n\n    def test_cost_and_time_estimation_integration(self):\n        \"\"\"Test de estimación de costos y tiempos\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Test con costo y tiempo\n>           result = create_maintenance_work_order.fn(\n                unit_id=123,\n                summary=\"Reparación de calentador\",\n                description=\"Reemplazo de termostato defectuoso\",\n                estimated_cost=350.0,\n                estimated_time=240,  # 4 horas\n            )\n\ntests\\test_maintenance_work_order_integration.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Reemplazo de termostato defectuoso', 'estimatedCost': 350.0, 'estimatedTime': 240, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_____ TestMaintenanceWorkOrderIntegration.test_date_handling_integration ______\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-02-15', 'description': 'Test de manejo de fechas', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_integration.TestMaintenanceWorkOrderIntegration object at 0x000002141FE916A0>\n\n    def test_date_handling_integration(self):\n        \"\"\"Test de manejo de fechas\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Test con fecha específica\n>           result = create_maintenance_work_order.fn(\n                unit_id=123,\n                summary=\"Test con fecha\",\n                description=\"Test de manejo de fechas\",\n                date_received=\"2024-02-15\",\n            )\n\ntests\\test_maintenance_work_order_integration.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-02-15', 'description': 'Test de manejo de fechas', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n______ TestMaintenanceWorkOrderPerformance.test_response_time_simulation ______\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test de tiempo de respuesta', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_integration.TestMaintenanceWorkOrderPerformance object at 0x000002141FE36C10>\n\n    def test_response_time_simulation(self):\n        \"\"\"Simula tiempos de respuesta\"\"\"\n        import time\n    \n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            # Simular respuesta lenta\n            def slow_response(*args, **kwargs):\n                time.sleep(0.1)  # 100ms\n                return {\"id\": 123, \"status\": \"pending\"}\n    \n            mock_client.post.side_effect = slow_response\n    \n            start_time = time.time()\n>           result = create_maintenance_work_order.fn(\n                unit_id=123,\n                summary=\"Test de rendimiento\",\n                description=\"Test de tiempo de respuesta\",\n            )\n\ntests\\test_maintenance_work_order_integration.py:261: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test de tiempo de respuesta', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n______ TestMaintenanceWorkOrderPerformance.test_memory_usage_simulation _______\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Descripción detallada Descripción detallada Descripción detallada Descr...detallada Descripción detallada Descripción detallada Descripción detallada ', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_integration.TestMaintenanceWorkOrderPerformance object at 0x000002141FE36D50>\n\n    def test_memory_usage_simulation(self):\n        \"\"\"Simula uso de memoria con datos grandes\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Test con descripción muy larga\n            long_description = \"Descripción detallada \" * 200  # ~5000 caracteres\n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test de memoria\", description=long_description\n            )\n\ntests\\test_maintenance_work_order_integration.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Descripción detallada Descripción detallada Descripción detallada Descr...detallada Descripción detallada Descripción detallada Descripción detallada ', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_ TestMaintenanceWorkOrderDataPreparation.test_data_structure_with_all_parameters _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-01-15', 'description': 'Grifo del baño principal gotea constantemente', 'estimatedCost': 150.0, 'estimatedTime': 90, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderDataPreparation object at 0x000002141FE37750>\n\n    def test_data_structure_with_all_parameters(self):\n        \"\"\"Verifica estructura de datos con todos los parámetros\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=456,\n                summary=\"Fuga en grifo\",\n                description=\"Grifo del baño principal gotea constantemente\",\n                priority=3,\n                estimated_cost=150.0,\n                estimated_time=90,\n                date_received=\"2024-01-15\",\n            )\n\ntests\\test_maintenance_work_order_practical.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-01-15', 'description': 'Grifo del baño principal gotea constantemente', 'estimatedCost': 150.0, 'estimatedTime': 90, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_456: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_ TestMaintenanceWorkOrderDataPreparation.test_data_structure_with_minimal_parameters _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderDataPreparation object at 0x000002141FE37890>\n\n    def test_data_structure_with_minimal_parameters(self):\n        \"\"\"Verifica estructura de datos con parámetros mínimos\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=789, summary=\"Test summary\", description=\"Test description\"\n            )\n\ntests\\test_maintenance_work_order_practical.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_789: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_____ TestMaintenanceWorkOrderDataPreparation.test_default_date_received ______\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderDataPreparation object at 0x000002141FD43A80>\n\n    def test_default_date_received(self):\n        \"\"\"Verifica que se usa la fecha actual cuando no se proporciona date_received\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            with patch(\"src.trackhs_mcp.server.datetime\") as mock_datetime:\n                mock_datetime.now.return_value.strftime.return_value = \"2024-01-20\"\n    \n>               result = create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_practical.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n__ TestMaintenanceWorkOrderDataPreparation.test_optional_parameters_handling __\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderDataPreparation object at 0x000002141FD43BB0>\n\n    def test_optional_parameters_handling(self):\n        \"\"\"Verifica manejo de parámetros opcionales\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Test con estimated_cost pero sin estimated_time\n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test\", description=\"Test\", estimated_cost=100.0\n            )\n\ntests\\test_maintenance_work_order_practical.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = 100.0, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n_____ TestMaintenanceWorkOrderErrorHandling.test_api_client_not_available _____\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderErrorHandling object at 0x000002141FE379D0>\n\n    def test_api_client_not_available(self):\n        \"\"\"Verifica manejo cuando api_client no está disponible\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\", None):\n            with pytest.raises(AuthenticationError):\n>               create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_practical.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n________ TestMaintenanceWorkOrderErrorHandling.test_api_error_handling ________\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderErrorHandling object at 0x000002141FE37B10>\n\n    def test_api_error_handling(self):\n        \"\"\"Verifica manejo de errores de API\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.side_effect = APIError(\"Error de API\")\n    \n            with pytest.raises(APIError):\n>               create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_practical.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n__ TestMaintenanceWorkOrderErrorHandling.test_authentication_error_handling ___\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderErrorHandling object at 0x000002141FD43CE0>\n\n    def test_authentication_error_handling(self):\n        \"\"\"Verifica manejo de errores de autenticación\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.side_effect = AuthenticationError(\"Credenciales inválidas\")\n    \n            with pytest.raises(AuthenticationError):\n>               create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_practical.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n_ TestMaintenanceWorkOrderResponseValidation.test_successful_response_validation _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderResponseValidation object at 0x000002141FE37C50>\n\n    def test_successful_response_validation(self):\n        \"\"\"Verifica validación de respuesta exitosa\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_response = {\n                \"id\": 123,\n                \"status\": \"pending\",\n                \"unitId\": 456,\n                \"priority\": 3,\n                \"summary\": \"Test summary\",\n                \"description\": \"Test description\",\n            }\n            mock_client.post.return_value = mock_response\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=456, summary=\"Test summary\", description=\"Test description\"\n            )\n\ntests\\test_maintenance_work_order_practical.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_456: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_ TestMaintenanceWorkOrderResponseValidation.test_response_validation_with_extra_fields _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderResponseValidation object at 0x000002141FE37D90>\n\n    def test_response_validation_with_extra_fields(self):\n        \"\"\"Verifica que campos adicionales en la respuesta son manejados\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_response = {\n                \"id\": 123,\n                \"status\": \"pending\",\n                \"unitId\": 456,\n                \"priority\": 3,\n                \"summary\": \"Test summary\",\n                \"description\": \"Test description\",\n                \"extraField\": \"extra_value\",\n                \"anotherField\": 999,\n            }\n            mock_client.post.return_value = mock_response\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=456, summary=\"Test summary\", description=\"Test description\"\n            )\n\ntests\\test_maintenance_work_order_practical.py:250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_456: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n____________ TestMaintenanceWorkOrderLogging.test_success_logging _____________\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderLogging object at 0x000002141FE37ED0>\n\n    def test_success_logging(self):\n        \"\"\"Verifica logging de éxito\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_response = {\"id\": 123, \"status\": \"pending\"}\n            mock_client.post.return_value = mock_response\n    \n            with patch(\"src.trackhs_mcp.server.logger\") as mock_logger:\n>               result = create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_practical.py:269: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n_____________ TestMaintenanceWorkOrderLogging.test_error_logging ______________\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderLogging object at 0x000002141FF2C050>\n\n    def test_error_logging(self):\n        \"\"\"Verifica logging de errores\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.side_effect = Exception(\"Error de prueba\")\n    \n            with patch(\"src.trackhs_mcp.server.logger\") as mock_logger:\n                with pytest.raises(Exception):\n                    create_maintenance_work_order.fn(\n                        unit_id=123, summary=\"Test\", description=\"Test\"\n                    )\n    \n                # Verificar que se logueó el error\n>               mock_logger.error.assert_called_with(\n                    \"Error creando orden de mantenimiento: Error de prueba\"\n                )\n\ntests\\test_maintenance_work_order_practical.py:293: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <MagicMock name='logger.error' id='2285461055744'>\nargs = ('Error creando orden de mantenimiento: Error de prueba',), kwargs = {}\nexpected = call('Error creando orden de mantenimiento: Error de prueba')\nactual = call('Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres')\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x000002142029B560>\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: error('Error creando orden de mantenimiento: Error de prueba')\nE             Actual: error('Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres')\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:979: AssertionError\n__________ TestMaintenanceWorkOrderEdgeCases.test_very_long_summary ___________\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderEdgeCases object at 0x000002141FF2C190>\n\n    def test_very_long_summary(self):\n        \"\"\"Verifica manejo de summary en el límite de longitud\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Summary de exactamente 500 caracteres (límite máximo)\n            max_summary = \"x\" * 500\n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=max_summary, description=\"Test description\"\n            )\n\ntests\\test_maintenance_work_order_practical.py:308: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'Test description', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n________ TestMaintenanceWorkOrderEdgeCases.test_very_long_description _________\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderEdgeCases object at 0x000002141FF2C2D0>\n\n    def test_very_long_description(self):\n        \"\"\"Verifica manejo de description en el límite de longitud\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Description de exactamente 5000 caracteres (límite máximo)\n            max_description = \"x\" * 5000\n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test summary\", description=max_description\n            )\n\ntests\\test_maintenance_work_order_practical.py:320: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2025-10-27', 'description': 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'priority': 3, 'status': 'pending', ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_123: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_________ TestMaintenanceWorkOrderEdgeCases.test_zero_estimated_cost __________\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderEdgeCases object at 0x000002141FEE8050>\n\n    def test_zero_estimated_cost(self):\n        \"\"\"Verifica manejo de costo estimado cero\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test\", description=\"Test\", estimated_cost=0.0\n            )\n\ntests\\test_maintenance_work_order_practical.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = 0.0, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n_________ TestMaintenanceWorkOrderEdgeCases.test_zero_estimated_time __________\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderEdgeCases object at 0x000002141FEE8180>\n\n    def test_zero_estimated_time(self):\n        \"\"\"Verifica manejo de tiempo estimado cero\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n>           result = create_maintenance_work_order.fn(\n                unit_id=123, summary=\"Test\", description=\"Test\", estimated_time=0\n            )\n\ntests\\test_maintenance_work_order_practical.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = 0\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n_________ TestMaintenanceWorkOrderEdgeCases.test_different_priorities _________\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderEdgeCases object at 0x000002141FF88950>\n\n    def test_different_priorities(self):\n        \"\"\"Verifica manejo de diferentes prioridades\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            mock_client.post.return_value = {\"id\": 123, \"status\": \"pending\"}\n    \n            # Test todas las prioridades válidas\n            for priority in [1, 3, 5]:\n>               result = create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\", priority=priority\n                )\n\ntests\\test_maintenance_work_order_practical.py:352: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 1\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n____ TestMaintenanceWorkOrderIntegration.test_complete_workflow_simulation ____\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-01-15', 'description': 'AC no enfría, revisar termostato y compresor', 'estimatedCost': 150.0, 'estimatedTime': 120, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n>           response.raise_for_status()\n\nsrc\\trackhs_mcp\\server.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [404 Not Found]>\n\n    def raise_for_status(self) -> Response:\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '404 Not Found' for url 'https://ihmvacations.trackhs.com/pms/maintenance/work-orders'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\httpx\\_models.py:829: HTTPStatusError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderIntegration object at 0x000002141FF2C410>\n\n    def test_complete_workflow_simulation(self):\n        \"\"\"Simula un flujo completo de creación de orden\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            # Simular respuesta exitosa de la API\n            mock_response = {\n                \"id\": 789,\n                \"status\": \"pending\",\n                \"unitId\": 456,\n                \"priority\": 5,\n                \"summary\": \"Aire acondicionado no funciona\",\n                \"description\": \"AC no enfría, revisar termostato y compresor\",\n                \"estimatedCost\": 150.0,\n                \"estimatedTime\": 120,\n                \"dateReceived\": \"2024-01-15\",\n                \"assignedTo\": None,\n                \"vendor\": None,\n            }\n            mock_client.post.return_value = mock_response\n    \n            # Crear orden de mantenimiento\n>           result = create_maintenance_work_order.fn(\n                unit_id=456,\n                summary=\"Aire acondicionado no funciona\",\n                description=\"AC no enfría, revisar termostato y compresor\",\n                priority=5,\n                estimated_cost=150.0,\n                estimated_time=120,\n                date_received=\"2024-01-15\",\n            )\n\ntests\\test_maintenance_work_order_practical.py:385: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:165: in create_maintenance_work_order\n    self._handle_api_error(e, f\"create_maintenance_work_order_{unit_id}\")\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:157: in create_maintenance_work_order\n    result = self.api_client.post(self.maintenance_endpoint, work_order_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.server.TrackHSClient object at 0x000002141FDCD010>\nendpoint = 'pms/maintenance/work-orders'\ndata = {'dateReceived': '2024-01-15', 'description': 'AC no enfría, revisar termostato y compresor', 'estimatedCost': 150.0, 'estimatedTime': 120, ...}\n\n    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"\n        POST request to TrackHS API with error handling.\n    \n        Reintentos automáticos manejados por FastMCP RetryMiddleware.\n        \"\"\"\n        full_url = f\"{self.base_url}/{endpoint}\"\n        sanitized_data = sanitize_for_log(data)\n        logger.debug(f\"POST request to {full_url} with data: {sanitized_data}\")\n    \n        try:\n            response = self.client.post(full_url, json=data)\n            logger.debug(f\"Response status: {response.status_code}\")\n    \n            response.raise_for_status()\n    \n            # Parsear respuesta\n            response_data = response.json()\n            sanitized_response = sanitize_for_log(response_data)\n            logger.debug(f\"Response preview: {str(sanitized_response)[:300]}\")\n    \n            return response_data\n    \n        except httpx.HTTPStatusError as e:\n            logger.error(f\"HTTP Error {e.response.status_code} - {full_url}\")\n    \n            # Check if response is HTML\n            if \"text/html\" in e.response.headers.get(\"content-type\", \"\"):\n>               raise NotFoundError(\n                    f\"Endpoint no encontrado: {full_url} (respuesta HTML)\"\n                )\nE               src.trackhs_mcp.exceptions.NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n\nsrc\\trackhs_mcp\\server.py:294: NotFoundError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:290 HTTP Error 404 - https://ihmvacations.trackhs.com/pms/maintenance/work-orders\nERROR    src.trackhs_mcp.repositories.base:base.py:72 Error in create_maintenance_work_order_456: NotFoundError: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: Endpoint no encontrado: https://ihmvacations.trackhs.com/pms/maintenance/work-orders (respuesta HTML)\n_____ TestMaintenanceWorkOrderIntegration.test_error_recovery_simulation ______\n\nself = <tests.test_maintenance_work_order_practical.TestMaintenanceWorkOrderIntegration object at 0x000002141FF2C550>\n\n    def test_error_recovery_simulation(self):\n        \"\"\"Simula recuperación de errores\"\"\"\n        with patch(\"src.trackhs_mcp.server.api_client\") as mock_client:\n            # Simular error de API primero\n            mock_client.post.side_effect = APIError(\"Error temporal de API\")\n    \n            with pytest.raises(APIError):\n>               create_maintenance_work_order.fn(\n                    unit_id=123, summary=\"Test\", description=\"Test\"\n                )\n\ntests\\test_maintenance_work_order_practical.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\trackhs_mcp\\server.py:907: in create_maintenance_work_order\n    result = work_order_repo.create_maintenance_work_order(\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:137: in create_maintenance_work_order\n    self._validate_maintenance_work_order(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x000002141FDCD400>\nunit_id = 123, summary = 'Test', description = 'Test', priority = 3\nestimated_cost = None, estimated_time = None\n\n    def _validate_maintenance_work_order(\n        self,\n        unit_id: int,\n        summary: str,\n        description: str,\n        priority: int,\n        estimated_cost: Optional[float],\n        estimated_time: Optional[int]\n    ) -> None:\n        \"\"\"Validar datos de orden de mantenimiento\"\"\"\n        if unit_id <= 0:\n            raise ValidationError(\"unit_id debe ser mayor que 0\")\n    \n        if not summary or len(summary.strip()) < 5:\n>           raise ValidationError(\"summary debe tener al menos 5 caracteres\")\nE           src.trackhs_mcp.exceptions.ValidationError: summary debe tener al menos 5 caracteres\n\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py:239: ValidationError\n------------------------------ Captured log call ------------------------------\nERROR    src.trackhs_mcp.server:server.py:925 Error creando orden de mantenimiento: summary debe tener al menos 5 caracteres\n________ TestTrackHSAuthMiddleware.test_check_authentication_no_client ________\n\nself = <tests.test_middleware.TestTrackHSAuthMiddleware object at 0x000002141FEE8770>\n\n    def test_check_authentication_no_client(self):\n        \"\"\"Test verificación sin cliente API\"\"\"\n        # Arrange\n        middleware = TrackHSAuthMiddleware(None)\n    \n        # Act & Assert\n        with pytest.raises(AuthenticationError):\n>           middleware._check_authentication()\n\ntests\\test_middleware.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.middleware_native.TrackHSAuthMiddleware object at 0x000002142026AEA0>\n\n    def _check_authentication(self) -> bool:\n        \"\"\"Verificar autenticación con cache\"\"\"\n        if self.api_client is None:\n            # En modo testing, permitir sin autenticación\n>           if os.getenv(\"TESTING\") == \"1\" or os.getenv(\"PYTEST_CURRENT_TEST\"):\n               ^^\nE           NameError: name 'os' is not defined. Did you forget to import 'os'?\n\nsrc\\trackhs_mcp\\middleware_native.py:111: NameError\n______ TestTrackHSAuthMiddleware.test_check_authentication_testing_mode _______\n\nself = <tests.test_middleware.TestTrackHSAuthMiddleware object at 0x000002141FEE88A0>\n\n    @patch.dict('os.environ', {'TESTING': '1'})\n    def test_check_authentication_testing_mode(self):\n        \"\"\"Test verificación en modo testing\"\"\"\n        # Arrange\n        middleware = TrackHSAuthMiddleware(None)\n    \n        # Act\n>       result = middleware._check_authentication()\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_middleware.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.trackhs_mcp.middleware_native.TrackHSAuthMiddleware object at 0x0000021420110510>\n\n    def _check_authentication(self) -> bool:\n        \"\"\"Verificar autenticación con cache\"\"\"\n        if self.api_client is None:\n            # En modo testing, permitir sin autenticación\n>           if os.getenv(\"TESTING\") == \"1\" or os.getenv(\"PYTEST_CURRENT_TEST\"):\n               ^^\nE           NameError: name 'os' is not defined. Did you forget to import 'os'?\n\nsrc\\trackhs_mcp\\middleware_native.py:111: NameError\n________________ TestTrackHSMetricsMiddleware.test_get_metrics ________________\n\nself = <tests.test_middleware.TestTrackHSMetricsMiddleware object at 0x000002141FEE89D0>\nmiddleware = <src.trackhs_mcp.middleware_native.TrackHSMetricsMiddleware object at 0x000002142026B950>\n\n    def test_get_metrics(self, middleware):\n        \"\"\"Test obtener métricas\"\"\"\n        # Arrange\n        middleware.metrics[\"total_requests\"] = 10\n        middleware.metrics[\"successful_requests\"] = 8\n        middleware.metrics[\"failed_requests\"] = 2\n        middleware.response_times = [1.0, 2.0, 3.0, 4.0, 5.0]\n    \n        # Act\n        metrics = middleware.get_metrics()\n    \n        # Assert\n        assert metrics[\"total_requests\"] == 10\n        assert metrics[\"successful_requests\"] == 8\n        assert metrics[\"failed_requests\"] == 2\n>       assert metrics[\"average_response_time_seconds\"] == 3.0\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       KeyError: 'average_response_time_seconds'\n\ntests\\test_middleware.py:256: KeyError\n___________ TestTrackHSRateLimitMiddleware.test_rate_limit_cleanup ____________\n\nself = <tests.test_middleware.TestTrackHSRateLimitMiddleware object at 0x000002141FE77D10>\nmiddleware = <src.trackhs_mcp.middleware_native.TrackHSRateLimitMiddleware object at 0x000002142022B770>\n\n    def test_rate_limit_cleanup(self, middleware):\n        \"\"\"Test limpieza de requests antiguos\"\"\"\n        # Arrange - Simular requests antiguos y recientes\n        current_time = time.time()\n        middleware.request_counts[\"client1\"] = [\n            current_time - 70,  # 70 segundos atrás (debería limpiarse)\n            current_time - 30,  # 30 segundos atrás (debería mantenerse)\n            current_time - 10,  # 10 segundos atrás (debería mantenerse)\n        ]\n    \n        # Act\n        result = middleware._is_rate_limited(\"client1\")\n    \n        # Assert\n>       assert result is False  # No debería estar rate limited\n        ^^^^^^^^^^^^^^^^^^^^^^\nE       assert True is False\n\ntests\\test_middleware.py:362: AssertionError\n________ TestMiddlewareIntegration.test_middleware_metrics_aggregation ________\n\nself = <tests.test_middleware.TestMiddlewareIntegration object at 0x000002141FEE8E90>\nmiddleware_chain = [<src.trackhs_mcp.middleware_native.TrackHSLoggingMiddleware object at 0x000002142004BCE0>, <src.trackhs_mcp.middlewar...ct at 0x000002142004B020>, <src.trackhs_mcp.middleware_native.TrackHSRateLimitMiddleware object at 0x00000214202E1B50>]\n\n    def test_middleware_metrics_aggregation(self, middleware_chain):\n        \"\"\"Test agregación de métricas de middleware\"\"\"\n        # Arrange\n        metrics_middleware = middleware_chain[2]  # TrackHSMetricsMiddleware\n    \n        # Act - Simular múltiples requests\n        for i in range(5):\n            metrics_middleware.metrics[\"total_requests\"] += 1\n            metrics_middleware.metrics[\"successful_requests\"] += 1\n            metrics_middleware.response_times.append(1.0 + i * 0.1)\n    \n        # Act\n        metrics = metrics_middleware.get_metrics()\n    \n        # Assert\n        assert metrics[\"total_requests\"] == 5\n        assert metrics[\"successful_requests\"] == 5\n>       assert metrics[\"average_response_time_seconds\"] == 1.2\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       KeyError: 'average_response_time_seconds'\n\ntests\\test_middleware.py:447: KeyError\n_____________ TestReservationRepository.test_cache_functionality ______________\n\nself = <tests.test_repositories_integration.TestReservationRepository object at 0x000002141FE927A0>\nreservation_repo = <src.trackhs_mcp.repositories.reservation_repository.ReservationRepository object at 0x0000021420049040>\nmock_api_client = <Mock id='2285461052720'>\n\n    def test_cache_functionality(self, reservation_repo, mock_api_client):\n        \"\"\"Test funcionalidad de cache\"\"\"\n        # Arrange\n        reservation_id = 12345\n        expected_response = {\"id\": reservation_id, \"status\": \"confirmed\"}\n        mock_api_client.get.return_value = expected_response\n    \n        # Act - Primera llamada\n        result1 = reservation_repo.get_by_id(reservation_id)\n    \n        # Act - Segunda llamada (debería usar cache)\n        result2 = reservation_repo.get_by_id(reservation_id)\n    \n        # Assert\n        assert result1 == result2\n        # Solo debería llamar a la API una vez debido al cache\n>       mock_api_client.get.assert_called_once()\n\ntests\\test_repositories_integration.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Mock name='mock.get' id='2285461054736'>\n\n    def assert_called_once(self):\n        \"\"\"assert that the mock was called only once.\n        \"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to have been called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'get' to have been called once. Called 0 times.\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:958: AssertionError\n__________________ TestUnitRepository.test_get_unit_summary ___________________\n\nself = <tests.test_repositories_integration.TestUnitRepository object at 0x000002141FEFDFD0>\nunit_repo = <src.trackhs_mcp.repositories.unit_repository.UnitRepository object at 0x00000214202B1010>\nmock_api_client = <Mock id='2285461060112'>\n\n    def test_get_unit_summary(self, unit_repo, mock_api_client):\n        \"\"\"Test obtener resumen de unidad\"\"\"\n        # Arrange\n        unit_id = 100\n        unit_data = {\n            \"id\": unit_id,\n            \"name\": \"Casa de Playa\",\n            \"code\": \"CP001\",\n            \"bedrooms\": 3,\n            \"bathrooms\": 2,\n            \"max_occupancy\": 6,\n            \"area\": 120.5,\n            \"address\": \"123 Beach St\",\n            \"amenities\": [\"WiFi\", \"Pool\"],\n            \"is_active\": True,\n            \"is_bookable\": True\n        }\n        mock_api_client.get.return_value = unit_data\n    \n        # Act\n        summary = unit_repo.get_unit_summary(unit_id)\n    \n        # Assert\n        expected_summary = {\n            \"id\": unit_id,\n            \"name\": \"Casa de Playa\",\n            \"code\": \"CP001\",\n            \"bedrooms\": 3,\n            \"bathrooms\": 2,\n            \"max_occupancy\": 6,\n            \"area\": 120.5,\n            \"address\": \"123 Beach St\",\n            \"is_active\": True,\n            \"is_bookable\": True,\n            \"amenities_count\": 2\n        }\n>       assert summary == expected_summary\nE       AssertionError: assert {'address': N...ooms': 2, ...} == {'address': '...ooms': 2, ...}\nE         \nE         Omitting 5 identical items, use -vv to show\nE         Differing items:\nE         {'is_bookable': None} != {'is_bookable': True}\nE         {'max_occupancy': None} != {'max_occupancy': 6}\nE         {'is_active': None} != {'is_active': True}\nE         {'area': None} != {'area': 120.5}...\nE         \nE         ...Full output truncated (31 lines hidden), use '-vv' to show\n\ntests\\test_repositories_integration.py:318: AssertionError\n_____ TestWorkOrderRepository.test_create_maintenance_work_order_success ______\n\nself = <tests.test_repositories_integration.TestWorkOrderRepository object at 0x000002141FF2DF90>\nwork_order_repo = <src.trackhs_mcp.repositories.work_order_repository.WorkOrderRepository object at 0x0000021420364910>\nmock_api_client = <Mock id='2285461059776'>\n\n    def test_create_maintenance_work_order_success(self, work_order_repo, mock_api_client):\n        \"\"\"Test crear orden de mantenimiento exitosa\"\"\"\n        # Arrange\n        work_order_data = {\n            \"unitId\": 123,\n            \"summary\": \"Fuga en grifo\",\n            \"description\": \"Grifo del baño principal gotea\",\n            \"priority\": 3,\n            \"status\": \"pending\",\n            \"dateReceived\": \"2024-01-15\"\n        }\n        expected_response = {\n            \"id\": 456,\n            \"status\": \"pending\",\n            \"unitId\": 123,\n            \"summary\": \"Fuga en grifo\"\n        }\n        mock_api_client.post.return_value = expected_response\n    \n        # Act\n        result = work_order_repo.create_maintenance_work_order(\n            unit_id=123,\n            summary=\"Fuga en grifo\",\n            description=\"Grifo del baño principal gotea\",\n            priority=3\n        )\n    \n        # Assert\n        assert result == expected_response\n>       mock_api_client.post.assert_called_once_with(\"pms/maintenance/work-orders\", work_order_data)\n\ntests\\test_repositories_integration.py:364: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:991: in assert_called_once_with\n    return self.assert_called_with(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Mock name='mock.post' id='2285461059440'>\nargs = ('pms/maintenance/work-orders', {'dateReceived': '2024-01-15', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', ...})\nkwargs = {}\nexpected = call('pms/maintenance/work-orders', {'unitId': 123, 'summary': 'Fuga en grifo', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', 'dateReceived': '2024-01-15'})\nactual = call('pms/maintenance/work-orders', {'unitId': 123, 'summary': 'Fuga en grifo', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', 'dateReceived': '2025-10-27'})\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x00000214202FDC60>\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: post('pms/maintenance/work-orders', {'unitId': 123, 'summary': 'Fuga en grifo', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', 'dateReceived': '2024-01-15'})\nE             Actual: post('pms/maintenance/work-orders', {'unitId': 123, 'summary': 'Fuga en grifo', 'description': 'Grifo del baño principal gotea', 'priority': 3, 'status': 'pending', 'dateReceived': '2025-10-27'})\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:979: AssertionError\n_______________________ test_retry_with_backoff_exists ________________________\n\n    def test_retry_with_backoff_exists():\n        \"\"\"Verifica que la función exists\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:15: ImportError\n_________________________ test_retry_constants_exist __________________________\n\n    def test_retry_constants_exist():\n        \"\"\"Verifica que las constantes de retry existen\"\"\"\n>       from src.trackhs_mcp.server import (\n            MAX_RETRIES,\n            RETRY_BACKOFF_FACTOR,\n            RETRY_DELAY_BASE,\n        )\nE       ImportError: cannot import name 'MAX_RETRIES' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:23: ImportError\n_____________________ test_retry_success_on_first_attempt _____________________\n\n    def test_retry_success_on_first_attempt():\n        \"\"\"Test que funciona sin reintentos si el primer intento es exitoso\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:36: ImportError\n_________________________ test_retry_on_request_error _________________________\n\n    def test_retry_on_request_error():\n        \"\"\"Test reintentos en caso de RequestError (error de red)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:53: ImportError\n____________________________ test_retry_exhaustion ____________________________\n\n    def test_retry_exhaustion():\n        \"\"\"Test que falla después de agotar todos los reintentos\"\"\"\n        from src.trackhs_mcp.exceptions import ConnectionError\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:76: ImportError\n___________________________ test_retry_on_500_error ___________________________\n\n    def test_retry_on_500_error():\n        \"\"\"Test reintentos en errores 500 (server error)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:95: ImportError\n________________________ test_retry_on_429_rate_limit _________________________\n\n    def test_retry_on_429_rate_limit():\n        \"\"\"Test reintentos en 429 (rate limit)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:120: ImportError\n____________________________ test_no_retry_on_404 _____________________________\n\n    def test_no_retry_on_404():\n        \"\"\"Test que NO reintenta en errores 404 (not found)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:144: ImportError\n____________________________ test_no_retry_on_401 _____________________________\n\n    def test_no_retry_on_401():\n        \"\"\"Test que NO reintenta en errores 401 (authentication)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:164: ImportError\n__________________________ test_exponential_backoff ___________________________\n\n    def test_exponential_backoff():\n        \"\"\"Test que el backoff es exponencial\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:186: ImportError\n________________________ test_retry_on_502_bad_gateway ________________________\n\n    def test_retry_on_502_bad_gateway():\n        \"\"\"Test reintentos en 502 (bad gateway)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:215: ImportError\n____________________ test_retry_on_503_service_unavailable ____________________\n\n    def test_retry_on_503_service_unavailable():\n        \"\"\"Test reintentos en 503 (service unavailable)\"\"\"\n>       from src.trackhs_mcp.server import retry_with_backoff\nE       ImportError: cannot import name 'retry_with_backoff' from 'src.trackhs_mcp.server' (C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\server.py)\n\ntests\\test_retries.py:239: ImportError\n____________________ test_retry_trackhs_client_integration ____________________\n\n    def test_retry_trackhs_client_integration():\n        \"\"\"Test que TrackHSClient usa retry_with_backoff correctamente\"\"\"\n        from src.trackhs_mcp.server import TrackHSClient\n    \n        # Verificar que los métodos get y post existen\n        client = TrackHSClient(\"https://test.trackhs.com/api\", \"testuser\", \"testpass\")\n    \n        assert hasattr(client, \"get\")\n        assert hasattr(client, \"post\")\n        assert callable(client.get)\n        assert callable(client.post)\n    \n        # Verificar que la documentación menciona retries\n>       assert \"retries\" in client.get.__doc__.lower()\nE       AssertionError: assert 'retries' in '\\nget request to trackhs api with error handling.\\n\\nreintentos automáticos manejados por fastmcp retrymiddleware.\\n'\nE        +  where '\\nget request to trackhs api with error handling.\\n\\nreintentos automáticos manejados por fastmcp retrymiddleware.\\n' = <built-in method lower of str object at 0x000002141FD7EB80>()\nE        +    where <built-in method lower of str object at 0x000002141FD7EB80> = '\\nGET request to TrackHS API with error handling.\\n\\nReintentos automáticos manejados por FastMCP RetryMiddleware.\\n'.lower\nE        +      where '\\nGET request to TrackHS API with error handling.\\n\\nReintentos automáticos manejados por FastMCP RetryMiddleware.\\n' = get.__doc__\nE        +        where get = <src.trackhs_mcp.server.TrackHSClient object at 0x00000214200DB890>.get\n\ntests\\test_retries.py:274: AssertionError\n============================== warnings summary ===============================\nsrc\\trackhs_mcp\\config.py:83\nsrc\\trackhs_mcp\\config.py:83\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:83: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"log_level\")\n\nsrc\\trackhs_mcp\\config.py:91\nsrc\\trackhs_mcp\\config.py:91\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:91: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"auth_cache_ttl\")\n\nsrc\\trackhs_mcp\\config.py:100\nsrc\\trackhs_mcp\\config.py:100\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:100: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"max_retries\")\n\nsrc\\trackhs_mcp\\config.py:107\nsrc\\trackhs_mcp\\config.py:107\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:107: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    @validator(\"request_timeout\")\n\nsrc\\trackhs_mcp\\config.py:13\nsrc\\trackhs_mcp\\config.py:13\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\src\\trackhs_mcp\\config.py:13: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/\n    class TrackHSSettings(BaseSettings):\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pydantic\\_internal\\_config.py:383: UserWarning: Valid config keys have changed in V2:\n  * 'fields' has been removed\n    warnings.warn(message, UserWarning)\n\ntests\\search_units\\test_search_units_api_real.py:52\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:52: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:72\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:72: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:93\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:93: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:128\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:128: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:151\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:151: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:169\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:169: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:191\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:191: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:211\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:211: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:234\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:234: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:253\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:253: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:270\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:270: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:318\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:318: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_api_real.py:341\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_api_real.py:341: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_e2e.py:51\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_e2e.py:51: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_e2e.py:98\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_e2e.py:98: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_e2e.py:155\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_e2e.py:155: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_e2e.py:224\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_e2e.py:224: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_e2e.py:287\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_e2e.py:287: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_e2e.py:321\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_e2e.py:321: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_e2e.py:372\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_e2e.py:372: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\search_units\\test_search_units_e2e.py:429\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\search_units\\test_search_units_e2e.py:429: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests\\test_create_maintenance_work_order.py:110\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_create_maintenance_work_order.py:110: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_create_maintenance_work_order.py:125\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_create_maintenance_work_order.py:125: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_get_folio.py:65\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_get_folio.py:65: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_get_folio.py:80\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_get_folio.py:80: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_get_reservation.py:75\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_get_reservation.py:75: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_get_reservation.py:91\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_get_reservation.py:91: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_reservations.py:120\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_reservations.py:120: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_reservations.py:143\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_reservations.py:143: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_reservations.py:166\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_reservations.py:166: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_units.py:76\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:76: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_units.py:98\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:98: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_units.py:118\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:118: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_units.py:138\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:138: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests\\test_search_units.py:158\n  C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_search_units.py:158: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_basic_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_basic_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_basic_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_basic_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_pagination_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_pagination_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_pagination_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_pagination_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_filters_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_filters_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_filters_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_filters_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_search_text_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_search_text_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_search_text_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_search_text_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_edge_cases_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_edge_cases_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_edge_cases_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_edge_cases_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_unicode_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_unicode_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_unicode_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_unicode_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_performance_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_performance_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_performance_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_performance_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_concurrent_requests_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_concurrent_requests_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_concurrent_requests_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_concurrent_requests_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_data_consistency_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_data_consistency_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_data_consistency_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_data_consistency_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_error_handling_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_error_handling_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_error_handling_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_error_handling_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_unit_structure_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_unit_structure_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_unit_structure_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_unit_structure_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_links_structure_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_links_structure_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_links_structure_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_links_structure_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_comprehensive_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_comprehensive_real_api' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_comprehensive_real_api\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_comprehensive_real_api' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_property_manager_search_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_e2e_property_manager_search_flow' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_property_manager_search_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_e2e_property_manager_search_flow' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_guest_search_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_e2e_guest_search_flow' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_guest_search_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_e2e_guest_search_flow' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_inventory_management_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_e2e_inventory_management_flow' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_inventory_management_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_e2e_inventory_management_flow' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_performance_stress_test\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_e2e_performance_stress_test' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_performance_stress_test\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_e2e_performance_stress_test' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_error_recovery_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_e2e_error_recovery_flow' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_error_recovery_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_e2e_error_recovery_flow' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_data_consistency_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_e2e_data_consistency_flow' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_data_consistency_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_e2e_data_consistency_flow' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_business_scenarios_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_e2e_business_scenarios_flow' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_business_scenarios_flow\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_e2e_business_scenarios_flow' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_complete_user_journey\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_e2e_complete_user_journey' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_complete_user_journey\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_e2e_complete_user_journey' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_basic_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_basic_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_basic_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_basic_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_with_filters_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_with_filters_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_with_filters_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_with_filters_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_error_handling_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_error_handling_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_error_handling_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_error_handling_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_middleware_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_middleware_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_middleware_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_middleware_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_parameter_validation_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_parameter_validation_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_parameter_validation_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_parameter_validation_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_empty_response_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_empty_response_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_empty_response_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_empty_response_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_pagination_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_pagination_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_pagination_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_pagination_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_concurrent_requests_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_concurrent_requests_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_concurrent_requests_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_concurrent_requests_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_large_response_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_large_response_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_large_response_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_large_response_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_unicode_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_unicode_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_unicode_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_unicode_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_middleware_metrics_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_middleware_metrics_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_middleware_metrics_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_middleware_metrics_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_timeout_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_timeout_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_timeout_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_timeout_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_retry_logic_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_retry_logic_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_retry_logic_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_retry_logic_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_memory_usage_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_memory_usage_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_memory_usage_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_memory_usage_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_reservations_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_reservations_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_get_reservation_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_get_reservation_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_get_reservation_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_get_reservation_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_units_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_search_units_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_search_units_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_search_units_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_create_maintenance_work_order_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_create_maintenance_work_order_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_create_maintenance_work_order_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_create_maintenance_work_order_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_error_handling_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_error_handling_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_error_handling_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_error_handling_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_middleware_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_middleware_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_middleware_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_middleware_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_health_check_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\_pytest\\fixtures.py:1182: PytestRemovedIn9Warning: 'test_health_check_integration' requested an async fixture 'mcp_client', with no plugin or hook that handled it. This is usually an error, as pytest does not natively support it. This will turn into an error in pytest 9.\n  See: https://docs.pytest.org/en/stable/deprecations.html#sync-test-depending-on-async-fixture\n    warnings.warn(\n\ntests/test_integration.py::TestTrackHSIntegration::test_health_check_integration\n  C:\\Users\\EQUIPO\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pytest_asyncio\\plugin.py:678: PytestDeprecationWarning: asyncio test 'test_health_check_integration' requested async @pytest.fixture 'mcp_client' in strict mode. You might want to use @pytest_asyncio.fixture or switch to auto mode. This will become an error in future versions of pytest-asyncio.\n    warnings.warn(\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=============================== tests coverage ================================\n_______________ coverage: platform win32, python 3.13.7-final-0 _______________\n\nName                                                     Stmts   Miss  Cover   Missing\n--------------------------------------------------------------------------------------\nsrc\\trackhs_mcp\\__init__.py                                  3      0   100%\nsrc\\trackhs_mcp\\__main__.py                                 17     17     0%   6-34\nsrc\\trackhs_mcp\\cache.py                                   154     28    82%   36, 162-163, 175-178, 215-218, 253, 257-261, 264-268, 296-307, 313-314, 357\nsrc\\trackhs_mcp\\config.py                                   62     10    84%   88, 95, 97, 104, 111, 130, 134, 137-139\nsrc\\trackhs_mcp\\exceptions.py                               14      0   100%\nsrc\\trackhs_mcp\\metrics.py                                 142      1    99%   202\nsrc\\trackhs_mcp\\middleware.py                               87     87     0%   6-278\nsrc\\trackhs_mcp\\middleware_native.py                       121      5    96%   112-115, 140, 293\nsrc\\trackhs_mcp\\repositories\\__init__.py                     5      0   100%\nsrc\\trackhs_mcp\\repositories\\base.py                        49      9    82%   52-53, 60-62, 79, 96, 109, 144\nsrc\\trackhs_mcp\\repositories\\reservation_repository.py      63     11    83%   71, 104, 115-116, 148-152, 165-169, 189-204\nsrc\\trackhs_mcp\\repositories\\unit_repository.py             75     16    79%   72, 101, 112-113, 148-153, 166-170, 182-183, 192-193, 197-201\nsrc\\trackhs_mcp\\repositories\\work_order_repository.py      104     23    78%   43, 77, 104-105, 209, 211, 222-223, 245, 248, 251, 262, 267-268, 274, 278-283, 295-310\nsrc\\trackhs_mcp\\schemas.py                                  71      0   100%\nsrc\\trackhs_mcp\\server.py                                  355    119    66%   63, 182, 225-229, 241-253, 259-260, 283-287, 299-318, 324-332, 343-349, 355-356, 382-383, 390-391, 405-406, 454-456, 556, 561, 572, 606, 612-614, 622-632, 702, 707, 720, 761-769, 804-827, 899, 996-1026, 1041-1046, 1069, 1074, 1094-1095, 1141-1143\nsrc\\trackhs_mcp\\validators.py                               63      0   100%\n--------------------------------------------------------------------------------------\nTOTAL                                                     1385    326    76%\nCoverage HTML written to dir htmlcov\n=========================== short test summary info ===========================\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_basic_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_pagination_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_filters_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_search_text_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_edge_cases_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_unicode_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_performance_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_concurrent_requests_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_data_consistency_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_unit_structure_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_links_structure_real_api\nFAILED tests/search_units/test_search_units_api_real.py::TestSearchUnitsAPIReal::test_search_units_comprehensive_real_api\nFAILED tests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_property_manager_search_flow\nFAILED tests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_guest_search_flow\nFAILED tests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_inventory_management_flow\nFAILED tests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_performance_stress_test\nFAILED tests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_error_recovery_flow\nFAILED tests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_data_consistency_flow\nFAILED tests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_business_scenarios_flow\nFAILED tests/search_units/test_search_units_e2e.py::TestSearchUnitsE2E::test_e2e_complete_user_journey\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_basic_integration\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_with_filters_integration\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_middleware_integration\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_empty_response_integration\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_pagination_integration\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_concurrent_requests_integration\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_large_response_integration\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_unicode_integration\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_middleware_metrics_integration\nFAILED tests/search_units/test_search_units_integration.py::TestSearchUnitsIntegration::test_search_units_memory_usage_integration\nFAILED tests/test_cache_and_metrics.py::TestCacheDecorator::test_cached_with_different_args\nFAILED tests/test_cache_and_metrics.py::TestPrometheusMetrics::test_export_prometheus_format\nFAILED tests/test_cache_and_metrics.py::TestCacheKeyGeneration::test_cache_key_with_kwargs\nFAILED tests/test_cache_and_metrics.py::TestCacheAndMetricsIntegration::test_performance_metrics\nFAILED tests/test_get_reservation.py::test_get_reservation_with_invalid_id - ...\nFAILED tests/test_health.py::test_health_check_function - assert 'version' in...\nFAILED tests/test_health.py::test_health_check_version - assert 'version' in ...\nFAILED tests/test_health.py::test_health_check_timestamp - TypeError: string ...\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_search_reservations_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_get_reservation_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_search_units_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_create_maintenance_work_order_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_middleware_integration\nFAILED tests/test_integration.py::TestTrackHSIntegration::test_health_check_integration\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_required_parameters_validation\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_unit_id_validation\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_summary_length_validation\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_description_length_validation\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_priority_validation\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_estimated_cost_validation\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_estimated_time_validation\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderValidation::test_date_received_validation\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderDataPreparation::test_data_structure_with_all_parameters\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderDataPreparation::test_data_structure_with_minimal_parameters\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderDataPreparation::test_default_date_received\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderErrorHandling::test_api_client_not_available\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderErrorHandling::test_api_error_handling\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderErrorHandling::test_authentication_error_handling\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderResponseValidation::test_successful_response_validation\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderResponseValidation::test_response_validation_with_extra_fields\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderLogging::test_success_logging\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderLogging::test_error_logging\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderEdgeCases::test_very_long_summary\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderEdgeCases::test_very_long_description\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderEdgeCases::test_zero_estimated_cost\nFAILED tests/test_maintenance_work_order_comprehensive.py::TestMaintenanceWorkOrderEdgeCases::test_zero_estimated_time\nFAILED tests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_parameter_validation_integration\nFAILED tests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_different_priority_levels_integration\nFAILED tests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_cost_and_time_estimation_integration\nFAILED tests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderIntegration::test_date_handling_integration\nFAILED tests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderPerformance::test_response_time_simulation\nFAILED tests/test_maintenance_work_order_integration.py::TestMaintenanceWorkOrderPerformance::test_memory_usage_simulation\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderDataPreparation::test_data_structure_with_all_parameters\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderDataPreparation::test_data_structure_with_minimal_parameters\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderDataPreparation::test_default_date_received\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderDataPreparation::test_optional_parameters_handling\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderErrorHandling::test_api_client_not_available\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderErrorHandling::test_api_error_handling\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderErrorHandling::test_authentication_error_handling\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderResponseValidation::test_successful_response_validation\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderResponseValidation::test_response_validation_with_extra_fields\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderLogging::test_success_logging\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderLogging::test_error_logging\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_very_long_summary\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_very_long_description\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_zero_estimated_cost\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_zero_estimated_time\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderEdgeCases::test_different_priorities\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderIntegration::test_complete_workflow_simulation\nFAILED tests/test_maintenance_work_order_practical.py::TestMaintenanceWorkOrderIntegration::test_error_recovery_simulation\nFAILED tests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_no_client\nFAILED tests/test_middleware.py::TestTrackHSAuthMiddleware::test_check_authentication_testing_mode\nFAILED tests/test_middleware.py::TestTrackHSMetricsMiddleware::test_get_metrics\nFAILED tests/test_middleware.py::TestTrackHSRateLimitMiddleware::test_rate_limit_cleanup\nFAILED tests/test_middleware.py::TestMiddlewareIntegration::test_middleware_metrics_aggregation\nFAILED tests/test_repositories_integration.py::TestReservationRepository::test_cache_functionality\nFAILED tests/test_repositories_integration.py::TestUnitRepository::test_get_unit_summary\nFAILED tests/test_repositories_integration.py::TestWorkOrderRepository::test_create_maintenance_work_order_success\nFAILED tests/test_retries.py::test_retry_with_backoff_exists - ImportError: c...\nFAILED tests/test_retries.py::test_retry_constants_exist - ImportError: canno...\nFAILED tests/test_retries.py::test_retry_success_on_first_attempt - ImportErr...\nFAILED tests/test_retries.py::test_retry_on_request_error - ImportError: cann...\nFAILED tests/test_retries.py::test_retry_exhaustion - ImportError: cannot imp...\nFAILED tests/test_retries.py::test_retry_on_500_error - ImportError: cannot i...\nFAILED tests/test_retries.py::test_retry_on_429_rate_limit - ImportError: can...\nFAILED tests/test_retries.py::test_no_retry_on_404 - ImportError: cannot impo...\nFAILED tests/test_retries.py::test_no_retry_on_401 - ImportError: cannot impo...\nFAILED tests/test_retries.py::test_exponential_backoff - ImportError: cannot ...\nFAILED tests/test_retries.py::test_retry_on_502_bad_gateway - ImportError: ca...\nFAILED tests/test_retries.py::test_retry_on_503_service_unavailable - ImportE...\nFAILED tests/test_retries.py::test_retry_trackhs_client_integration - Asserti...\n==== 111 failed, 183 passed, 13 skipped, 130 warnings in 63.29s (0:01:03) =====\n",
      "stderr": ""
    },
    {
      "category": "Rendimiento",
      "test": "Test de rendimiento",
      "success": false,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- C:\\Python313\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\nconfigfile: pyproject.toml\nplugins: anyio-4.11.0, inline-snapshot-0.30.1, asyncio-1.2.0, cov-7.0.0\nasyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 0 items\n\n============================ no tests ran in 0.29s ============================\n",
      "stderr": "ERROR: not found: C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\tests\\test_integration.py::test_performance\n(no match in any of [<Module test_integration.py>])\n\n"
    }
  ]
}