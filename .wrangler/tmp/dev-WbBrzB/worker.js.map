{
  "version": 3,
  "sources": ["../bundle-jwNSZb/checked-fetch.js", "../../../src/core/auth.ts", "../../../src/core/api-client.ts", "../../../src/core/base-tool.ts", "../../../src/tools/get-reviews.ts", "../../../src/tools/get-reservation.ts", "../../../src/tools/search-reservations.ts", "../../../src/tools/get-units.ts", "../../../src/tools/get-folios-collection.ts", "../../../src/tools/get-contacts.ts", "../../../src/core/simple-mcp-server.ts", "../../../cloudflare/worker.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-jwNSZb/middleware-insertion-facade.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-jwNSZb/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\EQUIPO\\Documents\\Software\\MCPtrackhsConnector\\.wrangler\\tmp\\dev-WbBrzB",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/**\r\n * Manejo de autenticaci\u00F3n Basic Auth para Track HS API\r\n */\r\n\r\nimport { TrackHSConfig } from './types.js';\r\n\r\nexport class TrackHSAuth {\r\n  private credentials: string;\r\n\r\n  constructor(config: TrackHSConfig) {\r\n    this.credentials = btoa(`${config.username}:${config.password}`);\r\n  }\r\n\r\n  /**\r\n   * Genera el header de autorizaci\u00F3n para las peticiones\r\n   */\r\n  getAuthHeader(): string {\r\n    return `Basic ${this.credentials}`;\r\n  }\r\n\r\n  /**\r\n   * Valida que las credenciales est\u00E9n configuradas\r\n   */\r\n  validateCredentials(): boolean {\r\n    return this.credentials.length > 0;\r\n  }\r\n}", "/**\r\n * Cliente HTTP base para Track HS API\r\n */\r\n\r\nimport { TrackHSConfig, RequestOptions, ApiError } from './types.js';\r\nimport { TrackHSAuth } from './auth.js';\r\n\r\nexport class TrackHSApiClient {\r\n  private baseUrl: string;\r\n  private auth: TrackHSAuth;\r\n\r\n  constructor(config: TrackHSConfig) {\r\n    this.baseUrl = config.baseUrl;\r\n    this.auth = new TrackHSAuth(config);\r\n    \r\n    if (!this.auth.validateCredentials()) {\r\n      throw new Error('Credenciales de Track HS no configuradas correctamente');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza una petici\u00F3n HTTP a la API de Track HS\r\n   */\r\n  async request<T>(endpoint: string, options: RequestOptions = {}): Promise<T> {\r\n    const url = `${this.baseUrl}${endpoint}`;\r\n    \r\n    try {\r\n      const fetchOptions: RequestInit = {\r\n        method: options.method || 'GET',\r\n        headers: {\r\n          'Authorization': this.auth.getAuthHeader(),\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          ...options.headers\r\n        }\r\n      };\r\n      \r\n      if (options.body) {\r\n        fetchOptions.body = options.body;\r\n      }\r\n      \r\n      const response = await fetch(url, fetchOptions);\r\n\r\n      if (!response.ok) {\r\n        const errorMessage = `Track HS API Error: ${response.status} ${response.statusText}`;\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType && contentType.includes('application/json')) {\r\n        return await response.json();\r\n      } else {\r\n        return await response.text() as unknown as T;\r\n      }\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw new Error(`Error en petici\u00F3n a Track HS: ${error.message}`);\r\n      }\r\n      throw new Error('Error desconocido en petici\u00F3n a Track HS');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza una petici\u00F3n GET\r\n   */\r\n  async get<T>(endpoint: string, options: RequestOptions = {}): Promise<T> {\r\n    return this.request<T>(endpoint, { ...options, method: 'GET' });\r\n  }\r\n\r\n  /**\r\n   * Realiza una petici\u00F3n POST\r\n   */\r\n  async post<T>(endpoint: string, data?: any, options: RequestOptions = {}): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      ...options,\r\n      method: 'POST',\r\n      body: data ? JSON.stringify(data) : undefined\r\n    });\r\n  }\r\n}", "/**\r\n * Clase base para herramientas MCP de Track HS\r\n */\r\n\r\nimport { TrackHSApiClient } from './api-client.js';\r\n\r\nexport interface MCPToolSchema {\r\n  type: 'object';\r\n  properties: Record<string, any>;\r\n  required?: string[];\r\n}\r\n\r\nexport abstract class BaseTrackHSTool {\r\n  protected apiClient: TrackHSApiClient;\r\n\r\n  constructor(apiClient: TrackHSApiClient) {\r\n    this.apiClient = apiClient;\r\n  }\r\n\r\n  abstract name: string;\r\n  abstract description: string;\r\n  abstract inputSchema: MCPToolSchema;\r\n  \r\n  abstract execute(params: any): Promise<any>;\r\n\r\n  /**\r\n   * Valida los par\u00E1metros de entrada seg\u00FAn el schema\r\n   */\r\n  protected validateParams(params: any): boolean {\r\n    const schema = this.inputSchema;\r\n    \r\n    // Verificar propiedades requeridas\r\n    if (schema.required) {\r\n      for (const requiredProp of schema.required) {\r\n        if (!(requiredProp in params)) {\r\n          throw new Error(`Par\u00E1metro requerido faltante: ${requiredProp}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Validar tipos b\u00E1sicos\r\n    for (const [prop, propSchema] of Object.entries(schema.properties)) {\r\n      if (prop in params) {\r\n        const value = params[prop];\r\n        const expectedType = propSchema.type;\r\n        \r\n        if (expectedType === 'string' && typeof value !== 'string') {\r\n          throw new Error(`Par\u00E1metro '${prop}' debe ser string`);\r\n        }\r\n        if (expectedType === 'number' && typeof value !== 'number') {\r\n          throw new Error(`Par\u00E1metro '${prop}' debe ser number`);\r\n        }\r\n        if (expectedType === 'boolean' && typeof value !== 'boolean') {\r\n          throw new Error(`Par\u00E1metro '${prop}' debe ser boolean`);\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}", "/**\r\n * Herramienta MCP para obtener rese\u00F1as de Track HS\r\n */\r\n\r\nimport { BaseTrackHSTool } from '../core/base-tool.js';\r\nimport { ReviewsResponse, GetReviewsParams } from '../types/reviews.js';\r\n\r\nexport class GetReviewsTool extends BaseTrackHSTool {\r\n  name = 'get_reviews';\r\n  description = 'Retrieve paginated collection of property reviews from Track HS';\r\n  \r\n  inputSchema = {\r\n    type: 'object' as const,\r\n    properties: {\r\n      page: { \r\n        type: 'number', \r\n        description: 'Page Number (default: 1)',\r\n        minimum: 1\r\n      },\r\n      size: { \r\n        type: 'number', \r\n        description: 'Page Size (default: 10, max: 100)',\r\n        minimum: 1,\r\n        maximum: 100\r\n      },\r\n      sortColumn: { \r\n        type: 'string', \r\n        enum: ['id'], \r\n        default: 'id',\r\n        description: 'Column to sort by'\r\n      },\r\n      sortDirection: { \r\n        type: 'string', \r\n        enum: ['asc', 'desc'], \r\n        default: 'asc',\r\n        description: 'Sort direction'\r\n      },\r\n      search: { \r\n        type: 'string', \r\n        description: 'Search by reviewId and publicReview content'\r\n      },\r\n      updatedSince: { \r\n        type: 'string', \r\n        format: 'date-time', \r\n        description: 'Filter reviews updated since this date (ISO 8601 format)'\r\n      }\r\n    },\r\n    required: []\r\n  };\r\n\r\n  async execute(params: GetReviewsParams = {}): Promise<ReviewsResponse> {\r\n    // Validar par\u00E1metros\r\n    this.validateParams(params);\r\n\r\n    // Construir query parameters\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    // Aplicar valores por defecto\r\n    const page = params.page || 1;\r\n    const size = params.size || 10;\r\n    const sortColumn = params.sortColumn || 'id';\r\n    const sortDirection = params.sortDirection || 'asc';\r\n\r\n    // Agregar par\u00E1metros a la query\r\n    queryParams.append('page', page.toString());\r\n    queryParams.append('size', size.toString());\r\n    queryParams.append('sortColumn', sortColumn);\r\n    queryParams.append('sortDirection', sortDirection);\r\n\r\n    if (params.search) {\r\n      queryParams.append('search', params.search);\r\n    }\r\n\r\n    if (params.updatedSince) {\r\n      queryParams.append('updatedSince', params.updatedSince);\r\n    }\r\n\r\n    const endpoint = `/channel-management/channel/reviews?${queryParams.toString()}`;\r\n    \r\n    try {\r\n      const result = await this.apiClient.get<ReviewsResponse>(endpoint);\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`Error al obtener rese\u00F1as: ${error instanceof Error ? error.message : 'Error desconocido'}`);\r\n    }\r\n  }\r\n}", "/**\r\n * Herramienta MCP para obtener detalles de una reservaci\u00F3n de Track HS\r\n */\r\n\r\nimport { BaseTrackHSTool } from '../core/base-tool.js';\r\nimport { ReservationResponse } from '../types/reservations.js';\r\n\r\nexport class GetReservationTool extends BaseTrackHSTool {\r\n  name = 'get_reservation';\r\n  description = 'Get detailed information for a specific reservation by ID';\r\n  \r\n  inputSchema = {\r\n    type: 'object' as const,\r\n    properties: {\r\n      reservationId: { \r\n        type: 'string', \r\n        description: 'The ID of the reservation to retrieve'\r\n      }\r\n    },\r\n    required: ['reservationId']\r\n  };\r\n\r\n  async execute(params: { reservationId: string }): Promise<ReservationResponse> {\r\n    // Validar par\u00E1metros\r\n    this.validateParams(params);\r\n\r\n    const { reservationId } = params;\r\n\r\n    // Validar que el ID no est\u00E9 vac\u00EDo\r\n    if (!reservationId || reservationId.trim() === '') {\r\n      throw new Error('El ID de reservaci\u00F3n no puede estar vac\u00EDo');\r\n    }\r\n\r\n    const endpoint = `/v2/pms/reservations/${encodeURIComponent(reservationId)}`;\r\n    \r\n    try {\r\n      const result = await this.apiClient.get<ReservationResponse>(endpoint);\r\n      return result;\r\n    } catch (error) {\r\n      if (error instanceof Error && error.message.includes('404')) {\r\n        throw new Error(`Reservaci\u00F3n con ID '${reservationId}' no encontrada`);\r\n      }\r\n      throw new Error(`Error al obtener reservaci\u00F3n: ${error instanceof Error ? error.message : 'Error desconocido'}`);\r\n    }\r\n  }\r\n}", "/**\r\n * Herramienta MCP para b\u00FAsqueda avanzada de reservaciones de Track HS\r\n */\r\n\r\nimport { BaseTrackHSTool } from '../core/base-tool.js';\r\nimport { SearchReservationsParams, SearchReservationsResponse } from '../types/reservations.js';\r\n\r\nexport class SearchReservationsTool extends BaseTrackHSTool {\r\n  name = 'search_reservations';\r\n  description = 'Search reservations with advanced filtering options including pagination, sorting, date ranges, and multiple ID filters';\r\n  \r\n  inputSchema = {\r\n    type: 'object' as const,\r\n    properties: {\r\n      // Paginaci\u00F3n\r\n      page: { \r\n        type: 'number', \r\n        minimum: 0,\r\n        description: 'Page number of result set - Limited to 10k total results (page * size)'\r\n      },\r\n      size: { \r\n        type: 'number', \r\n        minimum: 1,\r\n        maximum: 100,\r\n        description: 'Size of page - Limited to 10k total results (page * size)'\r\n      },\r\n      scroll: {\r\n        oneOf: [\r\n          { type: 'number', description: 'Default to 1 for first page' },\r\n          { type: 'string', description: 'Use scroll index string for subsequent pages' }\r\n        ],\r\n        description: 'Elasticsearch scrolling, start with 1 and then string to continue scrolling'\r\n      },\r\n      \r\n      // Ordenamiento\r\n      sortColumn: { \r\n        type: 'string', \r\n        enum: ['name', 'status', 'altConf', 'agreementStatus', 'type', 'guest', 'guests', 'unit', 'units', 'checkin', 'checkout', 'nights'],\r\n        default: 'name',\r\n        description: 'Column to sort the result set'\r\n      },\r\n      sortDirection: { \r\n        type: 'string', \r\n        enum: ['asc', 'desc'],\r\n        default: 'asc',\r\n        description: 'Direction to sort result set'\r\n      },\r\n      \r\n      // B\u00FAsqueda\r\n      search: { \r\n        type: 'string', \r\n        description: 'Substring search matching on name or descriptions'\r\n      },\r\n      tags: { \r\n        type: 'string', \r\n        description: 'Search matching on tag Id'\r\n      },\r\n      updatedSince: { \r\n        type: 'string', \r\n        format: 'date-time',\r\n        description: 'Date as ISO 8601 format'\r\n      },\r\n      \r\n      // Filtros por ID (soportan single value o array)\r\n      nodeId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Node' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Nodes' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific node ID(s). Can be single value or array.'\r\n      },\r\n      unitId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Unit' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Units' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific unit ID(s). Can be single value or array.'\r\n      },\r\n      reservationTypeId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Reservation Type ID' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Reservation Type IDs' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific reservation type ID(s). Can be single value or array.'\r\n      },\r\n      contactId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Contact ID' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Contact IDs' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific contact ID(s). Can be single value or array.'\r\n      },\r\n      travelAgentId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Travel Agent ID' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Travel Agent IDs' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific travel agent ID(s). Can be single value or array.'\r\n      },\r\n      campaignId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Campaign ID' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Campaign IDs' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific campaign ID(s). Can be single value or array.'\r\n      },\r\n      userId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single User ID' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple User IDs' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific user ID(s). Can be single value or array.'\r\n      },\r\n      unitTypeId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Unit Type ID' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Unit Type IDs' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific unit type ID(s). Can be single value or array.'\r\n      },\r\n      rateTypeId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Rate Type ID' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Rate Type IDs' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific rate type ID(s). Can be single value or array.'\r\n      },\r\n      \r\n      // Filtros por fechas\r\n      bookedStart: { \r\n        type: 'string', \r\n        format: 'date-time',\r\n        description: 'Date as ISO 8601 format'\r\n      },\r\n      bookedEnd: { \r\n        type: 'string', \r\n        format: 'date-time',\r\n        description: 'Date as ISO 8601 format'\r\n      },\r\n      arrivalStart: { \r\n        type: 'string', \r\n        format: 'date-time',\r\n        description: 'Date as ISO 8601 format'\r\n      },\r\n      arrivalEnd: { \r\n        type: 'string', \r\n        format: 'date-time',\r\n        description: 'Date as ISO 8601 format'\r\n      },\r\n      departureStart: { \r\n        type: 'string', \r\n        format: 'date-time',\r\n        description: 'Date as ISO 8601 format'\r\n      },\r\n      departureEnd: { \r\n        type: 'string', \r\n        format: 'date-time',\r\n        description: 'Date as ISO 8601 format'\r\n      },\r\n      \r\n      // Filtros especiales\r\n      inHouseToday: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Filter by in house today'\r\n      },\r\n      status: {\r\n        oneOf: [\r\n          { type: 'string', title: 'Single Status' },\r\n          { type: 'array', items: { type: 'string' }, title: 'Multiple Statuses' }\r\n        ],\r\n        description: 'Return all reservations that are of the specific status(es). Can be single value or array. {Hold, Confirmed, Checked Out, Checked In, and Cancelled}'\r\n      }\r\n    },\r\n    required: []\r\n  };\r\n\r\n  async execute(params: SearchReservationsParams = {}): Promise<SearchReservationsResponse> {\r\n    // Validar par\u00E1metros b\u00E1sicos\r\n    this.validateParams(params);\r\n\r\n    // Construir query parameters de forma m\u00E1s conservadora\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    // Solo agregar par\u00E1metros que est\u00E1n definidos y no son undefined\r\n    if (params.page !== undefined) {\r\n      queryParams.append('page', params.page.toString());\r\n    }\r\n    \r\n    if (params.size !== undefined) {\r\n      queryParams.append('size', params.size.toString());\r\n    }\r\n    \r\n    if (params.sortColumn) {\r\n      queryParams.append('sortColumn', params.sortColumn);\r\n    }\r\n    \r\n    if (params.sortDirection) {\r\n      queryParams.append('sortDirection', params.sortDirection);\r\n    }\r\n\r\n    // Agregar par\u00E1metros de b\u00FAsqueda solo si est\u00E1n definidos\r\n    if (params.search) {\r\n      queryParams.append('search', params.search);\r\n    }\r\n\r\n    if (params.tags) {\r\n      queryParams.append('tags', params.tags);\r\n    }\r\n\r\n    if (params.updatedSince) {\r\n      queryParams.append('updatedSince', params.updatedSince);\r\n    }\r\n\r\n    // Agregar filtros por ID solo si est\u00E1n definidos\r\n    this.addIdFilter(queryParams, 'nodeId', params.nodeId);\r\n    this.addIdFilter(queryParams, 'unitId', params.unitId);\r\n    this.addIdFilter(queryParams, 'reservationTypeId', params.reservationTypeId);\r\n    this.addIdFilter(queryParams, 'contactId', params.contactId);\r\n    this.addIdFilter(queryParams, 'travelAgentId', params.travelAgentId);\r\n    this.addIdFilter(queryParams, 'campaignId', params.campaignId);\r\n    this.addIdFilter(queryParams, 'userId', params.userId);\r\n    this.addIdFilter(queryParams, 'unitTypeId', params.unitTypeId);\r\n    this.addIdFilter(queryParams, 'rateTypeId', params.rateTypeId);\r\n\r\n    // Agregar filtros por fechas solo si est\u00E1n definidos\r\n    if (params.bookedStart) {\r\n      queryParams.append('bookedStart', params.bookedStart);\r\n    }\r\n    if (params.bookedEnd) {\r\n      queryParams.append('bookedEnd', params.bookedEnd);\r\n    }\r\n    if (params.arrivalStart) {\r\n      queryParams.append('arrivalStart', params.arrivalStart);\r\n    }\r\n    if (params.arrivalEnd) {\r\n      queryParams.append('arrivalEnd', params.arrivalEnd);\r\n    }\r\n    if (params.departureStart) {\r\n      queryParams.append('departureStart', params.departureStart);\r\n    }\r\n    if (params.departureEnd) {\r\n      queryParams.append('departureEnd', params.departureEnd);\r\n    }\r\n\r\n    // Agregar filtros especiales solo si est\u00E1n definidos\r\n    if (params.inHouseToday !== undefined) {\r\n      queryParams.append('inHouseToday', params.inHouseToday.toString());\r\n    }\r\n\r\n    // Agregar filtro de estado solo si est\u00E1 definido\r\n    if (params.status !== undefined) {\r\n      this.addStatusFilter(queryParams, params.status);\r\n    }\r\n\r\n    const endpoint = `/v2/pms/reservations?${queryParams.toString()}`;\r\n    \r\n    try {\r\n      const result = await this.apiClient.get<SearchReservationsResponse>(endpoint);\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`Error al buscar reservaciones: ${error instanceof Error ? error.message : 'Error desconocido'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Agrega filtros de ID a los query parameters, manejando tanto valores \u00FAnicos como arrays\r\n   */\r\n  private addIdFilter(queryParams: URLSearchParams, paramName: string, value: number | number[] | undefined): void {\r\n    if (value !== undefined) {\r\n      if (Array.isArray(value)) {\r\n        value.forEach(id => queryParams.append(paramName, id.toString()));\r\n      } else {\r\n        queryParams.append(paramName, value.toString());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Agrega filtros de estado a los query parameters, manejando tanto valores \u00FAnicos como arrays\r\n   */\r\n  private addStatusFilter(queryParams: URLSearchParams, status: string | string[] | undefined): void {\r\n    if (status !== undefined) {\r\n      if (Array.isArray(status)) {\r\n        status.forEach(s => queryParams.append('status', s));\r\n      } else {\r\n        queryParams.append('status', status);\r\n      }\r\n    }\r\n  }\r\n}", "/**\r\n * Herramienta MCP para obtener colecci\u00F3n de unidades de alojamiento de Track HS\r\n */\r\n\r\nimport { BaseTrackHSTool } from '../core/base-tool.js';\r\nimport { GetUnitsParams, GetUnitsResponse } from '../types/units.js';\r\n\r\nexport class GetUnitsTool extends BaseTrackHSTool {\r\n  name = 'get_units';\r\n  description = 'Obtener colecci\u00F3n de unidades de alojamiento con filtros avanzados incluyendo paginaci\u00F3n, ordenamiento, filtros por ID, b\u00FAsqueda de texto, filtros f\u00EDsicos, pol\u00EDticas y disponibilidad';\r\n  \r\n  inputSchema = {\r\n    type: 'object' as const,\r\n    properties: {\r\n      // Paginaci\u00F3n\r\n      page: { \r\n        type: 'number', \r\n        minimum: 0,\r\n        description: 'Page number of result set - Limited to 10k total results (page * size)'\r\n      },\r\n      size: { \r\n        type: 'number', \r\n        minimum: 1,\r\n        maximum: 100,\r\n        description: 'Size of page - Limited to 10k total results (page * size)'\r\n      },\r\n      \r\n      // Ordenamiento\r\n      sortColumn: { \r\n        type: 'string', \r\n        enum: ['id', 'name', 'nodeName', 'unitTypeName'],\r\n        default: 'name',\r\n        description: 'Column to sort the result set'\r\n      },\r\n      sortDirection: { \r\n        type: 'string', \r\n        enum: ['asc', 'desc'],\r\n        default: 'asc',\r\n        description: 'Direction to sort result set'\r\n      },\r\n      \r\n      // B\u00FAsqueda\r\n      search: { \r\n        type: 'string', \r\n        description: 'Substring search matching on name or descriptions'\r\n      },\r\n      term: { \r\n        type: 'string', \r\n        description: 'Substring search matching on term'\r\n      },\r\n      unitCode: { \r\n        type: 'string', \r\n        description: 'Search on unitCode, exact match or add % for wildcard'\r\n      },\r\n      shortName: { \r\n        type: 'string', \r\n        description: 'Search on shortName, exact match or add % for wildcard'\r\n      },\r\n      contentUpdatedSince: { \r\n        type: 'string', \r\n        format: 'date-time',\r\n        description: 'Date in ISO 8601 format. Will return all units with content changes since timestamp'\r\n      },\r\n      updatedSince: { \r\n        type: 'string', \r\n        format: 'date',\r\n        description: 'Date in ISO 8601 format. Will return all units updated since timestamp. @deprecated use contentUpdatedSince'\r\n      },\r\n      \r\n      // Filtros por ID (soportan single value o array)\r\n      nodeId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Node' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Nodes' }\r\n        ],\r\n        description: 'Return all units that are descendants of the specific node ID(s). Can be single value or array.'\r\n      },\r\n      unitTypeId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Unit Type' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Unit Types' }\r\n        ],\r\n        description: 'Return all units of the specific unit type(s). Can be single value or array.'\r\n      },\r\n      amenityId: {\r\n        oneOf: [\r\n          { type: 'number', title: 'Single Amenity' },\r\n          { type: 'array', items: { type: 'number' }, title: 'Multiple Amenities' }\r\n        ],\r\n        description: 'Return all units that have these amenity ID(s). Can be single value or array.'\r\n      },\r\n      \r\n      // Filtros f\u00EDsicos\r\n      bedrooms: { \r\n        type: 'number', \r\n        description: 'Return all units with this exact number of bedrooms'\r\n      },\r\n      minBedrooms: { \r\n        type: 'number', \r\n        description: 'Return all units with this or more number of bedrooms'\r\n      },\r\n      maxBedrooms: { \r\n        type: 'number', \r\n        description: 'Return all units with this or less number of bedrooms'\r\n      },\r\n      bathrooms: { \r\n        type: 'number', \r\n        description: 'Return all units with this exact number of bathrooms'\r\n      },\r\n      minBathrooms: { \r\n        type: 'number', \r\n        description: 'Return all units with this or more number of bathrooms'\r\n      },\r\n      maxBathrooms: { \r\n        type: 'number', \r\n        description: 'Return all units with this or less number of bathrooms'\r\n      },\r\n      \r\n      // Filtros de pol\u00EDticas\r\n      petsFriendly: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return all units that are pet friendly (1) or not (0)'\r\n      },\r\n      eventsAllowed: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return all units that allow events (1) or not (0)'\r\n      },\r\n      smokingAllowed: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return all units that allow smoking (1) or not (0)'\r\n      },\r\n      childrenAllowed: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return all units that allow children (1) or not (0)'\r\n      },\r\n      \r\n      // Filtros de disponibilidad\r\n      arrival: { \r\n        type: 'string', \r\n        format: 'date',\r\n        description: 'Date in ISO 8601 format. Will return all units available between this and departure'\r\n      },\r\n      departure: { \r\n        type: 'string', \r\n        format: 'date',\r\n        description: 'Date in ISO 8601 format. Will return all units available between this and arrival'\r\n      },\r\n      \r\n      // Filtros de estado\r\n      isActive: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return active (1), inactive (0), or all (null) units'\r\n      },\r\n      isBookable: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return all bookable units (1) or not (0)'\r\n      },\r\n      unitStatus: { \r\n        type: 'string', \r\n        enum: ['clean', 'dirty', 'occupied', 'inspection', 'inprogress'],\r\n        description: 'Filter by unit status'\r\n      },\r\n      \r\n      // Filtros adicionales\r\n      computed: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return additional computed values attributes based on inherited attributes. 1 == true, 0 == false'\r\n      },\r\n      inherited: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return additional inherited attributes. 1 == true, 0 == false'\r\n      },\r\n      limited: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return very limited attributes (id, name, longitude latitude, isActive)'\r\n      },\r\n      includeDescriptions: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return descriptions of units, may be inherited from node if set to inherited. 1 == true, 0 == false'\r\n      },\r\n      allowUnitRates: { \r\n        type: 'number', \r\n        enum: [0, 1],\r\n        description: 'Return all units who\\'s type allows unit rates'\r\n      },\r\n      calendarId: { \r\n        type: 'number', \r\n        description: 'Return all units matching this unit\\'s type with calendar group id'\r\n      },\r\n      roleId: { \r\n        type: 'number', \r\n        description: 'Return units by is a specific roleId is being used'\r\n      },\r\n      id: { \r\n        type: 'array', \r\n        items: { type: 'number' },\r\n        description: 'Filter by Unit IDs'\r\n      }\r\n    },\r\n    required: []\r\n  };\r\n\r\n  async execute(params: GetUnitsParams = {}): Promise<GetUnitsResponse> {\r\n    // Validar par\u00E1metros b\u00E1sicos\r\n    this.validateParams(params);\r\n\r\n    // Construir query parameters de forma m\u00E1s conservadora\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    // Solo agregar par\u00E1metros que est\u00E1n definidos y no son undefined\r\n    if (params.page !== undefined) {\r\n      queryParams.append('page', params.page.toString());\r\n    }\r\n    \r\n    if (params.size !== undefined) {\r\n      queryParams.append('size', params.size.toString());\r\n    }\r\n    \r\n    if (params.sortColumn) {\r\n      queryParams.append('sortColumn', params.sortColumn);\r\n    }\r\n    \r\n    if (params.sortDirection) {\r\n      queryParams.append('sortDirection', params.sortDirection);\r\n    }\r\n\r\n    // Agregar par\u00E1metros de b\u00FAsqueda solo si est\u00E1n definidos\r\n    if (params.search) {\r\n      queryParams.append('search', params.search);\r\n    }\r\n\r\n    if (params.term) {\r\n      queryParams.append('term', params.term);\r\n    }\r\n\r\n    if (params.unitCode) {\r\n      queryParams.append('unitCode', params.unitCode);\r\n    }\r\n\r\n    if (params.shortName) {\r\n      queryParams.append('shortName', params.shortName);\r\n    }\r\n\r\n    if (params.contentUpdatedSince) {\r\n      queryParams.append('contentUpdatedSince', params.contentUpdatedSince);\r\n    }\r\n\r\n    if (params.updatedSince) {\r\n      queryParams.append('updatedSince', params.updatedSince);\r\n    }\r\n\r\n    // Agregar filtros por ID solo si est\u00E1n definidos\r\n    this.addIdFilter(queryParams, 'nodeId', params.nodeId);\r\n    this.addIdFilter(queryParams, 'unitTypeId', params.unitTypeId);\r\n    this.addIdFilter(queryParams, 'amenityId', params.amenityId);\r\n\r\n    // Agregar filtros f\u00EDsicos solo si est\u00E1n definidos\r\n    if (params.bedrooms !== undefined) {\r\n      queryParams.append('bedrooms', params.bedrooms.toString());\r\n    }\r\n    if (params.minBedrooms !== undefined) {\r\n      queryParams.append('minBedrooms', params.minBedrooms.toString());\r\n    }\r\n    if (params.maxBedrooms !== undefined) {\r\n      queryParams.append('maxBedrooms', params.maxBedrooms.toString());\r\n    }\r\n    if (params.bathrooms !== undefined) {\r\n      queryParams.append('bathrooms', params.bathrooms.toString());\r\n    }\r\n    if (params.minBathrooms !== undefined) {\r\n      queryParams.append('minBathrooms', params.minBathrooms.toString());\r\n    }\r\n    if (params.maxBathrooms !== undefined) {\r\n      queryParams.append('maxBathrooms', params.maxBathrooms.toString());\r\n    }\r\n\r\n    // Agregar filtros de pol\u00EDticas solo si est\u00E1n definidos\r\n    if (params.petsFriendly !== undefined) {\r\n      queryParams.append('petsFriendly', params.petsFriendly.toString());\r\n    }\r\n    if (params.eventsAllowed !== undefined) {\r\n      queryParams.append('eventsAllowed', params.eventsAllowed.toString());\r\n    }\r\n    if (params.smokingAllowed !== undefined) {\r\n      queryParams.append('smokingAllowed', params.smokingAllowed.toString());\r\n    }\r\n    if (params.childrenAllowed !== undefined) {\r\n      queryParams.append('childrenAllowed', params.childrenAllowed.toString());\r\n    }\r\n\r\n    // Agregar filtros de disponibilidad solo si est\u00E1n definidos\r\n    if (params.arrival) {\r\n      queryParams.append('arrival', params.arrival);\r\n    }\r\n    if (params.departure) {\r\n      queryParams.append('departure', params.departure);\r\n    }\r\n\r\n    // Agregar filtros de estado solo si est\u00E1n definidos\r\n    if (params.isActive !== undefined) {\r\n      queryParams.append('isActive', params.isActive.toString());\r\n    }\r\n    if (params.isBookable !== undefined) {\r\n      queryParams.append('isBookable', params.isBookable.toString());\r\n    }\r\n    if (params.unitStatus) {\r\n      queryParams.append('unitStatus', params.unitStatus);\r\n    }\r\n\r\n    // Agregar filtros adicionales solo si est\u00E1n definidos\r\n    if (params.computed !== undefined) {\r\n      queryParams.append('computed', params.computed.toString());\r\n    }\r\n    if (params.inherited !== undefined) {\r\n      queryParams.append('inherited', params.inherited.toString());\r\n    }\r\n    if (params.limited !== undefined) {\r\n      queryParams.append('limited', params.limited.toString());\r\n    }\r\n    if (params.includeDescriptions !== undefined) {\r\n      queryParams.append('includeDescriptions', params.includeDescriptions.toString());\r\n    }\r\n    if (params.allowUnitRates !== undefined) {\r\n      queryParams.append('allowUnitRates', params.allowUnitRates.toString());\r\n    }\r\n    if (params.calendarId !== undefined) {\r\n      queryParams.append('calendarId', params.calendarId.toString());\r\n    }\r\n    if (params.roleId !== undefined) {\r\n      queryParams.append('roleId', params.roleId.toString());\r\n    }\r\n\r\n    // Agregar filtro de IDs de unidades solo si est\u00E1 definido\r\n    if (params.id !== undefined) {\r\n      this.addIdFilter(queryParams, 'id', params.id);\r\n    }\r\n\r\n    const endpoint = `/pms/units?${queryParams.toString()}`;\r\n    \r\n    try {\r\n      const result = await this.apiClient.get<GetUnitsResponse>(endpoint);\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`Error al obtener unidades: ${error instanceof Error ? error.message : 'Error desconocido'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Agrega filtros de ID a los query parameters, manejando tanto valores \u00FAnicos como arrays\r\n   */\r\n  private addIdFilter(queryParams: URLSearchParams, paramName: string, value: number | number[] | undefined): void {\r\n    if (value !== undefined) {\r\n      if (Array.isArray(value)) {\r\n        value.forEach(id => queryParams.append(paramName, id.toString()));\r\n      } else {\r\n        queryParams.append(paramName, value.toString());\r\n      }\r\n    }\r\n  }\r\n}", "/**\r\n * Herramienta MCP para obtener colecci\u00F3n de folios de Track HS\r\n */\r\n\r\nimport { BaseTrackHSTool } from '../core/base-tool.js';\r\nimport { GetFoliosCollectionParams, GetFoliosCollectionResponse } from '../types/folios.js';\r\n\r\nexport class GetFoliosCollectionTool extends BaseTrackHSTool {\r\n  name = 'get_folios_collection';\r\n  description = 'Get a collection of folios (bills/receipts) with filtering, pagination, and sorting options';\r\n  \r\n  inputSchema = {\r\n    type: 'object' as const,\r\n    properties: {\r\n      // Paginaci\u00F3n\r\n      page: { \r\n        type: 'number', \r\n        minimum: 1,\r\n        description: 'Page number of result set'\r\n      },\r\n      size: { \r\n        type: 'number', \r\n        minimum: 1,\r\n        maximum: 100,\r\n        description: 'Page size - maximum 100 items per page'\r\n      },\r\n      \r\n      // Ordenamiento\r\n      sortColumn: { \r\n        type: 'string', \r\n        enum: ['id', 'name', 'status', 'type', 'startDate', 'endDate', 'contactName', 'companyName', 'reservationId', 'currentBalance', 'realizedBalance', 'masterFolioRule'],\r\n        default: 'id',\r\n        description: 'Column to sort the result set'\r\n      },\r\n      sortDirection: { \r\n        type: 'string', \r\n        enum: ['asc', 'desc'],\r\n        default: 'asc',\r\n        description: 'Direction to sort result set'\r\n      },\r\n      \r\n      // B\u00FAsqueda\r\n      search: { \r\n        type: 'string', \r\n        description: 'Search folios by id, name, company name, contact name, reservation id, unit id or unit name'\r\n      },\r\n      \r\n      // Filtros por tipo\r\n      type: { \r\n        type: 'string', \r\n        enum: ['guest', 'master', 'guest-sub-folio', 'master-sub-folio'],\r\n        description: 'Limit results to certain folio types'\r\n      },\r\n      status: { \r\n        type: 'string', \r\n        enum: ['open', 'closed'],\r\n        description: 'Search folios by their status'\r\n      },\r\n      \r\n      // Filtros por ID\r\n      masterFolioId: { \r\n        type: 'number', \r\n        minimum: 1,\r\n        description: 'Search folios by master Folio Id - if type = guest'\r\n      },\r\n      contactId: { \r\n        type: 'number', \r\n        minimum: 1,\r\n        description: 'Search folios by guest id'\r\n      },\r\n      companyId: { \r\n        type: 'number', \r\n        minimum: 1,\r\n        description: 'Search folios by company id'\r\n      }\r\n    },\r\n    required: []\r\n  };\r\n\r\n  async execute(params: GetFoliosCollectionParams = {}): Promise<GetFoliosCollectionResponse> {\r\n    // Validar par\u00E1metros b\u00E1sicos\r\n    this.validateParams(params);\r\n\r\n    // Construir query parameters\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    // Solo agregar par\u00E1metros que est\u00E1n definidos y no son undefined\r\n    if (params.page !== undefined) {\r\n      queryParams.append('page', params.page.toString());\r\n    }\r\n    \r\n    if (params.size !== undefined) {\r\n      queryParams.append('size', params.size.toString());\r\n    }\r\n    \r\n    if (params.sortColumn) {\r\n      queryParams.append('sortColumn', params.sortColumn);\r\n    }\r\n    \r\n    if (params.sortDirection) {\r\n      queryParams.append('sortDirection', params.sortDirection);\r\n    }\r\n\r\n    // Agregar par\u00E1metros de b\u00FAsqueda solo si est\u00E1n definidos\r\n    if (params.search) {\r\n      queryParams.append('search', params.search);\r\n    }\r\n\r\n    if (params.type) {\r\n      queryParams.append('type', params.type);\r\n    }\r\n\r\n    if (params.status) {\r\n      queryParams.append('status', params.status);\r\n    }\r\n\r\n    if (params.masterFolioId !== undefined) {\r\n      queryParams.append('masterFolioId', params.masterFolioId.toString());\r\n    }\r\n\r\n    if (params.contactId !== undefined) {\r\n      queryParams.append('contactId', params.contactId.toString());\r\n    }\r\n\r\n    if (params.companyId !== undefined) {\r\n      queryParams.append('companyId', params.companyId.toString());\r\n    }\r\n\r\n    const endpoint = `/pms/folios?${queryParams.toString()}`;\r\n    \r\n    try {\r\n      const result = await this.apiClient.get<GetFoliosCollectionResponse>(endpoint);\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`Error al obtener folios: ${error instanceof Error ? error.message : 'Error desconocido'}`);\r\n    }\r\n  }\r\n}", "/**\r\n * Herramienta MCP para obtener contactos de Track HS\r\n */\r\n\r\nimport { BaseTrackHSTool } from '../core/base-tool.js';\r\nimport { ContactsResponse, GetContactsParams } from '../types/contacts.js';\r\n\r\nexport class GetContactsTool extends BaseTrackHSTool {\r\n  name = 'get_contacts';\r\n  description = 'Retrieve all contacts from Track HS CRM system. Contacts include guests, owners, or vendor employees.';\r\n  \r\n  inputSchema = {\r\n    type: 'object' as const,\r\n    properties: {\r\n      sortColumn: { \r\n        type: 'string', \r\n        enum: ['id', 'name', 'email', 'cellPhone', 'homePhone', 'otherPhone', 'vip'],\r\n        description: 'Sort by id, name, email, mobile phone, home phone, other phone, vip'\r\n      },\r\n      sortDirection: { \r\n        type: 'string', \r\n        enum: ['asc', 'desc'], \r\n        default: 'asc',\r\n        description: 'Sort ascending or descending'\r\n      },\r\n      search: { \r\n        type: 'string', \r\n        description: 'Search by first name, last name, email, mobile phone, home phone, other phone with right side wildcard'\r\n      },\r\n      term: { \r\n        type: 'string', \r\n        description: 'Locate contact based on a precise value such as ID or name'\r\n      },\r\n      email: { \r\n        type: 'string', \r\n        format: 'email',\r\n        description: 'Search contact by primary or secondary email address'\r\n      },\r\n      page: { \r\n        type: 'number', \r\n        description: 'Page Number',\r\n        minimum: 1\r\n      },\r\n      size: { \r\n        type: 'number', \r\n        description: 'Page Size',\r\n        minimum: 1,\r\n        maximum: 100\r\n      },\r\n      updatedSince: { \r\n        type: 'string', \r\n        format: 'date-time', \r\n        description: 'Date in ISO 8601 format. Will return all contacts updated since timestamp'\r\n      }\r\n    },\r\n    required: []\r\n  };\r\n\r\n  async execute(params: GetContactsParams = {}): Promise<ContactsResponse> {\r\n    // Validar par\u00E1metros\r\n    this.validateParams(params);\r\n\r\n    // Construir query parameters\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    // Aplicar valores por defecto\r\n    const sortDirection = params.sortDirection || 'asc';\r\n\r\n    // Agregar par\u00E1metros a la query\r\n    if (params.sortColumn) {\r\n      queryParams.append('sortColumn', params.sortColumn);\r\n    }\r\n    queryParams.append('sortDirection', sortDirection);\r\n\r\n    if (params.search) {\r\n      queryParams.append('search', params.search);\r\n    }\r\n\r\n    if (params.term) {\r\n      queryParams.append('term', params.term);\r\n    }\r\n\r\n    if (params.email) {\r\n      queryParams.append('email', params.email);\r\n    }\r\n\r\n    if (params.page) {\r\n      queryParams.append('page', params.page.toString());\r\n    }\r\n\r\n    if (params.size) {\r\n      queryParams.append('size', params.size.toString());\r\n    }\r\n\r\n    if (params.updatedSince) {\r\n      queryParams.append('updatedSince', params.updatedSince);\r\n    }\r\n\r\n    const endpoint = `/crm/contacts?${queryParams.toString()}`;\r\n    \r\n    try {\r\n      const result = await this.apiClient.get<ContactsResponse>(endpoint);\r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`Error al obtener contactos: ${error instanceof Error ? error.message : 'Error desconocido'}`);\r\n    }\r\n  }\r\n}", "/**\r\n * Servidor MCP simplificado para Track HS\r\n * Versi\u00F3n que funciona correctamente con Cloudflare Workers\r\n */\r\n\r\nimport { TrackHSApiClient } from './api-client.js';\r\nimport { BaseTrackHSTool } from './base-tool.js';\r\n\r\n// Importar herramientas\r\nimport { GetReviewsTool } from '../tools/get-reviews.js';\r\nimport { GetReservationTool } from '../tools/get-reservation.js';\r\nimport { SearchReservationsTool } from '../tools/search-reservations.js';\r\nimport { GetUnitsTool } from '../tools/get-units.js';\r\nimport { GetFoliosCollectionTool } from '../tools/get-folios-collection.js';\r\nimport { GetContactsTool } from '../tools/get-contacts.js';\r\n\r\nexport interface Env {\r\n  TRACKHS_API_URL: string;\r\n  TRACKHS_USERNAME: string;\r\n  TRACKHS_PASSWORD: string;\r\n  ENVIRONMENT?: string;\r\n}\r\n\r\nexport class SimpleTrackHSMCPServer {\r\n  private tools: BaseTrackHSTool[];\r\n  private apiClient: TrackHSApiClient;\r\n\r\n  constructor(private env: Env) {\r\n    // Validar variables de entorno\r\n    this.validateEnvironment();\r\n\r\n    // Configurar cliente API\r\n    this.apiClient = new TrackHSApiClient({\r\n      baseUrl: this.env.TRACKHS_API_URL,\r\n      username: this.env.TRACKHS_USERNAME,\r\n      password: this.env.TRACKHS_PASSWORD\r\n    });\r\n\r\n    // Registrar herramientas\r\n    this.tools = [\r\n      new GetReviewsTool(this.apiClient),\r\n      new GetReservationTool(this.apiClient),\r\n      new SearchReservationsTool(this.apiClient),\r\n      new GetUnitsTool(this.apiClient),\r\n      new GetFoliosCollectionTool(this.apiClient),\r\n      new GetContactsTool(this.apiClient)\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Valida las variables de entorno requeridas\r\n   */\r\n  private validateEnvironment(): void {\r\n    const requiredVars: (keyof Env)[] = ['TRACKHS_API_URL', 'TRACKHS_USERNAME', 'TRACKHS_PASSWORD'];\r\n    \r\n    for (const varName of requiredVars) {\r\n      if (!this.env[varName]) {\r\n        throw new Error(`Variable de entorno requerida no configurada: ${varName}`);\r\n      }\r\n    }\r\n\r\n    // Validar formato de URL\r\n    try {\r\n      new URL(this.env.TRACKHS_API_URL);\r\n    } catch {\r\n      throw new Error('TRACKHS_API_URL debe ser una URL v\u00E1lida');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maneja las peticiones HTTP entrantes\r\n   */\r\n  async handleRequest(request: Request): Promise<Response> {\r\n    try {\r\n      const url = new URL(request.url);\r\n      console.log(`Simple MCP Server: ${request.method} ${url.pathname}`);\r\n      \r\n      // Headers CORS\r\n      const corsHeaders = {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept',\r\n        'Access-Control-Allow-Credentials': 'true'\r\n      };\r\n\r\n      // Manejar preflight\r\n      if (request.method === 'OPTIONS') {\r\n        return new Response(null, { headers: corsHeaders });\r\n      }\r\n\r\n      // OAuth endpoints est\u00E1ndar\r\n      if (url.pathname === '/.well-known/oauth-authorization-server') {\r\n        return new Response(JSON.stringify({\r\n          issuer: 'https://trackhs-mcp-remote.ihsolutionsco.workers.dev',\r\n          authorization_endpoint: 'https://trackhs-mcp-remote.ihsolutionsco.workers.dev/auth/authorize',\r\n          token_endpoint: 'https://trackhs-mcp-remote.ihsolutionsco.workers.dev/auth/token',\r\n          response_types_supported: ['code'],\r\n          grant_types_supported: ['authorization_code'],\r\n          scopes_supported: ['trackhs:read', 'trackhs:write'],\r\n          client_id: 'trackhs-mcp-client'\r\n        }), {\r\n          headers: {\r\n            ...corsHeaders,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n      }\r\n\r\n      if (url.pathname === '/.well-known/oauth-protected-resource') {\r\n        return new Response(JSON.stringify({\r\n          resource: 'https://trackhs-mcp-remote.ihsolutionsco.workers.dev',\r\n          scopes: ['trackhs:read', 'trackhs:write'],\r\n          authorization_servers: ['https://trackhs-mcp-remote.ihsolutionsco.workers.dev']\r\n        }), {\r\n          headers: {\r\n            ...corsHeaders,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n      }\r\n\r\n      // Dynamic Client Registration\r\n      if (url.pathname === '/register' && request.method === 'POST') {\r\n        return new Response(JSON.stringify({\r\n          client_id: 'trackhs-mcp-client',\r\n          client_secret: 'trackhs-mcp-secret',\r\n          registration_access_token: 'reg_token_' + Math.random().toString(36).substring(2, 15),\r\n          registration_client_uri: 'https://trackhs-mcp-remote.ihsolutionsco.workers.dev/register/trackhs-mcp-client',\r\n          client_id_issued_at: Math.floor(Date.now() / 1000),\r\n          client_secret_expires_at: 0\r\n        }), {\r\n          headers: {\r\n            ...corsHeaders,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n      }\r\n\r\n      // OAuth endpoints b\u00E1sicos\r\n      if (url.pathname === '/auth/authorize' && request.method === 'GET') {\r\n        const responseType = url.searchParams.get('response_type');\r\n        const clientId = url.searchParams.get('client_id');\r\n        const redirectUri = url.searchParams.get('redirect_uri');\r\n        const scope = url.searchParams.get('scope');\r\n        const state = url.searchParams.get('state');\r\n\r\n        if (responseType === 'code' && clientId === 'trackhs-mcp-client') {\r\n          const authCode = 'auth_' + Math.random().toString(36).substring(2, 15);\r\n          const redirectUrl = new URL(redirectUri || 'https://claude.ai/api/mcp/auth_callback');\r\n          redirectUrl.searchParams.set('code', authCode);\r\n          if (state) {\r\n            redirectUrl.searchParams.set('state', state);\r\n          }\r\n          return Response.redirect(redirectUrl.toString(), 302);\r\n        }\r\n      }\r\n\r\n      if (url.pathname === '/auth/token' && request.method === 'POST') {\r\n        const body = await request.json();\r\n        const { grant_type, code, redirect_uri, client_id, client_secret } = body;\r\n\r\n        if (grant_type === 'authorization_code' && client_id === 'trackhs-mcp-client') {\r\n          const accessToken = 'access_' + Math.random().toString(36).substring(2, 15);\r\n          const refreshToken = 'refresh_' + Math.random().toString(36).substring(2, 15);\r\n\r\n          return new Response(JSON.stringify({\r\n            access_token: accessToken,\r\n            refresh_token: refreshToken,\r\n            token_type: 'Bearer',\r\n            expires_in: 3600,\r\n            scope: 'trackhs:read trackhs:write'\r\n          }), {\r\n            headers: {\r\n              ...corsHeaders,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      // MCP endpoint b\u00E1sico\r\n      if (url.pathname === '/mcp' && request.method === 'POST') {\r\n        const body = await request.json();\r\n        \r\n        if (body.method === 'initialize') {\r\n          return new Response(JSON.stringify({\r\n            jsonrpc: '2.0',\r\n            id: body.id,\r\n            result: {\r\n              protocolVersion: '2024-11-05',\r\n              capabilities: {\r\n                tools: {},\r\n                prompts: {},\r\n                resources: {}\r\n              },\r\n              serverInfo: {\r\n                name: 'trackhs-mcp-server',\r\n                version: '1.0.0'\r\n              }\r\n            }\r\n          }), {\r\n            headers: {\r\n              ...corsHeaders,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          });\r\n        }\r\n\r\n        if (body.method === 'tools/list') {\r\n          return new Response(JSON.stringify({\r\n            jsonrpc: '2.0',\r\n            id: body.id,\r\n            result: {\r\n              tools: this.tools.map(tool => ({\r\n                name: tool.name,\r\n                description: tool.description,\r\n                inputSchema: tool.inputSchema\r\n              }))\r\n            }\r\n          }), {\r\n            headers: {\r\n              ...corsHeaders,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          });\r\n        }\r\n\r\n        if (body.method === 'tools/call') {\r\n          const { name, arguments: args } = body.params;\r\n          const tool = this.tools.find(t => t.name === name);\r\n          \r\n          if (!tool) {\r\n            return new Response(JSON.stringify({\r\n              jsonrpc: '2.0',\r\n              id: body.id,\r\n              error: {\r\n                code: -32601,\r\n                message: `Herramienta desconocida: ${name}`\r\n              }\r\n            }), {\r\n              status: 400,\r\n              headers: {\r\n                ...corsHeaders,\r\n                'Content-Type': 'application/json'\r\n              }\r\n            });\r\n          }\r\n\r\n          try {\r\n            const result = await tool.execute(args || {});\r\n            return new Response(JSON.stringify({\r\n              jsonrpc: '2.0',\r\n              id: body.id,\r\n              result: {\r\n                content: [\r\n                  {\r\n                    type: 'text',\r\n                    text: JSON.stringify(result, null, 2)\r\n                  }\r\n                ]\r\n              }\r\n            }), {\r\n              headers: {\r\n                ...corsHeaders,\r\n                'Content-Type': 'application/json'\r\n              }\r\n            });\r\n          } catch (error) {\r\n            return new Response(JSON.stringify({\r\n              jsonrpc: '2.0',\r\n              id: body.id,\r\n              error: {\r\n                code: -32603,\r\n                message: 'Error interno del servidor',\r\n                data: error instanceof Error ? error.message : 'Error desconocido'\r\n              }\r\n            }), {\r\n              status: 500,\r\n              headers: {\r\n                ...corsHeaders,\r\n                'Content-Type': 'application/json'\r\n              }\r\n            });\r\n          }\r\n        }\r\n\r\n        // M\u00E9todo MCP no reconocido\r\n        return new Response(JSON.stringify({\r\n          jsonrpc: '2.0',\r\n          id: body.id,\r\n          error: {\r\n            code: -32601,\r\n            message: `M\u00E9todo MCP no reconocido: ${body.method}`\r\n          }\r\n        }), {\r\n          status: 400,\r\n          headers: {\r\n            ...corsHeaders,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n      }\r\n\r\n      // Health check\r\n      if (url.pathname === '/health' && request.method === 'GET') {\r\n        return new Response(JSON.stringify({ \r\n          status: 'ok',\r\n          server: 'trackhs-mcp-server',\r\n          version: '1.0.0',\r\n          tools: this.tools.length\r\n        }), { \r\n          headers: { \r\n            ...corsHeaders, \r\n            'Content-Type': 'application/json' \r\n          } \r\n        });\r\n      }\r\n\r\n      // Informaci\u00F3n del servidor\r\n      if (url.pathname === '/' && request.method === 'GET') {\r\n        return new Response(JSON.stringify({ \r\n          name: 'TrackHS MCP Server',\r\n          version: '1.0.0',\r\n          description: 'Servidor MCP remoto para integraci\u00F3n con Track HS API',\r\n          endpoints: {\r\n            mcp: '/mcp',\r\n            health: '/health',\r\n            oauth: '/auth/authorize'\r\n          },\r\n          tools: this.tools.map(t => ({\r\n            name: t.name,\r\n            description: t.description\r\n          }))\r\n        }), { \r\n          headers: { \r\n            ...corsHeaders, \r\n            'Content-Type': 'application/json' \r\n          } \r\n        });\r\n      }\r\n\r\n      console.log(`Simple MCP Server: No route found for ${url.pathname}`);\r\n      return new Response('Not Found', { \r\n        status: 404, \r\n        headers: corsHeaders \r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('Error en servidor MCP:', error);\r\n      \r\n      return new Response(JSON.stringify({ \r\n        error: 'Error interno del servidor',\r\n        message: error instanceof Error ? error.message : 'Error desconocido'\r\n      }), { \r\n        status: 500,\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Access-Control-Allow-Origin': '*'\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtiene informaci\u00F3n sobre las herramientas disponibles\r\n   */\r\n  getToolsInfo(): Array<{name: string, description: string}> {\r\n    return this.tools.map(tool => ({\r\n      name: tool.name,\r\n      description: tool.description\r\n    }));\r\n  }\r\n}\r\n", "/**\n * Cloudflare Worker para Track HS MCP Server\n * Implementa servidor MCP remoto con autenticaci\u00F3n OAuth y transporte SSE\n */\n\nimport { SimpleTrackHSMCPServer } from '../src/core/simple-mcp-server.js';\n\nexport default {\n  async fetch(request, env) {\n    try {\n      // Headers CORS est\u00E1ndar\n      const corsHeaders = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept',\n        'Access-Control-Allow-Credentials': 'true'\n      };\n\n      // Manejar preflight requests\n      if (request.method === 'OPTIONS') {\n        return new Response(null, { \n          status: 204,\n          headers: corsHeaders \n        });\n      }\n\n      // Crear instancia del servidor MCP simplificado\n      const server = new SimpleTrackHSMCPServer(env);\n      \n      // Manejar la petici\u00F3n\n      return await server.handleRequest(request);\n      \n    } catch (error) {\n      console.error('Error en Cloudflare Worker:', error);\n      \n      // Headers CORS para errores\n      const corsHeaders = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept',\n        'Access-Control-Allow-Credentials': 'true'\n      };\n      \n      return new Response(JSON.stringify({\n        error: 'Error interno del servidor',\n        message: error instanceof Error ? error.message : 'Error desconocido',\n        timestamp: new Date().toISOString()\n      }), {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  }\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\EQUIPO\\\\Documents\\\\Software\\\\MCPtrackhsConnector\\\\cloudflare\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\EQUIPO\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\EQUIPO\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\EQUIPO\\\\Documents\\\\Software\\\\MCPtrackhsConnector\\\\cloudflare\\\\worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\EQUIPO\\\\Documents\\\\Software\\\\MCPtrackhsConnector\\\\.wrangler\\\\tmp\\\\bundle-jwNSZb\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\EQUIPO\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\EQUIPO\\\\Documents\\\\Software\\\\MCPtrackhsConnector\\\\.wrangler\\\\tmp\\\\bundle-jwNSZb\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\EQUIPO\\\\Documents\\\\Software\\\\MCPtrackhsConnector\\\\.wrangler\\\\tmp\\\\bundle-jwNSZb\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
