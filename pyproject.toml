# TrackHS MCP Connector - Configuración de Herramientas de Desarrollo
# Configuración centralizada para todas las herramientas de calidad de código

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
force_single_line = false
include_trailing_comma = true
ensure_newline_before_comments = true
known_first_party = ["trackhs_mcp", "src.trackhs_mcp"]
known_third_party = ["fastmcp", "httpx", "pydantic", "pytest"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501", "D400", "D200", "D205", "D107", "D104", "D105", "F401", "F841", "E712", "F541", "E402"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
    "venv",
    "Lib",
    "Scripts"
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101"
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "httpx.*",
    "pydantic.*"
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "Lib", "Scripts"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["src/trackhs_mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/Lib/*",
    "*/Scripts/*",
    "*/resources/*",
    "*/documentation/*",
    "*/examples/*",
    "*/references/*",
    "*/schemas/*",
    "*/__main__.py",
    "*/server.py",
    "*/all_tools.py",
    "*/prompts.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--verbose",
    "--tb=short",
    "--cov=src/trackhs_mcp",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-fail-under=40",
    "--asyncio-mode=auto",
    "-x"
]
markers = [
    "critical: Critical functionality tests",
    "smoke: Smoke tests for quick validation"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
