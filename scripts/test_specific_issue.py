#!/usr/bin/env python3
"""
Script espec√≠fico para diagnosticar el problema de FastMCP Cloud
Basado en el error: "Recurso no encontrado: <!DOCTYPE html>..."
"""

import json
import os
import sys

import httpx


def test_specific_issue():
    """Probar espec√≠ficamente el problema reportado"""
    print("üîç Diagn√≥stico espec√≠fico del problema de FastMCP Cloud")
    print("=" * 60)
    print("Error reportado: 'Recurso no encontrado: <!DOCTYPE html>...'")
    print("=" * 60)

    # Obtener configuraci√≥n
    base_url = os.getenv("TRACKHS_API_URL", "https://ihmvacations.trackhs.com/api")
    username = os.getenv("TRACKHS_USERNAME")
    password = os.getenv("TRACKHS_PASSWORD")

    print(f"Base URL: {base_url}")
    print(f"Username: {username[:3]}***" if username else "None")
    print(f"Password: {'***' if password else 'None'}")

    if not username or not password:
        print("‚ùå Error: Credenciales no configuradas")
        print("üí° Configure TRACKHS_USERNAME y TRACKHS_PASSWORD en FastMCP Cloud")
        return False

    # Probar el endpoint espec√≠fico que est√° fallando
    endpoint = "pms/units"
    full_url = f"{base_url}/{endpoint}"

    print(f"\nüéØ Probando endpoint espec√≠fico: {full_url}")
    print("Este es el endpoint que est√° causando el error en FastMCP Cloud")

    try:
        with httpx.Client(auth=(username, password), timeout=15.0) as client:
            # Probar con par√°metros m√≠nimos
            params = {"page": 1, "size": 1}
            print(f"Par√°metros: {params}")

            response = client.get(full_url, params=params)

            print(f"\nüìä RESULTADO:")
            print(f"Status Code: {response.status_code}")
            print(f"Content-Type: {response.headers.get('content-type', 'N/A')}")
            print(f"Content-Length: {len(response.text)}")
            print(f"Response Headers: {dict(response.headers)}")

            # Verificar si es HTML (el problema reportado)
            content_type = response.headers.get("content-type", "")
            if "text/html" in content_type:
                print("\n‚ùå PROBLEMA CONFIRMADO: Respuesta HTML recibida")
                print("Esto confirma el error reportado en FastMCP Cloud")
                print("\nüîç An√°lisis de la respuesta HTML:")

                # Buscar indicadores en el HTML
                html_content = response.text
                if "Page not found" in html_content:
                    print("   - Contiene 'Page not found'")
                if "Track Software" in html_content:
                    print("   - Contiene 'Track Software' (p√°gina de error de TrackHS)")
                if "Contact Support" in html_content:
                    print("   - Contiene enlace de soporte")

                print(f"\nüìÑ Preview de la respuesta HTML:")
                print("-" * 50)
                print(html_content[:500])
                print("-" * 50)

                print("\nüí° DIAGN√ìSTICO:")
                print("   - El endpoint no existe en esta URL")
                print("   - La URL base podr√≠a ser incorrecta")
                print("   - Las credenciales podr√≠an ser incorrectas")
                print("   - El endpoint podr√≠a requerir un path diferente")

                return False

            # Verificar si es JSON v√°lido
            try:
                data = response.json()
                print("\n‚úÖ √âXITO: Respuesta JSON v√°lida recibida")
                print(f"Claves en la respuesta: {list(data.keys())}")

                if "total_items" in data:
                    print(f"Total de elementos: {data['total_items']}")
                if "_embedded" in data:
                    print(f"Elementos embebidos: {list(data['_embedded'].keys())}")

                print("\nüéâ PROBLEMA RESUELTO:")
                print("   - El endpoint funciona correctamente")
                print("   - La configuraci√≥n es v√°lida")
                print("   - El problema podr√≠a estar en FastMCP Cloud")

                return True

            except json.JSONDecodeError:
                print("\n‚ùå ERROR: Respuesta no es JSON v√°lido")
                print("Preview de la respuesta:")
                print("-" * 50)
                print(response.text[:500])
                print("-" * 50)
                return False

    except httpx.HTTPStatusError as e:
        print(f"\n‚ùå HTTP Error {e.response.status_code}")
        print(f"Respuesta: {e.response.text[:200]}")

        if e.response.status_code == 401:
            print("\nüí° DIAGN√ìSTICO: Credenciales inv√°lidas")
            print("   - Verificar TRACKHS_USERNAME")
            print("   - Verificar TRACKHS_PASSWORD")
        elif e.response.status_code == 403:
            print("\nüí° DIAGN√ìSTICO: Acceso denegado")
            print("   - Las credenciales son correctas pero no tienen permisos")
        elif e.response.status_code == 404:
            print("\nüí° DIAGN√ìSTICO: Endpoint no encontrado")
            print("   - La URL base podr√≠a ser incorrecta")
            print("   - El endpoint podr√≠a no existir")

        return False

    except httpx.RequestError as e:
        print(f"\n‚ùå Error de conexi√≥n: {str(e)}")
        print("\nüí° DIAGN√ìSTICO: Problema de conectividad")
        print("   - Verificar conexi√≥n a internet")
        print("   - Verificar que la URL sea accesible")
        return False

    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")
        return False


def suggest_solutions():
    """Sugerir soluciones basadas en el diagn√≥stico"""
    print("\n" + "=" * 60)
    print("üí° SOLUCIONES RECOMENDADAS")
    print("=" * 60)

    print("1. üîß Verificar Variables de Entorno en FastMCP Cloud:")
    print("   - TRACKHS_USERNAME debe estar configurado")
    print("   - TRACKHS_PASSWORD debe estar configurado")
    print(
        "   - TRACKHS_API_URL es opcional (default: https://ihmvacations.trackhs.com/api)"
    )

    print("\n2. üåê Probar Diferentes URLs Base:")
    print("   - https://ihmvacations.trackhs.com/api")
    print("   - https://ihmvacations.trackhs.com")
    print("   - https://api.trackhs.com/api")
    print("   - https://api.trackhs.com")

    print("\n3. üîç Probar Diferentes Endpoints:")
    print("   - pms/units")
    print("   - units")
    print("   - api/pms/units")

    print("\n4. üîê Verificar M√©todo de Autenticaci√≥n:")
    print("   - Basic Auth (usuario/contrase√±a)")
    print("   - Bearer Token")
    print("   - Headers personalizados")

    print("\n5. üìã Ejecutar Diagn√≥sticos Completos:")
    print("   python scripts/run_full_diagnosis.py")
    print("   python scripts/test_url_variations_simple.py")
    print("   python scripts/test_auth_methods.py")


def main():
    """Funci√≥n principal"""
    success = test_specific_issue()
    suggest_solutions()

    if success:
        print("\nüéâ ¬°El problema est√° resuelto!")
        print("La configuraci√≥n actual funciona correctamente.")
    else:
        print("\n‚ùå El problema persiste")
        print(
            "Ejecuta los scripts de diagn√≥stico para encontrar la configuraci√≥n correcta."
        )


if __name__ == "__main__":
    main()
