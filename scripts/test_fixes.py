#!/usr/bin/env python3
"""
Script para probar las correcciones del MCP TrackHS Connector
Verifica que los problemas reportados por el tester est√©n solucionados
"""

import json
import os
import sys
from pathlib import Path

import httpx
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de la API
API_BASE_URL = os.getenv("TRACKHS_API_URL", "https://ihmvacations.trackhs.com")
API_USERNAME = os.getenv("TRACKHS_USERNAME")
API_PASSWORD = os.getenv("TRACKHS_PASSWORD")


def test_basic_connectivity():
    """Probar conectividad b√°sica con la URL corregida"""
    print("üîå Probando conectividad b√°sica con URL corregida...")
    print(f"   Base URL: {API_BASE_URL}")
    print(f"   Username: {'‚úÖ Configurado' if API_USERNAME else '‚ùå No configurado'}")
    print(f"   Password: {'‚úÖ Configurado' if API_PASSWORD else '‚ùå No configurado'}")

    if not API_USERNAME or not API_PASSWORD:
        print("‚ùå Error: Credenciales no configuradas")
        return False

    return True


def test_units_endpoint():
    """Probar endpoint de unidades con par√°metros num√©ricos corregidos"""
    print("\nüè† Probando endpoint de unidades con correcciones...")

    test_cases = [
        {
            "name": "B√∫squeda b√°sica sin filtros",
            "params": {"page": 1, "size": 5},
            "expected_status": 200,
        },
        {
            "name": "B√∫squeda con 3 dormitorios (par√°metro num√©rico)",
            "params": {"page": 1, "size": 5, "bedrooms": 3},
            "expected_status": 200,
        },
        {
            "name": "B√∫squeda con 2 ba√±os (par√°metro num√©rico)",
            "params": {"page": 1, "size": 5, "bathrooms": 2},
            "expected_status": 200,
        },
        {
            "name": "B√∫squeda con filtros combinados",
            "params": {
                "page": 1,
                "size": 5,
                "bedrooms": 3,
                "bathrooms": 2,
                "is_active": 1,
            },
            "expected_status": 200,
        },
        {
            "name": "B√∫squeda con texto",
            "params": {"page": 1, "size": 5, "search": "luxury"},
            "expected_status": 200,
        },
        {
            "name": "B√∫squeda con unidades disponibles",
            "params": {"page": 1, "size": 5, "is_active": 1, "is_bookable": 1},
            "expected_status": 200,
        },
    ]

    success_count = 0
    total_tests = len(test_cases)

    for test_case in test_cases:
        print(f"\n   üîç {test_case['name']}")
        print(f"      Par√°metros: {test_case['params']}")

        try:
            with httpx.Client(
                auth=(API_USERNAME, API_PASSWORD), timeout=30.0
            ) as client:
                response = client.get(
                    f"{API_BASE_URL}/pms/units", params=test_case["params"]
                )
                print(f"      Status: {response.status_code}")

                if response.status_code == test_case["expected_status"]:
                    try:
                        data = response.json()
                        total_items = data.get("total_items", 0)
                        print(f"      ‚úÖ √âxito - Total items: {total_items}")
                        success_count += 1
                    except json.JSONDecodeError:
                        print(f"      ‚ö†Ô∏è  Respuesta no es JSON v√°lido")
                        print(f"      Content: {response.text[:200]}...")
                else:
                    print(f"      ‚ùå Error {response.status_code}")
                    print(f"      Response: {response.text[:300]}...")

        except Exception as e:
            print(f"      ‚ùå Excepci√≥n: {e}")

    success_rate = (success_count / total_tests) * 100
    print(
        f"\nüìä Resultados: {success_count}/{total_tests} pruebas exitosas ({success_rate:.1f}%)"
    )

    return success_count == total_tests


def test_parameter_types():
    """Probar que los par√°metros num√©ricos se env√≠an correctamente"""
    print("\nüî¢ Probando tipos de par√°metros...")

    # Probar con diferentes tipos de par√°metros
    test_params = {
        "page": 1,
        "size": 5,
        "bedrooms": 3,  # Entero
        "bathrooms": 2,  # Entero
        "is_active": 1,  # Entero
        "is_bookable": 1,  # Entero
    }

    try:
        with httpx.Client(auth=(API_USERNAME, API_PASSWORD), timeout=30.0) as client:
            response = client.get(f"{API_BASE_URL}/pms/units", params=test_params)
            print(f"   Status: {response.status_code}")

            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Par√°metros num√©ricos aceptados correctamente")
                print(f"   üìä Total items: {data.get('total_items', 'N/A')}")
                return True
            else:
                print(f"   ‚ùå Error {response.status_code}")
                print(f"   Response: {response.text[:200]}...")
                return False

    except Exception as e:
        print(f"   ‚ùå Excepci√≥n: {e}")
        return False


def test_alternative_endpoints():
    """Probar otros endpoints para verificar conectividad general"""
    print("\nüîÑ Probando otros endpoints...")

    endpoints = [
        ("/pms/units/amenities?page=1&size=5", "Amenidades"),
        ("/pms/reservations?page=1&size=5", "Reservas"),
    ]

    for endpoint, name in endpoints:
        print(f"\n   üîç {name}: {endpoint}")

        try:
            with httpx.Client(
                auth=(API_USERNAME, API_PASSWORD), timeout=30.0
            ) as client:
                response = client.get(f"{API_BASE_URL}{endpoint}")
                print(f"      Status: {response.status_code}")

                if response.status_code == 200:
                    data = response.json()
                    total_items = data.get("total_items", 0)
                    print(f"      ‚úÖ √âxito - Total items: {total_items}")
                else:
                    print(f"      ‚ùå Error {response.status_code}")
                    print(f"      Response: {response.text[:200]}...")

        except Exception as e:
            print(f"      ‚ùå Excepci√≥n: {e}")


def main():
    """Funci√≥n principal de prueba"""
    print("üîß Prueba de Correcciones - MCP TrackHS Connector")
    print("=" * 60)
    print("Verificando que los problemas reportados est√©n solucionados:")
    print("1. ‚úÖ Error 404 - URL corregida")
    print("2. ‚úÖ Validaci√≥n de tipos - Par√°metros num√©ricos corregidos")
    print("3. ‚úÖ Conectividad API - Verificando endpoints")
    print("=" * 60)

    # Verificar credenciales
    if not test_basic_connectivity():
        return 1

    # Probar endpoint de unidades con correcciones
    units_success = test_units_endpoint()

    # Probar tipos de par√°metros
    params_success = test_parameter_types()

    # Probar otros endpoints
    test_alternative_endpoints()

    # Resumen final
    print("\n" + "=" * 60)
    print("üèÅ Resumen de Pruebas")
    print("=" * 60)

    if units_success and params_success:
        print("‚úÖ TODAS LAS CORRECCIONES FUNCIONAN CORRECTAMENTE")
        print("   ‚Ä¢ URL corregida: https://ihmvacations.trackhs.com")
        print("   ‚Ä¢ Par√°metros num√©ricos convertidos a enteros")
        print("   ‚Ä¢ Endpoints respondiendo correctamente")
        print("\nüéâ El MCP TrackHS Connector est√° listo para producci√≥n")
        return 0
    else:
        print("‚ùå ALGUNAS CORRECCIONES NECESITAN REVISI√ìN")
        if not units_success:
            print("   ‚Ä¢ Problemas con endpoint de unidades")
        if not params_success:
            print("   ‚Ä¢ Problemas con tipos de par√°metros")
        return 1


if __name__ == "__main__":
    sys.exit(main())
