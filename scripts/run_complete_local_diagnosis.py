#!/usr/bin/env python3
"""
Script completo de diagn√≥stico local
Ejecuta todos los tests locales en secuencia para diagnosticar completamente el problema
"""

import os
import sys
import subprocess
import json
from datetime import datetime

def run_script(script_name: str, description: str):
    """Ejecutar un script espec√≠fico"""
    print(f"\n{'='*100}")
    print(f"üîç {description}")
    print(f"{'='*100}")
    
    if not os.path.exists(script_name):
        print(f"‚ùå Script no encontrado: {script_name}")
        return {"success": False, "error": "Script not found"}
    
    try:
        result = subprocess.run([
            sys.executable, script_name
        ], capture_output=True, text=True, timeout=180)
        
        print(result.stdout)
        if result.stderr:
            print("STDERR:")
            print(result.stderr)
        
        return {
            "success": result.returncode == 0,
            "stdout": result.stdout,
            "stderr": result.stderr,
            "returncode": result.returncode
        }
    except subprocess.TimeoutExpired:
        print("‚ùå Script timeout (180s)")
        return {"success": False, "error": "Timeout"}
    except Exception as e:
        print(f"‚ùå Error ejecutando script: {str(e)}")
        return {"success": False, "error": str(e)}

def check_environment():
    """Verificar entorno y credenciales"""
    print("üîç Verificando entorno y credenciales...")
    
    # Verificar Python
    print(f"Python version: {sys.version}")
    
    # Verificar credenciales
    username = os.getenv("TRACKHS_USERNAME")
    password = os.getenv("TRACKHS_PASSWORD")
    api_url = os.getenv("TRACKHS_API_URL")
    
    print(f"TRACKHS_USERNAME: {'‚úÖ' if username else '‚ùå'}")
    print(f"TRACKHS_PASSWORD: {'‚úÖ' if password else '‚ùå'}")
    print(f"TRACKHS_API_URL: {'‚úÖ' if api_url else '‚ö†Ô∏è  (usando default)'}")
    
    if not username or not password:
        print("\n‚ùå Error: Credenciales no configuradas")
        print("Configure las variables de entorno antes de continuar")
        return False
    
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ DIAGN√ìSTICO COMPLETO LOCAL - TRACKHS API")
    print("=" * 120)
    print(f"Timestamp: {datetime.now().isoformat()}")
    print("=" * 120)
    print("Este script ejecuta un diagn√≥stico completo local para")
    print("identificar la configuraci√≥n correcta antes de desplegar en FastMCP Cloud")
    print("=" * 120)
    
    # Verificar entorno
    if not check_environment():
        return
    
    # Scripts de diagn√≥stico en orden de prioridad
    diagnosis_scripts = [
        ("scripts/verify_server_config.py", "1. Verificaci√≥n de Configuraci√≥n del Servidor"),
        ("scripts/check_fastmcp_cloud_ready.py", "2. Verificaci√≥n de Preparaci√≥n para FastMCP Cloud"),
        ("scripts/test_basic_connectivity.py", "3. Test de Conectividad B√°sica"),
        ("scripts/test_current_config_local.py", "4. Test de Configuraci√≥n Actual"),
        ("scripts/test_local_api_real.py", "5. Test de M√∫ltiples Configuraciones"),
        ("scripts/test_auth_methods_local.py", "6. Test de M√©todos de Autenticaci√≥n"),
        ("scripts/test_specific_issue.py", "7. Test del Problema Espec√≠fico"),
        ("scripts/complete_diagnosis.py", "8. Diagn√≥stico Completo"),
    ]
    
    results = {}
    successful_scripts = 0
    
    print("üéØ Ejecutando diagn√≥stico completo en secuencia...")
    
    for script_path, description in diagnosis_scripts:
        print(f"\n‚è≥ Ejecutando: {description}")
        result = run_script(script_path, description)
        results[description] = result
        
        if result["success"]:
            successful_scripts += 1
            print(f"‚úÖ {description} - EXITOSO")
        else:
            print(f"‚ùå {description} - FALL√ì")
            if "error" in result:
                print(f"   Error: {result['error']}")
    
    # Resumen final
    print("\n" + "=" * 120)
    print("üìä RESUMEN FINAL DEL DIAGN√ìSTICO COMPLETO")
    print("=" * 120)
    
    total_scripts = len(diagnosis_scripts)
    print(f"Scripts ejecutados: {total_scripts}")
    print(f"Scripts exitosos: {successful_scripts}")
    print(f"Scripts fallidos: {total_scripts - successful_scripts}")
    print(f"Tasa de √©xito: {(successful_scripts / total_scripts) * 100:.1f}%")
    
    print(f"\nüìã DETALLE DE RESULTADOS:")
    for description, result in results.items():
        status = "‚úÖ" if result["success"] else "‚ùå"
        print(f"   {status} {description}")
        if not result["success"] and "error" in result:
            print(f"      Error: {result['error']}")
    
    # An√°lisis y recomendaciones
    print(f"\nüí° AN√ÅLISIS Y RECOMENDACIONES:")
    print("=" * 120)
    
    if successful_scripts == 0:
        print("‚ùå NING√öN DIAGN√ìSTICO FUE EXITOSO")
        print("\nüîç Posibles causas:")
        print("   - Credenciales incorrectas")
        print("   - URL base incorrecta")
        print("   - API no disponible")
        print("   - Problemas de conectividad")
        print("   - M√©todo de autenticaci√≥n incorrecto")
        print("\nüõ†Ô∏è  Acciones recomendadas:")
        print("   1. Verificar credenciales con TrackHS")
        print("   2. Verificar URL base correcta")
        print("   3. Contactar soporte t√©cnico de TrackHS")
        print("   4. Verificar conectividad de red")
        
    elif successful_scripts < total_scripts:
        print(f"‚ö†Ô∏è  {successful_scripts}/{total_scripts} DIAGN√ìSTICOS EXITOSOS")
        print("\nüîç Algunos diagn√≥sticos fallaron, pero otros funcionaron")
        print("\nüõ†Ô∏è  Acciones recomendadas:")
        print("   1. Usar la configuraci√≥n que funcion√≥")
        print("   2. Revisar los logs de los diagn√≥sticos fallidos")
        print("   3. Implementar la soluci√≥n exitosa en FastMCP Cloud")
        
    else:
        print("üéâ TODOS LOS DIAGN√ìSTICOS FUERON EXITOSOS")
        print("\n‚úÖ La configuraci√≥n funciona correctamente")
        print("\nüõ†Ô∏è  Acciones recomendadas:")
        print("   1. La configuraci√≥n est√° lista para FastMCP Cloud")
        print("   2. Desplegar en FastMCP Cloud con la misma configuraci√≥n")
        print("   3. Monitorear el funcionamiento")
    
    # Configuraci√≥n recomendada para FastMCP Cloud
    if successful_scripts > 0:
        print(f"\nüîß CONFIGURACI√ìN RECOMENDADA PARA FASTMCP CLOUD:")
        print("=" * 120)
        
        base_url = os.getenv("TRACKHS_API_URL", "https://ihmvacations.trackhs.com/api")
        username = os.getenv("TRACKHS_USERNAME")
        password = os.getenv("TRACKHS_PASSWORD")
        
        print(f"Variables de entorno:")
        print(f"   TRACKHS_API_URL={base_url}")
        print(f"   TRACKHS_USERNAME={username}")
        print(f"   TRACKHS_PASSWORD={password}")
        
        print(f"\nüìù NOTAS:")
        print(f"   - Esta configuraci√≥n funciona en local")
        print(f"   - Deber√≠a funcionar en FastMCP Cloud")
        print(f"   - Si hay problemas en FastMCP Cloud, revisar variables de entorno")
        
        print(f"\nüöÄ PR√ìXIMOS PASOS:")
        print(f"   1. Configurar variables de entorno en FastMCP Cloud")
        print(f"   2. Desplegar el servidor")
        print(f"   3. Probar la herramienta search_units")
        print(f"   4. Monitorear el funcionamiento")
    
    # Guardar reporte completo
    report_file = f"complete_local_diagnosis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "total_scripts": total_scripts,
        "successful_scripts": successful_scripts,
        "failed_scripts": total_scripts - successful_scripts,
        "success_rate": (successful_scripts / total_scripts) * 100,
        "results": results,
        "environment": {
            "python_version": sys.version,
            "TRACKHS_USERNAME_configured": bool(os.getenv("TRACKHS_USERNAME")),
            "TRACKHS_PASSWORD_configured": bool(os.getenv("TRACKHS_PASSWORD")),
            "TRACKHS_API_URL_configured": bool(os.getenv("TRACKHS_API_URL")),
            "TRACKHS_API_URL_value": os.getenv("TRACKHS_API_URL", "default"),
        },
        "recommendations": {
            "fastmcp_cloud_config": {
                "TRACKHS_API_URL": os.getenv("TRACKHS_API_URL", "https://ihmvacations.trackhs.com/api"),
                "TRACKHS_USERNAME": os.getenv("TRACKHS_USERNAME"),
                "TRACKHS_PASSWORD": "***"
            },
            "next_steps": [
                "Configurar variables de entorno en FastMCP Cloud",
                "Desplegar el servidor",
                "Probar la herramienta search_units",
                "Monitorear el funcionamiento"
            ]
        }
    }
    
    with open(report_file, "w", encoding="utf-8") as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ Reporte completo guardado en: {report_file}")
    
    # Instrucciones finales
    print(f"\nüéØ INSTRUCCIONES FINALES:")
    print("=" * 120)
    
    if successful_scripts > 0:
        print("‚úÖ Al menos un diagn√≥stico fue exitoso")
        print("   - Usa la configuraci√≥n que funcion√≥")
        print("   - Configura las variables de entorno en FastMCP Cloud")
        print("   - Despliega el servidor")
        print("   - Prueba la herramienta search_units")
    else:
        print("‚ùå Ning√∫n diagn√≥stico fue exitoso")
        print("   - Revisa las credenciales")
        print("   - Verifica la URL base")
        print("   - Contacta soporte t√©cnico de TrackHS")
    
    print(f"\nüìû Para soporte adicional:")
    print("   - Incluye el archivo de reporte: {report_file}")
    print("   - Incluye los logs del servidor")
    print("   - Incluye la configuraci√≥n de variables (sin credenciales)")

if __name__ == "__main__":
    main()
